// Generated by dart2js, the Dart to JavaScript compiler version: 0.6.3.3_r24898.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
$$._HTMLElement = {"": "Element;"};

$$.AbstractWorker = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.AnchorElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isAnchorElement: true,
  $asAnchorElement: null
};

$$.AnimationEvent = {"": "Event;"};

$$.ApplicationCache = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isApplicationCache: true,
  $asApplicationCache: null
};

$$.AreaElement = {"": "_HTMLElement;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "_HTMLElement;"};

$$.BarProp = {"": "Interceptor;", $isBarProp: true, $asBarProp: null};

$$.BaseElement = {"": "_HTMLElement;"};

$$.BeforeLoadEvent = {"": "Event;"};

$$.Blob = {"": "Interceptor;"};

$$.BodyElement = {"": "_HTMLElement;", $isBodyElement: true, $asBodyElement: null};

$$.ButtonElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.CDataSection = {"": "Text;"};

$$.Canvas2DContextAttributes = {"": "Interceptor;"};

$$.CanvasElement = {"": "_HTMLElement;",
  getContext$2: function(receiver, contextId, attrs) {
    return this._getContext_1$2(receiver, contextId, $.convertDartToNative_Dictionary(attrs));
    return this._getContext_2$1(receiver, contextId);
  },
  _getContext_1$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId, attrs);
  },
  _getContext_2$1: function(receiver, contextId) {
    return receiver.getContext(contextId);
  },
  get$onWebGlContextLost: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_webglcontextlost.forTarget$1(receiver), "$isStream", [$.ContextEvent], "$asStream");
  },
  get$onWebGlContextRestored: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_webglcontextrestored.forTarget$1(receiver), "$isStream", [$.ContextEvent], "$asStream");
  },
  getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil: function(receiver, alpha, antialias, depth, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    var options, context;
    options = $.makeLiteralMap(["alpha", alpha, "depth", depth, "stencil", stencil, "antialias", antialias, "premultipliedAlpha", premultipliedAlpha, "preserveDrawingBuffer", preserveDrawingBuffer]);
    context = this.getContext$2(receiver, "webgl", options);
    return $.interceptedTypeCheck(context == null ? this.getContext$2(receiver, "experimental-webgl", options) : context, "$isRenderingContext");
  },
  getContext3d$1$preserveDrawingBuffer: function($receiver, preserveDrawingBuffer) {
    return this.getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil($receiver, true, true, true, true, preserveDrawingBuffer, false);
  },
  $isCanvasElement: true,
  $asCanvasElement: null,
  $asObject: null
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;", $isCanvasRenderingContext: true, $asCanvasRenderingContext: null};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;"};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;", $isCloseEvent: true, $asCloseEvent: null};

$$.Comment = {"": "CharacterData;"};

$$.Composition = {"": "Interceptor;", $isComposition: true, $asComposition: null};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "_HTMLElement;"};

$$.Coordinates = {"": "Interceptor;", $isCoordinates: true, $asCoordinates: null};

$$.Crypto = {"": "Interceptor;", $isCrypto: true, $asCrypto: null};

$$.Css = {"": "Interceptor;", $isCss: true, $asCss: null};

$$.CssCharsetRule = {"": "CssRule;"};

$$.CssFilterRule = {"": "CssRule;"};

$$.CssFilterValue = {"": "_CssValueList;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CssFontFaceRule = {"": "CssRule;", $isCssFontFaceRule: true, $asCssFontFaceRule: null};

$$.CssHostRule = {"": "CssRule;"};

$$.CssImportRule = {"": "CssRule;"};

$$.CssKeyframeRule = {"": "CssRule;"};

$$.CssKeyframesRule = {"": "CssRule;"};

$$.CssMatrix = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.CssMediaRule = {"": "CssRule;"};

$$.CssMixFunctionValue = {"": "_CssValueList;"};

$$.CssPageRule = {"": "CssRule;"};

$$.CssRegionRule = {"": "CssRule;"};

$$.CssRule = {"": "Interceptor;", $isCssRule: true, $asCssRule: null};

$$.CssStyleDeclaration = {"": "Interceptor;length=",
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  set$backgroundColor: function(receiver, value) {
    this.setProperty$3(receiver, "background-color", value, "");
  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  $isCssStyleDeclaration: true,
  $asCssStyleDeclaration: null
};

$$.CssStyleRule = {"": "CssRule;"};

$$.CssStyleSheet = {"": "StyleSheet;", $isCssStyleSheet: true, $asCssStyleSheet: null};

$$.CssSupportsRule = {"": "CssRule;"};

$$.CssTransformValue = {"": "_CssValueList;"};

$$.CssUnknownRule = {"": "CssRule;"};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "_HTMLElement;"};

$$.DataListElement = {"": "_HTMLElement;"};

$$.DataTransfer = {"": "Interceptor;", $isDataTransfer: true, $asDataTransfer: null};

$$.DataTransferItem = {"": "Interceptor;"};

$$.DataTransferItemList = {"": "Interceptor;length=", $isDataTransferItemList: true, $asDataTransferItemList: null};

$$.DetailsElement = {"": "_HTMLElement;"};

$$.DeviceAcceleration = {"": "Interceptor;", $isDeviceAcceleration: true, $asDeviceAcceleration: null};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DeviceRotationRate = {"": "Interceptor;", $isDeviceRotationRate: true, $asDeviceRotationRate: null};

$$.DialogElement = {"": "_HTMLElement;"};

$$.DirectoryEntry = {"": "Entry;", $isDirectoryEntry: true, $asDirectoryEntry: null};

$$.DirectoryReader = {"": "Interceptor;"};

$$.DivElement = {"": "_HTMLElement;", $isDivElement: true, $asDivElement: null};

$$.Document = {"": "Node;",
  $$dom_createElement$2: function(receiver, localName_OR_tagName, typeExtension) {
    return receiver.createElement(localName_OR_tagName, typeExtension);
  },
  $$dom_createElement$1: function($receiver, localName_OR_tagName) {
    return $receiver.createElement(localName_OR_tagName);
  },
  $$dom_createTextNode$1: function(receiver, data) {
    return receiver.createTextNode(data);
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  get$onFullscreenChange: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_webkitfullscreenchange.forTarget$1(receiver), "$isStream", [$.Event], "$asStream");
  },
  get$onFullscreenError: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_webkitfullscreenerror.forTarget$1(receiver), "$isStream", [$.Event], "$asStream");
  },
  get$onPointerLockChange: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_webkitpointerlockchange.forTarget$1(receiver), "$isStream", [$.Event], "$asStream");
  },
  $isDocument: true,
  $asDocument: null
};

$$.DocumentFragment = {"": "Node;", $isDocumentFragment: true, $asDocumentFragment: null};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;", $isDomError: true, $asDomError: null};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.DomImplementation = {"": "Interceptor;", $isDomImplementation: true, $asDomImplementation: null};

$$.DomParser = {"": "Interceptor;"};

$$.DomSettableTokenList = {"": "DomTokenList;", $isDomSettableTokenList: true, $asDomSettableTokenList: null};

$$.DomStringList = {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.stringTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$.JSString]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSString]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.DomTokenList = {"": "Interceptor;length=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;$$dom_children:children=",
  get$children: function(receiver) {
    return $.interceptedTypeCheck(new $._ChildrenElementList(receiver, this.get$$$dom_children(receiver)), "$isList");
  },
  appendText$1: function(receiver, text) {
    this.insertAdjacentText$2(receiver, "beforeend", text);
  },
  get$localName: function(receiver) {
    return receiver.localName;
  },
  toString$0: function(receiver) {
    return this.get$localName(receiver);
  },
  insertAdjacentText$2: function(receiver, where, text) {
    if (!!receiver.insertAdjacentText)
      this._insertAdjacentText$2(receiver, where, text);
    else
      this._insertAdjacentNode$2(receiver, where, $.Text_Text(text));
  },
  _insertAdjacentText$2: function(receiver, where, text) {
    return receiver.insertAdjacentText(where, text);
  },
  _insertAdjacentNode$2: function(receiver, where, node) {
    var t1, first;
    switch ($.JSString_methods.toLowerCase$0(where)) {
      case "beforebegin":
        $.insertBefore$2$x(receiver.parentNode, node, receiver);
        break;
      case "afterbegin":
        t1 = this.get$nodes(receiver);
        t1 = t1.get$length(t1);
        if (t1 == null)
          throw t1.$gt();
        if (t1 > 0) {
          t1 = this.get$nodes(receiver);
          first = t1.$index(t1, 0);
        } else
          first = null;
        this.insertBefore$2(receiver, node, first);
        break;
      case "beforeend":
        this.append$1(receiver, node);
        break;
      case "afterend":
        $.insertBefore$2$x(receiver.parentNode, node, receiver.nextSibling);
        break;
      default:
        throw $.wrapException($.ArgumentError$("Invalid position " + where));
    }
  },
  get$model: function(receiver) {
    return $.get$model$x($.get$TemplateElement_mdvPackage().call$1(receiver));
  },
  get$onClick: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_click.forTarget$1(receiver), "$isStream", [$.MouseEvent], "$asStream");
  },
  get$onError: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_error.forTarget$1(receiver), "$isStream", [$.Event], "$asStream");
  },
  get$onLoad: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_load0.forTarget$1(receiver), "$isStream", [$.Event], "$asStream");
  },
  get$onMouseDown: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_mousedown.forTarget$1(receiver), "$isStream", [$.MouseEvent], "$asStream");
  },
  get$onMouseMove: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_mousemove.forTarget$1(receiver), "$isStream", [$.MouseEvent], "$asStream");
  },
  get$onMouseUp: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_mouseup.forTarget$1(receiver), "$isStream", [$.MouseEvent], "$asStream");
  },
  get$onMouseWheel: function(receiver) {
    return $.assertSubtype($._CustomEventStreamProvider__determineMouseWheelEventType.forTarget$1(receiver), "$isStream", [$.WheelEvent], "$asStream");
  },
  get$onTouchCancel: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_touchcancel.forTarget$1(receiver), "$isStream", [$.TouchEvent], "$asStream");
  },
  get$onTouchEnd: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_touchend.forTarget$1(receiver), "$isStream", [$.TouchEvent], "$asStream");
  },
  get$onTouchMove: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_touchmove.forTarget$1(receiver), "$isStream", [$.TouchEvent], "$asStream");
  },
  get$onTouchStart: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_touchstart.forTarget$1(receiver), "$isStream", [$.TouchEvent], "$asStream");
  },
  $isElement: true,
  $asElement: null,
  $asObject: null
};

$$.EmbedElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.Entry = {"": "Interceptor;",
  _remove$2: function(receiver, successCallback, errorCallback) {
    $.assertFunctionSubtype(successCallback, "void_");
    $.assertFunctionSubtype(errorCallback, "void__FileError");
    return receiver.remove($.convertDartClosureToJS(successCallback, 0), $.convertDartClosureToJS(errorCallback, 1));
  },
  remove$0: function(receiver) {
    var completer = $.Completer_Completer(null);
    this._remove$2(receiver, new $.Entry_remove_closure(completer), new $.Entry_remove_closure0(completer));
    return completer.future;
  },
  $isEntry: true,
  $asEntry: null
};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;", $isEvent: true, $asEvent: null};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventSource = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.EventTarget = {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isEventTarget: true,
  $asEventTarget: null
};

$$.FieldSetElement = {"": "_HTMLElement;"};

$$.File = {"": "Blob;", $isFile: true, $asFile: null};

$$.FileEntry = {"": "Entry;"};

$$.FileError = {"": "Interceptor;", $isFileError: true, $asFileError: null};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FileList = {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isFile");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$.File]; },
  $isIterable: true,
  $asIterable: function () { return [$.File]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.FileReader = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.FileSystem = {"": "Interceptor;", $isFileSystem: true, $asFileSystem: null};

$$.FileWriter = {"": "EventTarget;length=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FontLoader = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isFontLoader: true,
  $asFontLoader: null
};

$$.FormData = {"": "Interceptor;"};

$$.FormElement = {"": "_HTMLElement;length=", $isFormElement: true, $asFormElement: null};

$$.Gamepad = {"": "Interceptor;", $isGamepad: true, $asGamepad: null};

$$.Geolocation = {"": "Interceptor;", $isGeolocation: true, $asGeolocation: null};

$$.Geoposition = {"": "Interceptor;"};

$$.HRElement = {"": "_HTMLElement;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "_HTMLElement;", $isHeadElement: true, $asHeadElement: null};

$$.HeadingElement = {"": "_HTMLElement;"};

$$.History = {"": "Interceptor;length=", $isHistory: true, $asHistory: null, $asObject: null};

$$.HtmlAllCollection = {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return this.item$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlCollection = {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isHtmlCollection: true,
  $asHtmlCollection: null,
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;", $isHtmlDocument: true, $asHtmlDocument: null};

$$.HtmlElement = {"": "_HTMLElement;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequest = {"": "EventTarget;responseText=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  open$2: function($receiver, method, url) {
    return $receiver.open(method, url);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  setRequestHeader$2: function(receiver, header, value) {
    return receiver.setRequestHeader($.stringTypeCheck(header), $.stringTypeCheck(value));
  },
  get$onError: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_error0.forTarget$1(receiver), "$isStream", [$.ProgressEvent], "$asStream");
  },
  get$onLoad: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_load.forTarget$1(receiver), "$isStream", [$.ProgressEvent], "$asStream");
  },
  $isHttpRequest: true,
  $asHttpRequest: null
};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.HttpRequestUpload = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isHttpRequestUpload: true,
  $asHttpRequestUpload: null
};

$$.IFrameElement = {"": "_HTMLElement;"};

$$.ImageData = {"": "Interceptor;"};

$$.ImageElement = {"": "_HTMLElement;", $isImageElement: true, $asImageElement: null, $asObject: null};

$$.InputElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  $isInputElement: true,
  $asInputElement: null,
  $isElement: true,
  $asElement: null,
  $asObject: null,
  $isNode: true,
  $asNode: null,
  $isEventTarget: true,
  $asEventTarget: null
};

$$.InputMethodContext = {"": "Interceptor;"};

$$.KeyboardEvent = {"": "UIEvent;", $isKeyboardEvent: true, $asKeyboardEvent: null};

$$.KeygenElement = {"": "_HTMLElement;"};

$$.LIElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.LabelElement = {"": "_HTMLElement;", $isLabelElement: true, $asLabelElement: null};

$$.LegendElement = {"": "_HTMLElement;"};

$$.LinkElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.Location = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $asObject: null
};

$$.MapElement = {"": "_HTMLElement;"};

$$.MediaController = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isMediaController: true,
  $asMediaController: null
};

$$.MediaElement = {"": "_HTMLElement;", $isMediaElement: true, $asMediaElement: null};

$$.MediaError = {"": "Interceptor;", $isMediaError: true, $asMediaError: null};

$$.MediaKeyError = {"": "Interceptor;", $isMediaKeyError: true, $asMediaKeyError: null};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaKeyMessageEvent = {"": "Event;"};

$$.MediaKeyNeededEvent = {"": "Event;"};

$$.MediaKeySession = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.MediaKeys = {"": "Interceptor;", $isMediaKeys: true, $asMediaKeys: null};

$$.MediaList = {"": "Interceptor;length=", $isMediaList: true, $asMediaList: null};

$$.MediaQueryList = {"": "Interceptor;"};

$$.MediaSource = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.MediaStream = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isMediaStream: true,
  $asMediaStream: null
};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrack = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isMediaStreamTrack: true,
  $asMediaStreamTrack: null
};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MemoryInfo = {"": "Interceptor;", $isMemoryInfo: true, $asMemoryInfo: null};

$$.MenuElement = {"": "_HTMLElement;"};

$$.MessageChannel = {"": "Interceptor;"};

$$.MessageEvent = {"": "Event;",
  get$data: function(receiver) {
    return $.convertNativeToDart_SerializedScriptValue(receiver.data);
  },
  $isMessageEvent: true,
  $asMessageEvent: null
};

$$.MessagePort = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isMessagePort: true,
  $asMessagePort: null
};

$$.MetaElement = {"": "_HTMLElement;"};

$$.Metadata = {"": "Interceptor;"};

$$.MeterElement = {"": "_HTMLElement;"};

$$.MidiAccess = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.MidiConnectionEvent = {"": "Event;"};

$$.MidiInput = {"": "MidiPort;", $isEventTarget: true, $asEventTarget: null, $asObject: null};

$$.MidiMessageEvent = {"": "Event;"};

$$.MidiOutput = {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send($.interceptedTypeCheck(data, "$isUint8List"), $.numTypeCheck(timestamp));
  }
};

$$.MidiPort = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isMidiPort: true,
  $asMidiPort: null
};

$$.MimeType = {"": "Interceptor;", $isMimeType: true, $asMimeType: null};

$$.MimeTypeArray = {"": "Interceptor_ListMixin_ImmutableListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isMimeType");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isMimeTypeArray: true,
  $asMimeTypeArray: null,
  $isList: true,
  $asList: function () { return [$.MimeType]; },
  $isIterable: true,
  $asIterable: function () { return [$.MimeType]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.ModElement = {"": "_HTMLElement;"};

$$.MouseEvent = {"": "UIEvent;", $isMouseEvent: true, $asMouseEvent: null};

$$.MutationEvent = {"": "Event;"};

$$.MutationObserver = {"": "Interceptor;"};

$$.MutationRecord = {"": "Interceptor;"};

$$.NamedFlow = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.NamedFlowCollection = {"": "Interceptor;length="};

$$.Navigator = {"": "Interceptor;", $isNavigator: true, $asNavigator: null};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;",
  get$nodes: function(receiver) {
    return $.interceptedTypeCheck($._ChildNodeListLazy$(receiver), "$isList");
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      $.$$dom_removeChild$1$x(t1, receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? $.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  insertBefore$2: function(receiver, newChild, refChild) {
    return receiver.insertBefore(newChild, refChild);
  },
  $$dom_removeChild$1: function(receiver, oldChild) {
    return receiver.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  $isNode: true,
  $asNode: null
};

$$.NodeFilter = {"": "Interceptor;", $isNodeFilter: true, $asNodeFilter: null};

$$.NodeIterator = {"": "Interceptor;"};

$$.NodeList = {"": "Interceptor_ListMixin_ImmutableListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.Notification = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.NotificationCenter = {"": "Interceptor;", $isNotificationCenter: true, $asNotificationCenter: null};

$$.OListElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.ObjectElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.OptGroupElement = {"": "_HTMLElement;"};

$$.OptionElement = {"": "_HTMLElement;"};

$$.OutputElement = {"": "_HTMLElement;"};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "_HTMLElement;", $isParagraphElement: true, $asParagraphElement: null};

$$.ParamElement = {"": "_HTMLElement;"};

$$.Path = {"": "Interceptor;", $isPath: true, $asPath: null};

$$.Performance = {"": "EventTarget;", $isPerformance: true, $asPerformance: null};

$$.PerformanceEntry = {"": "Interceptor;"};

$$.PerformanceMark = {"": "PerformanceEntry;"};

$$.PerformanceMeasure = {"": "PerformanceEntry;"};

$$.PerformanceNavigation = {"": "Interceptor;", $isPerformanceNavigation: true, $asPerformanceNavigation: null};

$$.PerformanceResourceTiming = {"": "PerformanceEntry;"};

$$.PerformanceTiming = {"": "Interceptor;", $isPerformanceTiming: true, $asPerformanceTiming: null};

$$.Plugin = {"": "Interceptor;length=", $isPlugin: true, $asPlugin: null};

$$.PluginArray = {"": "Interceptor_ListMixin_ImmutableListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isPlugin");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isPluginArray: true,
  $asPluginArray: null,
  $isList: true,
  $asList: function () { return [$.Plugin]; },
  $isIterable: true,
  $asIterable: function () { return [$.Plugin]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "_HTMLElement;"};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "_HTMLElement;"};

$$.ProgressEvent = {"": "Event;", $isProgressEvent: true, $asProgressEvent: null};

$$.QuoteElement = {"": "_HTMLElement;"};

$$.Range = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isRange: true,
  $asRange: null
};

$$.ResourceProgressEvent = {"": "ProgressEvent;"};

$$.RtcDataChannel = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isRtcDataChannel: true,
  $asRtcDataChannel: null
};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfSender = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidate = {"": "Interceptor;", $isRtcIceCandidate: true, $asRtcIceCandidate: null};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.RtcPeerConnection = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.RtcSessionDescription = {"": "Interceptor;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  $isRtcSessionDescription: true,
  $asRtcSessionDescription: null
};

$$.RtcStatsReport = {"": "Interceptor;", $isRtcStatsReport: true, $asRtcStatsReport: null};

$$.RtcStatsResponse = {"": "Interceptor;"};

$$.Screen = {"": "Interceptor;", $isScreen: true, $asScreen: null};

$$.ScriptElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.SecurityPolicy = {"": "Interceptor;", $isSecurityPolicy: true, $asSecurityPolicy: null};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "_HTMLElement;length="};

$$.Selection = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.ShadowElement = {"": "_HTMLElement;"};

$$.ShadowRoot = {"": "DocumentFragment;", $isShadowRoot: true, $asShadowRoot: null};

$$.SourceBuffer = {"": "Interceptor;", $isSourceBuffer: true, $asSourceBuffer: null};

$$.SourceBufferList = {"": "EventTarget_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isSourceBuffer");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isSourceBufferList: true,
  $asSourceBufferList: null,
  $isList: true,
  $asList: function () { return [$.SourceBuffer]; },
  $isIterable: true,
  $asIterable: function () { return [$.SourceBuffer]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SourceElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.SpanElement = {"": "_HTMLElement;", $isSpanElement: true, $asSpanElement: null};

$$.SpeechGrammar = {"": "Interceptor;", $isSpeechGrammar: true, $asSpeechGrammar: null};

$$.SpeechGrammarList = {"": "Interceptor_ListMixin_ImmutableListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isSpeechGrammar");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isSpeechGrammarList: true,
  $asSpeechGrammarList: null,
  $isList: true,
  $asList: function () { return [$.SpeechGrammar]; },
  $isIterable: true,
  $asIterable: function () { return [$.SpeechGrammar]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechInputResult = {"": "Interceptor;", $isSpeechInputResult: true, $asSpeechInputResult: null};

$$.SpeechRecognition = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.SpeechRecognitionAlternative = {"": "Interceptor;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.SpeechRecognitionResult = {"": "Interceptor;length=", $isSpeechRecognitionResult: true, $asSpeechRecognitionResult: null};

$$.SpeechSynthesis = {"": "Interceptor;", $isSpeechSynthesis: true, $asSpeechSynthesis: null};

$$.SpeechSynthesisEvent = {"": "Event;"};

$$.SpeechSynthesisUtterance = {"": "EventTarget;"};

$$.SpeechSynthesisVoice = {"": "Interceptor;", $isSpeechSynthesisVoice: true, $asSpeechSynthesisVoice: null};

$$.Storage = {"": "Interceptor;",
  $index: function(receiver, key) {
    return this.$$dom_getItem$1(receiver, $.stringTypeCheck(key));
  },
  $indexSet: function(receiver, key, value) {
    this.$$dom_setItem$2(receiver, $.stringTypeCheck(key), $.stringTypeCheck(value));
  },
  forEach$1: function(receiver, f) {
    var i, key;
    $.assertFunctionSubtype(f, "void__String_String");
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(receiver, i);
      if (key == null)
        return;
      f.call$2(key, this.$$dom_getItem$1(receiver, key));
    }
  },
  get$keys: function(receiver) {
    var keys = [];
    this.forEach$1(receiver, new $.Storage_keys_closure(keys));
    return $.listSuperNativeTypeCheck(keys, "$isIterable");
  },
  get$values: function(receiver) {
    var values = [];
    this.forEach$1(receiver, new $.Storage_values_closure(values));
    return $.listSuperNativeTypeCheck(values, "$isIterable");
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $$dom_getItem$1: function(receiver, key) {
    return receiver.getItem(key);
  },
  $$dom_key$1: function(receiver, index) {
    return receiver.key(index);
  },
  $$dom_setItem$2: function(receiver, key, data) {
    return receiver.setItem(key, data);
  },
  $isStorage: true,
  $asStorage: null,
  $isMap: true,
  $asMap: function () { return [$.JSString, $.JSString]; },
  $asObject: null
};

$$.StorageEvent = {"": "Event;"};

$$.StorageInfo = {"": "Interceptor;", $isStorageInfo: true, $asStorageInfo: null};

$$.StorageQuota = {"": "Interceptor;", $isStorageQuota: true, $asStorageQuota: null};

$$.StyleElement = {"": "_HTMLElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.StyleMedia = {"": "Interceptor;", $isStyleMedia: true, $asStyleMedia: null};

$$.StyleSheet = {"": "Interceptor;", $isStyleSheet: true, $asStyleSheet: null};

$$.TableCaptionElement = {"": "_HTMLElement;", $isTableCaptionElement: true, $asTableCaptionElement: null};

$$.TableCellElement = {"": "_HTMLElement;"};

$$.TableColElement = {"": "_HTMLElement;"};

$$.TableElement = {"": "_HTMLElement;"};

$$.TableRowElement = {"": "_HTMLElement;"};

$$.TableSectionElement = {"": "_HTMLElement;", $isTableSectionElement: true, $asTableSectionElement: null};

$$.TemplateElement = {"": "_HTMLElement;"};

$$.Text = {"": "CharacterData;", $isText: true, $asText: null};

$$.TextAreaElement = {"": "_HTMLElement;"};

$$.TextEvent = {"": "UIEvent;"};

$$.TextMetrics = {"": "Interceptor;"};

$$.TextTrack = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isTextTrack: true,
  $asTextTrack: null
};

$$.TextTrackCue = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isTextTrackCue: true,
  $asTextTrackCue: null
};

$$.TextTrackCueList = {"": "Interceptor_ListMixin_ImmutableListMixin7;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isTextTrackCue");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isTextTrackCueList: true,
  $asTextTrackCueList: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  $asObject: null,
  $isList: true,
  $asList: function () { return [$.TextTrackCue]; },
  $isIterable: true,
  $asIterable: function () { return [$.TextTrackCue]; }
};

$$.TextTrackList = {"": "EventTarget_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isTextTrack");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isTextTrackList: true,
  $asTextTrackList: null,
  $isList: true,
  $asList: function () { return [$.TextTrack]; },
  $isIterable: true,
  $asIterable: function () { return [$.TextTrack]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TimeRanges = {"": "Interceptor;length=", $isTimeRanges: true, $asTimeRanges: null};

$$.TitleElement = {"": "_HTMLElement;"};

$$.Touch = {"": "Interceptor;identifier=",
  get$page: function(receiver) {
    return $.Point$(receiver.pageX, receiver.pageY);
  },
  $isTouch: true,
  $asTouch: null
};

$$.TouchEvent = {"": "UIEvent;", $isTouchEvent: true, $asTouchEvent: null};

$$.TouchList = {"": "Interceptor_ListMixin_ImmutableListMixin8;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isTouch");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isTouchList: true,
  $asTouchList: null,
  $isList: true,
  $asList: function () { return [$.Touch]; },
  $isIterable: true,
  $asIterable: function () { return [$.Touch]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TrackElement = {"": "_HTMLElement;"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.TreeWalker = {"": "Interceptor;"};

$$.UIEvent = {"": "Event;"};

$$.UListElement = {"": "_HTMLElement;"};

$$.UnknownElement = {"": "_HTMLElement;"};

$$.Url = {"": "Interceptor;"};

$$.ValidityState = {"": "Interceptor;", $isValidityState: true, $asValidityState: null};

$$.VideoElement = {"": "MediaElement;", $asObject: null};

$$.WebSocket = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  get$onClose: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_close.forTarget$1(receiver), "$isStream", [$.CloseEvent], "$asStream");
  },
  get$onError: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_error.forTarget$1(receiver), "$isStream", [$.Event], "$asStream");
  },
  get$onMessage: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_message.forTarget$1(receiver), "$isStream", [$.MessageEvent], "$asStream");
  },
  get$onOpen: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_open.forTarget$1(receiver), "$isStream", [$.Event], "$asStream");
  },
  $isWebSocket: true,
  $asWebSocket: null
};

$$.WheelEvent = {"": "MouseEvent;",
  get$deltaY: function(receiver) {
    var detail;
    if (receiver.deltaY !== undefined)
      return receiver.deltaY;
    else if (receiver.wheelDelta !== undefined)
      return -receiver.wheelDelta;
    else if (receiver.detail !== undefined) {
      if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
        detail = receiver.detail;
        if (Math.abs(detail) < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw $.wrapException(new $.UnsupportedError("deltaY is not supported"));
  },
  get$deltaX: function(receiver) {
    var detail;
    if (receiver.deltaX !== undefined)
      return receiver.deltaX;
    else if (receiver.wheelDeltaX !== undefined)
      return -receiver.wheelDeltaX;
    else if (receiver.detail !== undefined) {
      if (receiver.axis !== undefined && receiver.axis == MouseScrollEvent.HORIZONTAL_AXIS) {
        detail = receiver.detail;
        if (detail < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw $.wrapException(new $.UnsupportedError("deltaX is not supported"));
  },
  $isWheelEvent: true,
  $asWheelEvent: null
};

$$.Window = {"": "EventTarget;",
  requestAnimationFrame$1: function(receiver, callback) {
    $.assertFunctionSubtype(callback, "void__num");
    this._ensureRequestAnimationFrame$0(receiver);
    return this._liblib$_requestAnimationFrame$1(receiver, callback);
  },
  cancelAnimationFrame$1: function(receiver, id) {
    this._ensureRequestAnimationFrame$0(receiver);
    this._cancelAnimationFrame$1(receiver, id);
  },
  _liblib$_requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS($.assertFunctionSubtype(callback, "void__num"), 1));
  },
  _cancelAnimationFrame$1: function(receiver, id) {
    return receiver.cancelAnimationFrame(id);
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onKeyDown: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_keydown.forTarget$1(receiver), "$isStream", [$.KeyboardEvent], "$asStream");
  },
  get$onKeyUp: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_keyup.forTarget$1(receiver), "$isStream", [$.KeyboardEvent], "$asStream");
  },
  get$onResize: function(receiver) {
    return $.assertSubtype($.EventStreamProvider_resize.forTarget$1(receiver), "$isStream", [$.Event], "$asStream");
  },
  $isWindow: true,
  $asWindow: null,
  $asObject: null
};

$$.Worker = {"": "AbstractWorker;"};

$$.XPathEvaluator = {"": "Interceptor;"};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.XPathExpression = {"": "Interceptor;"};

$$.XPathNSResolver = {"": "Interceptor;"};

$$.XPathResult = {"": "Interceptor;"};

$$.XmlSerializer = {"": "Interceptor;"};

$$.XsltProcessor = {"": "Interceptor;"};

$$._Attr = {"": "Node;"};

$$._CSSValue = {"": "Interceptor;", $is_CSSValue: true, $as_CSSValue: null};

$$._ClientRect = {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    return $.JenkinsSmiHash_hash4($.get$hashCode$(receiver.left), $.get$hashCode$(receiver.top), $.get$hashCode$(receiver.width), $.get$hashCode$(receiver.height));
  },
  $isRect: true,
  $asRect: null,
  $asObject: null
};

$$._ClientRectList = {"": "Interceptor_ListMixin_ImmutableListMixin9;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isRect");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$.Rect]; },
  $isIterable: true,
  $asIterable: function () { return [$.Rect]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._CssRuleList = {"": "Interceptor_ListMixin_ImmutableListMixin10;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isCssRule");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$.CssRule]; },
  $isIterable: true,
  $asIterable: function () { return [$.CssRule]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._CssValueList = {"": "_CSSValue_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$is_CSSValue");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$._CSSValue]; },
  $isIterable: true,
  $asIterable: function () { return [$._CSSValue]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._DomPoint = {"": "Interceptor;"};

$$._Entity = {"": "Node;"};

$$._EntryArray = {"": "Interceptor_ListMixin_ImmutableListMixin11;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isEntry");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$.Entry]; },
  $isIterable: true,
  $asIterable: function () { return [$.Entry]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._EntryArraySync = {"": "Interceptor_ListMixin_ImmutableListMixin12;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$is_EntrySync");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$._EntrySync]; },
  $isIterable: true,
  $asIterable: function () { return [$._EntrySync]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._EntrySync = {"": "Interceptor;", $is_EntrySync: true, $as_EntrySync: null};

$$._GamepadList = {"": "Interceptor_ListMixin_ImmutableListMixin13;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isGamepad");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$.Gamepad]; },
  $isIterable: true,
  $asIterable: function () { return [$.Gamepad]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._NamedNodeMap = {"": "Interceptor_ListMixin_ImmutableListMixin14;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $is_NamedNodeMap: true,
  $as_NamedNodeMap: null,
  $isList: true,
  $asList: function () { return [$.Node]; },
  $isIterable: true,
  $asIterable: function () { return [$.Node]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._SpeechInputResultList = {"": "Interceptor_ListMixin_ImmutableListMixin15;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isSpeechInputResult");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$.SpeechInputResult]; },
  $isIterable: true,
  $asIterable: function () { return [$.SpeechInputResult]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._SpeechRecognitionResultList = {"": "Interceptor_ListMixin_ImmutableListMixin16;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isSpeechRecognitionResult");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$.SpeechRecognitionResult]; },
  $isIterable: true,
  $asIterable: function () { return [$.SpeechRecognitionResult]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._StyleSheetList = {"": "Interceptor_ListMixin_ImmutableListMixin17;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isStyleSheet");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $isList: true,
  $asList: function () { return [$.StyleSheet]; },
  $isIterable: true,
  $asIterable: function () { return [$.StyleSheet]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Cursor = {"": "Interceptor;"};

$$.CursorWithValue = {"": "Cursor;"};

$$.Database = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isDatabase: true,
  $asDatabase: null
};

$$.IdbFactory = {"": "Interceptor;"};

$$.Index = {"": "Interceptor;"};

$$.KeyRange = {"": "Interceptor;"};

$$.ObjectStore = {"": "Interceptor;", $isObjectStore: true, $asObjectStore: null};

$$.OpenDBRequest = {"": "Request;", $isEventTarget: true, $asEventTarget: null, $asObject: null};

$$.Request = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.Transaction = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $isTransaction: true,
  $asTransaction: null
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;", $asObject: null};

$$.AltGlyphElement = {"": "TextPositioningElement;", $asObject: null};

$$.Angle = {"": "Interceptor;", $isAngle: true, $asAngle: null};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedAngle = {"": "Interceptor;", $isAnimatedAngle: true, $asAnimatedAngle: null};

$$.AnimatedBoolean = {"": "Interceptor;", $isAnimatedBoolean: true, $asAnimatedBoolean: null};

$$.AnimatedEnumeration = {"": "Interceptor;", $isAnimatedEnumeration: true, $asAnimatedEnumeration: null};

$$.AnimatedInteger = {"": "Interceptor;", $isAnimatedInteger: true, $asAnimatedInteger: null};

$$.AnimatedLength = {"": "Interceptor;", $isAnimatedLength: true, $asAnimatedLength: null};

$$.AnimatedLengthList = {"": "Interceptor;", $isAnimatedLengthList: true, $asAnimatedLengthList: null};

$$.AnimatedNumber = {"": "Interceptor;", $isAnimatedNumber: true, $asAnimatedNumber: null};

$$.AnimatedNumberList = {"": "Interceptor;", $isAnimatedNumberList: true, $asAnimatedNumberList: null};

$$.AnimatedPreserveAspectRatio = {"": "Interceptor;", $isAnimatedPreserveAspectRatio: true, $asAnimatedPreserveAspectRatio: null};

$$.AnimatedRect = {"": "Interceptor;", $isAnimatedRect: true, $asAnimatedRect: null};

$$.AnimatedString = {"": "Interceptor;", $isAnimatedString: true, $asAnimatedString: null};

$$.AnimatedTransformList = {"": "Interceptor;", $isAnimatedTransformList: true, $asAnimatedTransformList: null};

$$.AnimationElement = {"": "SvgElement;", $asObject: null};

$$.CircleElement = {"": "StyledElement;", $asObject: null};

$$.ClipPathElement = {"": "StyledElement;", $asObject: null};

$$.DefsElement = {"": "StyledElement;", $asObject: null};

$$.DescElement = {"": "StyledElement;", $asObject: null};

$$.ElementInstance = {"": "EventTarget;", $isElementInstance: true, $asElementInstance: null};

$$.EllipseElement = {"": "StyledElement;", $asObject: null};

$$.FEBlendElement = {"": "StyledElement;", $asObject: null};

$$.FEColorMatrixElement = {"": "StyledElement;", $asObject: null};

$$.FEComponentTransferElement = {"": "StyledElement;", $asObject: null};

$$.FECompositeElement = {"": "StyledElement;", $asObject: null};

$$.FEConvolveMatrixElement = {"": "StyledElement;", $asObject: null};

$$.FEDiffuseLightingElement = {"": "StyledElement;", $asObject: null};

$$.FEDisplacementMapElement = {"": "StyledElement;", $asObject: null};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;", $asObject: null};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;", $asObject: null};

$$.FEImageElement = {"": "StyledElement;", $asObject: null};

$$.FEMergeElement = {"": "StyledElement;", $asObject: null};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;", $asObject: null};

$$.FEOffsetElement = {"": "StyledElement;", $asObject: null};

$$.FEPointLightElement = {"": "SvgElement;"};

$$.FESpecularLightingElement = {"": "StyledElement;", $asObject: null};

$$.FESpotLightElement = {"": "SvgElement;"};

$$.FETileElement = {"": "StyledElement;", $asObject: null};

$$.FETurbulenceElement = {"": "StyledElement;", $asObject: null};

$$.FilterElement = {"": "StyledElement;", $asObject: null};

$$.ForeignObjectElement = {"": "StyledElement;", $asObject: null};

$$.GElement = {"": "StyledElement;", $asObject: null};

$$.ImageElement0 = {"": "StyledElement;", $asObject: null};

$$.Length = {"": "Interceptor;", $isLength: true, $asLength: null};

$$.LengthList = {"": "Interceptor_ListMixin_ImmutableListMixin18;",
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return this.getItem$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isLength");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isLengthList: true,
  $asLengthList: null,
  $isList: true,
  $asList: function () { return [$.Length]; },
  $isIterable: true,
  $asIterable: function () { return [$.Length]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.LineElement = {"": "StyledElement;", $asObject: null};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;", $asObject: null};

$$.MaskElement = {"": "StyledElement;", $asObject: null};

$$.Matrix = {"": "Interceptor;", $isMatrix: true, $asMatrix: null};

$$.MetadataElement = {"": "SvgElement;"};

$$.Number = {"": "Interceptor;", $isNumber: true, $asNumber: null};

$$.NumberList = {"": "Interceptor_ListMixin_ImmutableListMixin19;",
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return this.getItem$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNumber");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isNumberList: true,
  $asNumberList: null,
  $isList: true,
  $asList: function () { return [$.Number]; },
  $isIterable: true,
  $asIterable: function () { return [$.Number]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PathElement = {"": "StyledElement;", $asObject: null};

$$.PathSeg = {"": "Interceptor;", $isPathSeg: true, $asPathSeg: null};

$$.PathSegArcAbs = {"": "PathSeg;"};

$$.PathSegArcRel = {"": "PathSeg;"};

$$.PathSegClosePath = {"": "PathSeg;"};

$$.PathSegCurvetoCubicAbs = {"": "PathSeg;"};

$$.PathSegCurvetoCubicRel = {"": "PathSeg;"};

$$.PathSegCurvetoCubicSmoothAbs = {"": "PathSeg;"};

$$.PathSegCurvetoCubicSmoothRel = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticAbs = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticRel = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticSmoothAbs = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticSmoothRel = {"": "PathSeg;"};

$$.PathSegLinetoAbs = {"": "PathSeg;"};

$$.PathSegLinetoHorizontalAbs = {"": "PathSeg;"};

$$.PathSegLinetoHorizontalRel = {"": "PathSeg;"};

$$.PathSegLinetoRel = {"": "PathSeg;"};

$$.PathSegLinetoVerticalAbs = {"": "PathSeg;"};

$$.PathSegLinetoVerticalRel = {"": "PathSeg;"};

$$.PathSegList = {"": "Interceptor_ListMixin_ImmutableListMixin20;",
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return this.getItem$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isPathSeg");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isPathSegList: true,
  $asPathSegList: null,
  $isList: true,
  $asList: function () { return [$.PathSeg]; },
  $isIterable: true,
  $asIterable: function () { return [$.PathSeg]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PathSegMovetoAbs = {"": "PathSeg;"};

$$.PathSegMovetoRel = {"": "PathSeg;"};

$$.PatternElement = {"": "StyledElement;", $asObject: null};

$$.Point0 = {"": "Interceptor;", $isPoint0: true, $asPoint0: null};

$$.PointList = {"": "Interceptor;", $isPointList: true, $asPointList: null};

$$.PolygonElement = {"": "StyledElement;", $asObject: null};

$$.PolylineElement = {"": "StyledElement;", $asObject: null};

$$.PreserveAspectRatio = {"": "Interceptor;", $isPreserveAspectRatio: true, $asPreserveAspectRatio: null};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.Rect0 = {"": "Interceptor;", $isRect0: true, $asRect0: null};

$$.RectElement = {"": "StyledElement;", $asObject: null};

$$.RenderingIntent = {"": "Interceptor;"};

$$.ScriptElement0 = {"": "SvgElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  $asObject: null
};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StringList = {"": "Interceptor_ListMixin_ImmutableListMixin21;",
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return this.getItem$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.stringTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isStringList: true,
  $asStringList: null,
  $isList: true,
  $asList: function () { return [$.JSString]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSString]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.StyleElement0 = {"": "SvgElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  $asObject: null
};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  insertAdjacentText$2: function(receiver, where, text) {
    throw $.wrapException($.UnsupportedError$("Cannot invoke insertAdjacentText on SVG."));
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  $isSvgElement: true,
  $asSvgElement: null
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;", $isSvgSvgElement: true, $asSvgSvgElement: null, $asObject: null};

$$.SwitchElement = {"": "StyledElement;", $asObject: null};

$$.SymbolElement = {"": "StyledElement;", $asObject: null};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;", $asObject: null};

$$.TextElement = {"": "TextPositioningElement;", $asObject: null};

$$.TextPathElement = {"": "TextContentElement;", $asObject: null};

$$.TextPositioningElement = {"": "TextContentElement;"};

$$.TitleElement0 = {"": "StyledElement;", $asObject: null};

$$.Transform = {"": "Interceptor;", $isTransform: true, $asTransform: null};

$$.TransformList = {"": "Interceptor_ListMixin_ImmutableListMixin22;",
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return this.getItem$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isTransform");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isTransformList: true,
  $asTransformList: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  $asObject: null,
  $isList: true,
  $asList: function () { return [$.Transform]; },
  $isIterable: true,
  $asIterable: function () { return [$.Transform]; }
};

$$.UnitTypes = {"": "Interceptor;"};

$$.UseElement = {"": "StyledElement;", $isUseElement: true, $asUseElement: null, $asObject: null};

$$.ViewElement = {"": "SvgElement;", $asObject: null};

$$.ViewSpec = {"": "Interceptor;", $isViewSpec: true, $asViewSpec: null};

$$.ZoomEvent = {"": "UIEvent;"};

$$._ElementInstanceList = {"": "Interceptor_ListMixin_ImmutableListMixin23;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return this.item$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isElementInstance");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function () { return [$.ElementInstance]; },
  $isIterable: true,
  $asIterable: function () { return [$.ElementInstance]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._GradientElement = {"": "StyledElement;", $asObject: null};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.AnalyserNode = {"": "AudioNode;"};

$$.AudioBuffer = {"": "Interceptor;length=", $isAudioBuffer: true, $asAudioBuffer: null};

$$.AudioBufferSourceNode = {"": "AudioSourceNode;"};

$$.AudioContext = {"": "EventTarget;", $isAudioContext: true, $asAudioContext: null};

$$.AudioDestinationNode = {"": "AudioNode;", $isAudioDestinationNode: true, $asAudioDestinationNode: null};

$$.AudioListener = {"": "Interceptor;", $isAudioListener: true, $asAudioListener: null};

$$.AudioNode = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS($.assertFunctionSubtype(listener, "dynamic__Event"), 1), useCapture);
  }
};

$$.AudioParam = {"": "Interceptor;", $isAudioParam: true, $asAudioParam: null};

$$.AudioProcessingEvent = {"": "Event;"};

$$.AudioSourceNode = {"": "AudioNode;"};

$$.BiquadFilterNode = {"": "AudioNode;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.ChannelMergerNode = {"": "AudioNode;"};

$$.ChannelSplitterNode = {"": "AudioNode;"};

$$.ConvolverNode = {"": "AudioNode;"};

$$.DelayNode = {"": "AudioNode;"};

$$.DynamicsCompressorNode = {"": "AudioNode;"};

$$.GainNode = {"": "AudioNode;"};

$$.MediaElementAudioSourceNode = {"": "AudioSourceNode;"};

$$.MediaStreamAudioDestinationNode = {"": "AudioSourceNode;"};

$$.MediaStreamAudioSourceNode = {"": "AudioSourceNode;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.OfflineAudioContext = {"": "AudioContext;", $isEventTarget: true, $asEventTarget: null, $asObject: null};

$$.OscillatorNode = {"": "AudioSourceNode;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.PannerNode = {"": "AudioNode;"};

$$.ScriptProcessorNode = {"": "AudioNode;"};

$$.WaveShaperNode = {"": "AudioNode;"};

$$.WaveTable = {"": "Interceptor;"};

$$.ActiveInfo = {"": "Interceptor;"};

$$.Buffer = {"": "Interceptor;", $isBuffer: true, $asBuffer: null};

$$.CompressedTextureAtc = {"": "Interceptor;"};

$$.CompressedTexturePvrtc = {"": "Interceptor;"};

$$.CompressedTextureS3TC = {"": "Interceptor;"};

$$.ContextAttributes = {"": "Interceptor;"};

$$.ContextEvent = {"": "Event;", $isContextEvent: true, $asContextEvent: null};

$$.DebugRendererInfo = {"": "Interceptor;"};

$$.DebugShaders = {"": "Interceptor;"};

$$.DepthTexture = {"": "Interceptor;"};

$$.ExtDrawBuffers = {"": "Interceptor;"};

$$.ExtFragDepth = {"": "Interceptor;"};

$$.ExtTextureFilterAnisotropic = {"": "Interceptor;"};

$$.Framebuffer = {"": "Interceptor;", $isFramebuffer: true, $asFramebuffer: null};

$$.LoseContext = {"": "Interceptor;", $isLoseContext: true, $asLoseContext: null};

$$.OesElementIndexUint = {"": "Interceptor;"};

$$.OesStandardDerivatives = {"": "Interceptor;"};

$$.OesTextureFloat = {"": "Interceptor;"};

$$.OesTextureFloatLinear = {"": "Interceptor;"};

$$.OesTextureHalfFloat = {"": "Interceptor;"};

$$.OesTextureHalfFloatLinear = {"": "Interceptor;"};

$$.OesVertexArrayObject = {"": "Interceptor;"};

$$.Program = {"": "Interceptor;", $isProgram: true, $asProgram: null};

$$.Renderbuffer = {"": "Interceptor;", $isRenderbuffer: true, $asRenderbuffer: null};

$$.RenderingContext = {"": "CanvasRenderingContext;",
  activeTexture$1: function(receiver, texture) {
    return receiver.activeTexture($.intTypeCheck(texture));
  },
  attachShader$2: function(receiver, program, shader) {
    return receiver.attachShader(program, shader);
  },
  bindBuffer$2: function(receiver, target, buffer) {
    return receiver.bindBuffer(target, buffer);
  },
  bindFramebuffer$2: function(receiver, target, framebuffer) {
    return receiver.bindFramebuffer(target, framebuffer);
  },
  bindRenderbuffer$2: function(receiver, target, renderbuffer) {
    return receiver.bindRenderbuffer(target, renderbuffer);
  },
  bindTexture$2: function(receiver, target, texture) {
    return receiver.bindTexture(target, texture);
  },
  bufferDataTyped$3: function(receiver, target, data, usage) {
    return receiver.bufferData(target, data, usage);
  },
  clear$1: function(receiver, mask) {
    return receiver.clear(mask);
  },
  clearColor$4: function(receiver, red, green, blue, alpha) {
    return receiver.clearColor(red, green, blue, alpha);
  },
  compileShader$1: function(receiver, shader) {
    return receiver.compileShader(shader);
  },
  createFramebuffer$0: function(receiver) {
    return receiver.createFramebuffer();
  },
  createRenderbuffer$0: function(receiver) {
    return receiver.createRenderbuffer();
  },
  createShader$1: function(receiver, type) {
    return receiver.createShader(type);
  },
  createTexture$0: function(receiver) {
    return receiver.createTexture();
  },
  cullFace$1: function(receiver, mode) {
    return receiver.cullFace(mode);
  },
  depthFunc$1: function(receiver, func) {
    return receiver.depthFunc(func);
  },
  depthRange$2: function(receiver, zNear, zFar) {
    return receiver.depthRange(zNear, zFar);
  },
  drawElements$4: function(receiver, mode, count, type, offset) {
    return receiver.drawElements(mode, count, type, $.intTypeCheck(offset));
  },
  enable$1: function(receiver, cap) {
    return receiver.enable(cap);
  },
  enableVertexAttribArray$1: function(receiver, index) {
    return receiver.enableVertexAttribArray(index);
  },
  framebufferRenderbuffer$4: function(receiver, target, attachment, renderbuffertarget, renderbuffer) {
    return receiver.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  },
  framebufferTexture2D$5: function(receiver, target, attachment, textarget, texture, level) {
    return receiver.framebufferTexture2D(target, attachment, textarget, texture, level);
  },
  frontFace$1: function(receiver, mode) {
    return receiver.frontFace(mode);
  },
  getAttribLocation$2: function(receiver, program, $name) {
    return receiver.getAttribLocation(program, $name);
  },
  getExtension$1: function(receiver, $name) {
    return receiver.getExtension($name);
  },
  getProgramInfoLog$1: function(receiver, program) {
    return receiver.getProgramInfoLog(program);
  },
  getProgramParameter$2: function(receiver, program, pname) {
    return receiver.getProgramParameter(program, pname);
  },
  getShaderInfoLog$1: function(receiver, shader) {
    return receiver.getShaderInfoLog(shader);
  },
  getShaderParameter$2: function(receiver, shader, pname) {
    return receiver.getShaderParameter(shader, pname);
  },
  getUniformLocation$2: function(receiver, program, $name) {
    return receiver.getUniformLocation(program, $name);
  },
  linkProgram$1: function(receiver, program) {
    return receiver.linkProgram(program);
  },
  pixelStorei$2: function(receiver, pname, param) {
    return receiver.pixelStorei(pname, param);
  },
  readPixels$7: function(receiver, x, y, width, height, format, type, pixels) {
    return receiver.readPixels(x, y, width, height, format, type, pixels);
  },
  renderbufferStorage$4: function(receiver, target, internalformat, width, height) {
    return receiver.renderbufferStorage(target, internalformat, width, height);
  },
  shaderSource$2: function(receiver, shader, string) {
    return receiver.shaderSource(shader, string);
  },
  texImage2DImage$6: function(receiver, target, level, internalformat, format, type, image) {
    return receiver.texImage2D(target, level, internalformat, format, type, image);
  },
  texParameteri$3: function(receiver, target, pname, param) {
    return receiver.texParameteri(target, pname, param);
  },
  uniform1i$2: function(receiver, $location, x) {
    return receiver.uniform1i($location, x);
  },
  uniform4fv$2: function(receiver, $location, v) {
    return receiver.uniform4fv($location, v);
  },
  uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
    return receiver.uniformMatrix4fv($location, transpose, array);
  },
  useProgram$1: function(receiver, program) {
    return receiver.useProgram(program);
  },
  vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
    return receiver.vertexAttribPointer(indx, size, type, normalized, stride, offset);
  },
  viewport$4: function(receiver, x, y, width, height) {
    return receiver.viewport(x, y, width, height);
  },
  texImage2DTyped$9: function(receiver, targetTexture, levelOfDetail, internalFormat, width, height, border, format, type, data) {
    return receiver.texImage2D(targetTexture, levelOfDetail, internalFormat, width, height, border, format, type, data);
  },
  $isRenderingContext: true,
  $asRenderingContext: null
};

$$.Shader = {"": "Interceptor;", $isShader: true, $asShader: null};

$$.ShaderPrecisionFormat = {"": "Interceptor;"};

$$.Texture = {"": "Interceptor;", $isTexture: true, $asTexture: null};

$$.UniformLocation = {"": "Interceptor;", $isUniformLocation: true, $asUniformLocation: null};

$$.VertexArrayObject = {"": "Interceptor;"};

$$.SqlDatabase = {"": "Interceptor;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

$$.SqlResultSet = {"": "Interceptor;"};

$$.SqlResultSetRowList = {"": "Interceptor_ListMixin_ImmutableListMixin24;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException(new $.RangeError("value " + $.S(index) + " not in range 0.." + t1));
    return $.convertNativeToDart_Dictionary(this._item_1$1(receiver, index));
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isMap");
    throw $.wrapException(new $.UnsupportedError("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  _item_1$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isSqlResultSetRowList: true,
  $asSqlResultSetRowList: null,
  $isList: true,
  $asList: function () { return [$.Map]; },
  $isIterable: true,
  $asIterable: function () { return [$.Map]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SqlTransaction = {"": "Interceptor;"};

$$.ByteBuffer = {"": "Interceptor;", $isByteBuffer: true, $asByteBuffer: null};

$$.TypedData = {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    if (index == null)
      throw index.$lt();
    if (index < 0 || index >= $length)
      throw $.wrapException($.RangeError$range(index, 0, $length));
    else
      throw $.wrapException($.ArgumentError$("Invalid list index " + index));
  },
  $isTypedData: true,
  $asTypedData: null
};

$$.ByteData = {"": "TypedData;"};

$$.Float32List = {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.numTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.numTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isFloat32List: true,
  $asFloat32List: null,
  $isList: true,
  $asList: function () { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSDouble]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Float64List = {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.numTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.numTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSDouble]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int16List = {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int32List = {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int8List = {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint16List = {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isUint16List: true,
  $asUint16List: null,
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint32List = {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8ClampedList = {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout1(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  }
};

$$.Uint8List = {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index == null)
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (!(index >>> 0 != index)) {
      if (index == null)
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isUint8List: true,
  $asUint8List: null,
  $isList: true,
  $asList: function () { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function () { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

// Bound closures
$$.Bound__setValue__FutureImpl = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return $.computeSignature(function (T) { return {func: "void__T0", void: true, args: [T]}; }, this._self, "_FutureImpl"); }
};

$$.Bound__setError__FutureImpl = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__Object", void: true, args: [$.Object]}; }
};

$$.Bound__run__ZoneTimer = {"": "BoundClosure;_self,_target,_receiver",
  call$0: function() {
    return this._self[this._target]();
  },
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
};

$$.Bound__onContainerMouseDown_Stats = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__MouseEvent", void: true, args: [$.MouseEvent]}; }
};

$$.Bound__requestAnimationFrame_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](this._receiver, p0);
  },
  $signature: function () { return {func: "void__num", void: true, args: [$.JSNumber]}; }
};

$$.Bound__fullscreenChange_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
};

$$.Bound__fullscreenError_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
};

$$.Bound__touchStartEvent_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__TouchEvent", void: true, args: [$.TouchEvent]}; }
};

$$.Bound__touchMoveEvent_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__TouchEvent", void: true, args: [$.TouchEvent]}; }
};

$$.Bound__touchEndEvent_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__TouchEvent", void: true, args: [$.TouchEvent]}; }
};

$$.Bound__keyDown_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__KeyboardEvent", void: true, args: [$.KeyboardEvent]}; }
};

$$.Bound__keyUp_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__KeyboardEvent", void: true, args: [$.KeyboardEvent]}; }
};

$$.Bound__mouseDown_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__MouseEvent", void: true, args: [$.MouseEvent]}; }
};

$$.Bound__mouseUp_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__MouseEvent", void: true, args: [$.MouseEvent]}; }
};

$$.Bound__mouseMove_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__MouseEvent", void: true, args: [$.MouseEvent]}; }
};

$$.Bound__mouseWheel_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__MouseEvent", void: true, args: [$.MouseEvent]}; }
};

$$.Bound__resize_GameLoopHtml = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
};

$$.Bound__onClick_PointerLock = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
};

$$.Bound__onPointerLockChange_PointerLock = {"": "BoundClosure;_self,_target,_receiver",
  call$1: function(p0) {
    return this._self[this._target](p0);
  },
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name", $is_void__K_V: true, $is_dynamic__int_dynamic: true, $is_void__GameLoop_GameLoopTouch: true, $is_void__int_String: true, $is_void__dynamic_SendPort: true, $is_dynamic__dynamic_dynamic: true, $is_void__K_V0: true, $is_void__RenderingContext_GameLoopHtml: true, $is_void__String_String: true};

$$.Closure$_throwFormatException = {"": "Closure;call$1,$name", $signature: function () { return {func: "dynamic__String", args: [$.JSString]}; }};

$$.Closure$wrapException = {"": "Closure;call$1,$name", $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name", $is_void_: true, $is_dynamic_: true, $is_Object_: true};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$isAssignable = {"": "Closure;call$2,$name", $is_void__K_V: true, $is_dynamic__int_dynamic: true, $is_bool__DigitalButtonEvent_bool: true, $is_void__GameLoop_GameLoopTouch: true, $is_void__int_String: true, $is_void__dynamic_SendPort: true, $is_dynamic__dynamic_dynamic: true, $is_void__K_V0: true, $is_void__RenderingContext_GameLoopHtml: true, $is_void__String_String: true};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name", $signature: function () { return {func: "String__dynamic", ret: $.JSString, args: [null]}; }};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name", $signature: function () { return {func: "String__dynamic", ret: $.JSString, args: [null]}; }};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name", $signature: function () { return {func: "String__dynamic", ret: $.JSString, args: [null]}; }};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name", $signature: function () { return {func: "String__dynamic", ret: $.JSString, args: [null]}; }};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name", $signature: function () { return {func: "String__dynamic", ret: $.JSString, args: [null]}; }};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name", $signature: function () { return {func: "String__dynamic", ret: $.JSString, args: [null]}; }};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name", $is_void_: true, $is_dynamic_: true, $is_Object_: true};

$$.Closure$_determineMouseWheelEventType = {"": "Closure;call$1,$name", $signature: function () { return {func: "String__EventTarget", ret: $.JSString, args: [$.EventTarget]}; }};

$$.Closure$decodeUtf8 = {"": "Closure;call$4,$name",
  call$1: function(bytes) {
    return this.call$4(bytes, 0, null, 65533);
  },
  call$2: function(bytes, offset) {
    return this.call$4(bytes, offset, null, 65533);
  },
  call$3: function(bytes, offset, length) {
    return this.call$4(bytes, offset, length, 65533);
  },
  $signature: function () { return {func: "String__List__int_int_int", ret: $.JSString, args: [[$.JSArray, $.JSInt]], opt: [$.JSInt, $.JSInt, $.JSInt]}; }
};

$$.Closure$initContext = {"": "Closure;call$2,$name", $signature: function () { return {func: "void__RenderingContext_GameLoopHtml", void: true, args: [$.RenderingContext, $.GameLoopHtml]}; }};

$$.Closure$main = {"": "Closure;call$0,$name", $is_void_: true, $is_dynamic_: true, $is_Object_: true};

(function (reflectionData) {
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = {};
  if (!init.mangledGlobalNames) init.mangledGlobalNames = {};
  init.getterPrefix = "get$";
  init.setterPrefix = "set$";
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var descriptor = data[3];
    var classes = [];
    var functions = [];
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property)) continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar == "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
      } else if (firstChar == "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (typeof element === "function") {
        $[previousProperty = property] = element;
        functions.push(property);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop)) continue;
          firstChar = prop.substring(0, 1);
          if (firstChar == "+") {
            mangledNames[previousProp] = prop.substring(1);
          } else if (firstChar == "@" && prop != "@") {
            newDesc[prop.substring(1)]["@"] =element[prop];
          } else {
            newDesc[previousProp = prop] = element[prop];
          }
        }
        $$[property] = newDesc;
        classes.push(property);
      }
    }
    libraries.push([name, uri, classes, functions, metadata]);
  }
})([
["_interceptors", "dart:_interceptors", , {
Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return $.Primitives_objectToString(receiver);
  }
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $asObject: null
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $asObject: null
},

JSUnknown: {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JSArray: {"": "List/Interceptor;",
  checkMutable$1: function(receiver, reason) {
    if (!!receiver.immutable$list)
      throw $.wrapException($.UnsupportedError$(reason));
  },
  add$1: function(receiver, value) {
    var $arguments = $.getRuntimeTypeArguments(receiver, "JSArray");
    $.assertSubtypeOfRuntimeType(value, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    var t1, $arguments;
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException(new $.RangeError("value -1"));
    t1 = receiver.pop();
    $arguments = $.getRuntimeTypeArguments(receiver, "JSArray");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  where$1: function(receiver, f) {
    return $.listSuperNativeTypeCheck($.IterableMixinWorkaround_where(receiver, $.assertFunctionSubtype(f, "bool__E0", "JSArray", receiver)), "$isIterable");
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.assertFunctionSubtype(f, "void__E", "JSArray", receiver)));
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.IterableMixinWorkaround_skipList(receiver, n), "$isIterable");
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    return $.IterableMixinWorkaround_firstWhere(receiver, $.assertFunctionSubtype(test, "bool__E0", "JSArray", receiver), $.assertFunctionSubtype(orElse, "Object_"));
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  elementAt$1: function(receiver, index) {
    return $.assertSubtypeOfRuntimeType(this.$index(receiver, index), $.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  sublist$2: function(receiver, start, end) {
    $.checkNull(start);
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end < start || end > receiver.length)
      throw $.wrapException($.RangeError$range(end, start, receiver.length));
    if (start === end)
      return $.interceptedTypeCheck([], "$isList");
    return $.interceptedTypeCheck(receiver.slice(start, end), "$isList");
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    this.checkMutable$1(receiver, "set range");
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  indexOf$2: function(receiver, element, start) {
    return $.IterableMixinWorkaround_indexOfList(receiver, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_iterableToString(receiver);
  },
  toList$1$growable: function(receiver, growable) {
    return $.interceptedTypeCheck($.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, "JSArray", 0)), "$isList");
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.assertSubtype($.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, "JSArray", 0)), "$isIterator", [$.getRuntimeTypeArgument(receiver, "JSArray", 0)], "$asIterator");
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    $.intTypeCheck(newLength);
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException(new $.ArgumentError(newLength));
    if (newLength < 0)
      throw $.wrapException(new $.RangeError("value " + newLength));
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    var t1, $arguments;
    $.intTypeCheck(index);
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    t1 = receiver[index];
    $arguments = $.getRuntimeTypeArguments(receiver, "JSArray");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  $indexSet: function(receiver, index, value) {
    var $arguments = $.getRuntimeTypeArguments(receiver, "JSArray");
    $.assertSubtypeOfRuntimeType(value, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    receiver[index] = value;
  },
  $isList: true,
  $asInterceptor: null,
  $asObject: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true, $asJSArray: function () { return [null]; }, $asObject: null, $asList: function () { return [null]; }, $asIterable: function () { return [null]; }},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.wrapException($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.wrapException($.UnsupportedError$("Infinity"));
    truncated = this.truncateToDouble$0(receiver);
    return $.intTypeCheck(truncated == -0.0 ? 0 : truncated);
  },
  truncate$0: function(receiver) {
    return this.toInt$0(receiver);
  },
  floor$0: function(receiver) {
    return this.toInt$0(this.floorToDouble$0(receiver));
  },
  round$0: function(receiver) {
    return this.toInt$0(this.roundToDouble$0(receiver));
  },
  ceilToDouble$0: function(receiver) {
    return $.doubleTypeCheck(Math.ceil(receiver));
  },
  floorToDouble$0: function(receiver) {
    return $.doubleTypeCheck(Math.floor(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return $.doubleTypeCheck(-Math.round(-receiver));
    else
      return $.doubleTypeCheck(Math.round(receiver));
  },
  truncateToDouble$0: function(receiver) {
    return $.doubleTypeCheck(receiver < 0 ? this.ceilToDouble$0(receiver) : this.floorToDouble$0(receiver));
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return this.truncate$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException(new $.ArgumentError(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $xor: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException(new $.ArgumentError(other));
    return receiver >= other;
  },
  $isnum: true,
  $asObject: null
},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $asObject: null, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true, $asObject: null},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (typeof index !== "number")
      throw $.wrapException(new $.ArgumentError(index));
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    if (index >= receiver.length)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver.charCodeAt(index);
  },
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (start < 0 || start > string.length)
      throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (t3 < 0)
        $.throwExpression(new $.RangeError("value " + t3));
      if (t3 >= t2)
        $.throwExpression(new $.RangeError("value " + t3));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        $.throwExpression(new $.RangeError("value " + i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new $.StringMatch(start, string, receiver);
  },
  $add: function(receiver, other) {
    $.stringTypeCheck(other);
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw $.wrapException($.RangeError$range(index, 0, receiver.length));
    endIndex = index + pattern.length;
    if (endIndex > receiver.length)
      return false;
    return pattern == receiver.substring(index, endIndex);
    return this.matchAsPrefix$2(pattern, receiver, index) != null;
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    $.intTypeCheck(startIndex);
    $.intTypeCheck(endIndex);
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    if (startIndex == null)
      throw startIndex.$lt();
    if (startIndex < 0)
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.wrapException($.RangeError$value(startIndex));
    if (endIndex == null)
      throw endIndex.$gt();
    if (endIndex > receiver.length)
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  trim$0: function(receiver) {
    var endIndex, startIndex, codeUnit, endIndex0, endIndex1;
    for (endIndex = receiver.length, startIndex = 0; startIndex < endIndex;) {
      if (startIndex >= endIndex)
        $.throwExpression(new $.RangeError("value " + startIndex));
      codeUnit = receiver.charCodeAt(startIndex);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ++startIndex;
      else
        break;
    }
    if (startIndex === endIndex)
      return "";
    for (endIndex0 = endIndex; true; endIndex0 = endIndex1) {
      endIndex1 = endIndex0 - 1;
      if (endIndex1 < 0)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      if (endIndex1 >= endIndex)
        $.throwExpression(new $.RangeError("value " + endIndex1));
      codeUnit = receiver.charCodeAt(endIndex1);
      if (codeUnit === 32 || codeUnit === 13 || $.JSString__isWhitespace(codeUnit))
        ;
      else
        break;
    }
    if (startIndex === 0 && endIndex0 === endIndex)
      return receiver;
    return receiver.substring(startIndex, endIndex0);
  },
  indexOf$2: function(receiver, pattern, start) {
    var t1, i;
    if (start < 0 || start > receiver.length)
      throw $.wrapException(new $.RangeError("value " + start + " not in range 0.." + receiver.length));
    return receiver.indexOf(pattern, start);
    for (t1 = receiver.length, i = start; i <= t1; ++i)
      if (this.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
    return -1;
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    $.intTypeCheck(index);
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException(new $.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    return receiver[index];
  },
  $asObject: null,
  $isString: true,
  $isPattern: true
},

getInterceptor: function(object) {
  return $.getInterceptor(object);
},

getDispatchProperty: function(object) {
  return object[$.dispatchPropertyName];
},

setDispatchProperty: function(object, value) {
  var t1 = $.dispatchPropertyName;
  $.stringTypeCheck(t1);
  Object.defineProperty(object, t1, {value: value, enumerable: false, writable: true, configurable: true});
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

dispatchRecordInterceptor: function(record) {
  return record.i;
},

dispatchRecordProto: function(record) {
  return record.p;
},

dispatchRecordExtension: function(record) {
  return record.e;
},

dispatchRecordIndexability: function(record) {
  return record.x;
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = $.dispatchRecordProto(record);
    if (false === proto)
      return $.dispatchRecordInterceptor(record);
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return $.dispatchRecordInterceptor(record);
    if ($.dispatchRecordExtension(record) === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  if (record == null)
    return $.C_JSUnknown;
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
},

initializeDispatchProperty: function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

initializeDispatchProperty$bailout: function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, $.makeDispatchRecord(jsObjectInterceptor, objectProto, null, null));
      return;
    }
  }
},

JSString__isWhitespace: function(codeUnit) {
  if (codeUnit < 256)
    switch (codeUnit) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 133:
      case 160:
        return true;
      default:
        return false;
    }
  switch (codeUnit) {
    case 5760:
    case 6158:
    case 8192:
    case 8193:
    case 8194:
    case 8195:
    case 8196:
    case 8197:
    case 8198:
    case 8199:
    case 8200:
    case 8201:
    case 8202:
    case 8232:
    case 8233:
    case 8239:
    case 8287:
    case 12288:
    case 65279:
      return true;
    default:
      return false;
  }
}}],
["_isolate_helper", "dart:_isolate_helper", , {
CloseToken: {"": "Object;", $isCloseToken: true},

JsIsolateSink: {"": "EventSink;_isClosed,_port<",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._port) + 499;
  },
  $isJsIsolateSink: true,
  $asObject: null,
  $asIsolateSink: null,
  $isIsolateSink: true
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  set$isolates: function(v) {
    this.isolates = $.interceptedTypeCheck(v, "$isMap");
  },
  set$managers: function(v) {
    this.managers = $.interceptedTypeCheck(v, "$isMap");
  },
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.boolConversionCheck($.get$globalPostMessageDefined());
    if (!$.boolConversionCheck(this.isWorker))
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && !$.boolConversionCheck(this.isWorker);
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    $.propertyTypeCheck(entry, "$isFunction");
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.set$isolates($.Map_Map($.JSInt, $._IsolateContext));
    this.set$managers($.Map_Map($.JSInt, null));
    if ($.boolConversionCheck(this.isWorker)) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  $is_Manager: true
},

_IsolateContext: {"": "Object;id,ports,isolateStatics",
  set$ports: function(receiver, v) {
    this.ports = $.interceptedTypeCheck(v, "$isMap");
  },
  eval$1: function(code) {
    var old, result;
    $.propertyTypeCheck(code, "$isFunction");
    old = $._globalState().currentContext;
    $._globalState().currentContext = this;
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      $._globalState().currentContext = $.propertyTypeCheck(old, "$is_IsolateContext");
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return $.propertyTypeCheck(t1.$index(t1, portId), "$isReceivePort");
  },
  register$2: function(_, portId, port) {
    var t1 = this.ports;
    if (t1.containsKey$1(t1, portId))
      throw $.wrapException($.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $._globalState().isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $._globalState().isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.set$ports(this, $.Map_Map($.JSInt, $.ReceivePort));
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true,
  $asObject: null
},

_EventLoop: {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    this.events.addLast$1($._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return $.propertyTypeCheck(t1.removeFirst$0(), "$is_IsolateEvent");
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($._globalState().rootContext != null) {
      var t1 = $._globalState().isolates;
      if (t1.containsKey$1(t1, $._globalState().rootContext.id))
        if ($.boolConversionCheck($._globalState().fromCommandLine)) {
          t1 = $._globalState().rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      throw $.wrapException($.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if ($.boolConversionCheck(t1.isWorker)) {
        t2 = t1.isolates;
        t2 = t2.get$isEmpty(t2) && t1.topEventLoop.activeTimerCount === 0;
      } else
        t2 = false;
      if (t2) {
        t1 = t1.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
      }
      return false;
    }
    $event.process$0;
    $event.isolate.eval$1($event.fn);
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if (!$.boolConversionCheck($._globalState().isWorker))
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $._globalState().mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  },
  $is_EventLoop: true
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_IsolateEvent: {"": "Object;isolate,fn,message", $is_IsolateEvent: true},

_MainManagerStub: {"": "Object;",
  postMessage$1: function(_, msg) {
    self.postMessage(msg);
  },
  $is_MainManagerStub: true
},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_BaseSendPort: {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $.Completer_Completer(null);
    port = $.ReceivePortImpl$();
    this.send$2(this, message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_closure(completer, port));
    return completer.future;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "Future__dynamic", ret: $.Future, args: [null]}; },
  $isSendPort: true
},

_BaseSendPort_call_closure: {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_dynamic__int_dynamic: true,
  $is_bool__DigitalButtonEvent_bool: true,
  $is_void__GameLoop_GameLoopTouch: true,
  $is_void__int_String: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__K_V0: true,
  $is_void__RenderingContext_GameLoopHtml: true,
  $is_void__String_String: true
},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $.propertyTypeCheck(replyTo, "$isSendPort");
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort) {
      t1 = this._receivePort;
      t2 = other._receivePort;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return this._receivePort._id;
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true,
  $asObject: null
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $._globalState().isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort()._liblib7$_callback == null)
      return;
    shouldSerialize = $._globalState().currentContext != null && $._globalState().currentContext.id !== t2.get$_isolateId();
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $._globalState().topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort()._liblib7$_callback != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._liblib7$_callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $.propertyTypeCheck(replyTo, "$isSendPort");
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort) {
      t1 = this._workerId;
      t2 = other._workerId;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this._isolateId;
        t2 = other._isolateId;
        if (t1 == null ? t2 == null : t1 === t2) {
          t1 = this._receivePortId;
          t2 = other._receivePortId;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = this._workerId;
    if (t1 == null)
      throw t1.$shl();
    t2 = this._isolateId;
    if (t2 == null)
      throw t2.$shl();
    return $.JSInt_methods.$xor((t1 << 16 ^ t2 << 8) >>> 0, this._receivePortId);
  },
  $is_WorkerSendPort: true,
  $isSendPort: true,
  $asObject: null
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($.boolConversionCheck($._globalState().isWorker)) {
      t1 = $._globalState().mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $._globalState().managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

ReceivePortImpl: {"": "Object;_id,_liblib7$_callback",
  _liblib7$_callback$2: function(arg0, arg1) {
    return this._liblib7$_callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._liblib7$_callback = $.assertFunctionSubtype(onMessage, "void__dynamic_SendPort");
  },
  close$0: function(_) {
    this._liblib7$_callback = null;
    $._globalState().currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $._globalState().currentContext.id);
  },
  ReceivePortImpl$0: function() {
    var t1 = $._globalState().currentContext;
    t1.register$2(t1, this._id, this);
  },
  $isReceivePortImpl: true,
  $isReceivePort: true,
  $asObject: null
},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax($.get$values$x(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_PendingSendPortFinder_visitList_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

_PendingSendPortFinder_visitMap_closure: {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    $.propertyTypeCheck(x, "$isSendPort");
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $._globalState().currentManagerId, port._isolateId, port._receivePort._id];
  },
  visitWorkerSendPort$1: function(port) {
    return ["sendport", port._workerId, port._isolateId, port._receivePortId];
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    $.propertyTypeCheck(x, "$isSendPort");
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    $.listTypeCheck(list);
    t1 = $.getInterceptor$asx(list);
    managerId = $.intTypeCheck(t1.$index(list, 1));
    isolateId = $.intTypeCheck(t1.$index(list, 2));
    receivePortId = $.intTypeCheck(t1.$index(list, 3));
    t1 = $._globalState().currentManagerId;
    if (managerId == null ? t1 == null : managerId === t1) {
      t1 = $._globalState().isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    $.listTypeCheck(list);
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = $.boolTypeCheck(t1.$index(list, 2));
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    $.listTypeCheck(list);
    return $.C_CloseToken;
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    this._setAttachedInfo$2(object, info);
  },
  reset$0: function(_) {
    $.assertHelper(this.tagged == null);
    this.tagged = $.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  },
  _setAttachedInfo$2: function(o, info) {
    o.__MessageTraverser__attached_info__ = info;
  },
  $is_MessageTraverserVisitedMap: true,
  $asObject: null
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  },
  $is_MessageTraverserVisitedMap: true
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if ($._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.wrapException("Message serialization: Illegal value " + $.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = $.listTypeCheck(t1.$index(t1, list));
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._visited;
        copy = $.listTypeCheck(t1.$index(t1, list));
        if (copy != null)
          return copy;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var copy, t2, i, t3;
        state0 = 0;
        copy = $.List_List(len, null);
        t2 = this._visited;
        t2.$indexSet(t2, list, copy);
        for (t2 = copy.length, i = 0; $.JSInt_methods.$lt(i, len); ++i) {
          t3 = this._dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = t3;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = $.interceptedTypeCheck(t2.$index(t2, map), "$isMap");
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.Map_Map(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    $.forEach$1$ax(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_dynamic__int_dynamic: true,
  $is_bool__DigitalButtonEvent_bool: true,
  $is_void__GameLoop_GameLoopTouch: true,
  $is_void__int_String: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__K_V0: true,
  $is_void__RenderingContext_GameLoopHtml: true,
  $is_void__String_String: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.intTypeCheck(t1.$index(t1, list));
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.intTypeCheck(t1.$index(t1, map));
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = $.getInterceptor$x(map);
    return ["map", id, this._serializeList$1($.toList$0$ax(t1.get$keys(map))), this._serializeList$1($.toList$0$ax(t1.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var result, t2, i, t3;
        state0 = 0;
        result = $.List_List(len, null);
        for (t2 = result.length, i = 0; $.JSInt_methods.$lt(i, len); ++i) {
          t3 = this._dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          result[i] = t3;
        }
        return result;
    }
  }
},

_Deserializer: {"": "Object;_deserialized",
  set$_deserialized: function(v) {
    this._deserialized = $.interceptedTypeCheck(v, "$isMap");
  },
  deserialize$1: function(x) {
    if ($._Deserializer_isPrimitive(x))
      return x;
    this.set$_deserialized($.HashMap$(null, null));
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id, result;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    $.assertHelper(typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList));
    t1 = $.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        $.listTypeCheck(x);
        id = $.intTypeCheck(t1.$index(x, 1));
        t1 = this._deserialized;
        result = t1.$index(t1, id);
        $.assertHelper(result != null);
        return result;
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    $.listTypeCheck(x);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    $.intTypeCheck(id);
    dartList = t1.$index(x, 2);
    $.listTypeCheck(dartList);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.isJsIndexable(dartList, dartList[$.dispatchPropertyName]))
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSInt_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    $.listTypeCheck(x);
    result = $.Map_Map(null, null);
    t1 = $.getInterceptor$asx(x);
    id = $.intTypeCheck(t1.$index(x, 1));
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    $.listTypeCheck(keys);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.isJsIndexable(keys, keys[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(1, keys, x, t1, result);
    values = t1.$index(x, 3);
    $.listTypeCheck(values);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.isJsIndexable(values, values[$.dispatchPropertyName])))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    $.assertHelper(len === values.length);
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, x, t1, result, values, len) {
    switch (state0) {
      case 0:
        $.listTypeCheck(x);
        result = $.Map_Map(null, null);
        t1 = $.getInterceptor$asx(x);
        id = $.intTypeCheck(t1.$index(x, 1));
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
        $.listTypeCheck(keys);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
        $.listTypeCheck(values);
      case 2:
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
      case 3:
        var id, t2, t3, i;
        state0 = 0;
        t2 = $.getInterceptor$asx(values);
        t3 = t2.get$length(values);
        $.assertHelper(len == null ? t3 == null : len === t3);
        for (i = 0; $.JSInt_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    $.listTypeCheck(x);
    throw $.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  set$_handle: function(v) {
    this._handle = $.intTypeCheck(v);
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    $.assertFunctionSubtype(callback, "void_");
    if (milliseconds === 0)
      t1 = !$.hasTimer() || $.boolConversionCheck($._globalState().isWorker);
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      $._globalState().topEventLoop.enqueue$3($._globalState().currentContext, new $.TimerImpl_internalCallback(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else {
      $.assertHelper(milliseconds > 0);
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
    }
  },
  $isTimer: true,
  $asObject: null
},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0.set$_handle(null);
    this.callback_1.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2.set$_handle(null);
    var t1 = $._globalState().topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

JsIsolateSink$fromPort: function(_port) {
  return new $.JsIsolateSink(false, _port);
},

_callInIsolate: function(isolate, $function) {
  var result = $.propertyTypeCheck(isolate, "$is_IsolateContext").eval$1($.propertyTypeCheck($function, "$isFunction"));
  $._globalState().topEventLoop.run$0();
  return result;
},

_currentIsolate: function() {
  return $._globalState().currentContext;
},

startRootIsolate: function(entry) {
  var rootContext;
  $._globalState0($._Manager$(entry));
  if ($.boolConversionCheck($._globalState().isWorker))
    return;
  rootContext = $._IsolateContext$();
  $._globalState().rootContext = rootContext;
  $._globalState().currentContext = rootContext;
  rootContext.eval$1(entry);
  $._globalState().topEventLoop.run$0();
},

_globalState: function() {
  return $globalState;
},

_globalState0: function(val) {
  $globalState = val;
},

_Manager$: function(entry) {
  var t1;
  $.propertyTypeCheck(entry, "$isFunction");
  t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, $.interceptedTypeCheck(null, "$isMap"), null, $.interceptedTypeCheck(null, "$isMap"), entry);
  t1._Manager$1(entry);
  return t1;
},

_IsolateContext$: function() {
  var t1 = new $._IsolateContext(null, $.interceptedTypeCheck(null, "$isMap"), null);
  t1._IsolateContext$0();
  return t1;
},

_EventLoop$: function() {
  return new $._EventLoop($.assertSubtype($.Queue_Queue($._IsolateEvent), "$isQueue", [$._IsolateEvent], "$asQueue"), 0);
},

_IsolateEvent$: function(isolate, fn, message) {
  return new $._IsolateEvent($.propertyTypeCheck(isolate, "$is_IsolateContext"), fn, message);
},

_MainManagerStub$: function() {
  return new $._MainManagerStub();
},

IsolateNatives_computeThisScript: function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives_computeGlobalThis: function() {
  return function() { return this; }();
},

IsolateNatives__getEventData: function(e) {
  return e.data;
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage($.IsolateNatives__getEventData(e));
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $._globalState().currentManagerId = $.intTypeCheck(t1.$index(msg, "id"));
      functionName = $.stringTypeCheck(t1.$index(msg, "functionName"));
      entryPoint = $.propertyTypeCheck(functionName == null ? $._globalState().entry : $.IsolateNatives__getJSFunctionFromName(functionName), "$isFunction");
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $._globalState().topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start");
      $._globalState().currentContext = context;
      $._globalState().topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if ($.propertyTypeCheck(t1.$index(msg, "port"), "$isSendPort") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $._globalState().topEventLoop.run$0();
      break;
    case "close":
      t1 = $._globalState().managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $._globalState().topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($.boolConversionCheck($._globalState().isWorker)) {
        t1 = $._globalState().mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, exception;
  if ($.boolConversionCheck($._globalState().isWorker)) {
    t1 = $._globalState().mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.IsolateNatives__consoleLog(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException($.Exception_Exception(trace));
    }

},

IsolateNatives__consoleLog: function(msg) {
  $.get$globalThis().console.log(msg);
},

IsolateNatives__getJSFunctionFromName: function(functionName) {
  return $[functionName];
},

IsolateNatives__startIsolate: function(topLevel, replyTo) {
  $.propertyTypeCheck(replyTo, "$isSendPort");
  $.lazyPort = $.ReceivePort_ReceivePort();
  replyTo.send$2(replyTo, "spawned", $.port().toSendPort$0());
  topLevel.call$0();
},

IsolateNatives__spawnWorker: function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $._globalState();
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $._globalState().managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
},

_NativeJsSendPort$: function(_receivePort, isolateId) {
  return new $._NativeJsSendPort($.propertyTypeCheck(_receivePort, "$isReceivePortImpl"), isolateId);
},

_WorkerSendPort$: function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
},

ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
},

_waitForPendingPorts: function(message, callback) {
  var finder;
  $.assertFunctionSubtype(callback, "void_");
  finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Future_wait(finder.ports).then$1(new $._waitForPendingPorts_closure(callback));
},

_PendingSendPortFinder$: function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder($.interceptedTypeCheck([], "$isList"), t1);
  t1._PendingSendPortFinder$0();
  return t1;
},

_serializeMessage: function(message) {
  if ($.boolConversionCheck($._globalState().get$needSerialization()))
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
},

_deserializeMessage: function(message) {
  if ($.boolConversionCheck($._globalState().get$needSerialization()))
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
},

_JsSerializer$: function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
},

_JsCopier$: function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
},

_JsDeserializer$: function() {
  return new $._JsDeserializer($.interceptedTypeCheck(null, "$isMap"));
},

_JsVisitedMap$: function() {
  return new $._JsVisitedMap(null);
},

_MessageTraverserVisitedMap$: function() {
  return new $._MessageTraverserVisitedMap();
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

TimerImpl$: function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, $.assertFunctionSubtype(callback, "void_"));
  return t1;
},

hasTimer: function() {
  return $.get$globalThis().setTimeout != null;
}}],
["_js_helper", "dart:_js_helper", , {
DartError: {"": "Object;",
  get$stack: function() {
    return $.stringTypeCheck(this.stack);
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + this.get$stack();
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  }
},

_StackTrace: {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return $.stringTypeCheck(t1 != null ? t1 : "");
  },
  $isStackTrace: true,
  $asObject: null
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true,
  $asObject: null
},

BoundClosure: {"": "Closure;_self,_target,_receiver",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (this === other)
      return true;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isBoundClosure)
      return false;
    return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._self) + $.get$hashCode$(this._target) + $.get$hashCode$(this._receiver) & 0x3ffffff;
  },
  $isBoundClosure: true
},

Null: {"": "Object;"},

TypeErrorImplementation: {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  },
  $asObject: null
},

CastErrorImplementation: {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  },
  $asObject: null
},

StringMatch: {"": "Object;start,str,pattern",
  $index: function(_, g) {
    $.intTypeCheck(g);
    if (g !== 0)
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  },
  $isMatch: true,
  $asObject: null
},

isJsIndexable: function(object, record) {
  var result;
  if (record != null) {
    result = $.dispatchRecordIndexability(record);
    if (result != null)
      return result;
  }
  return typeof object === "object" && object !== null && !!$.getInterceptor(object).$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return res;
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_printString: function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
},

Primitives__throwFormatException: function(string) {
  throw $.wrapException($.FormatException$($.stringTypeCheck(string)));
},

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1;
  $.assertFunctionSubtype(handleError, "int__String");
  handleError = $.assertFunctionSubtype($.Primitives__throwFormatException$closure, "int__String");
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (match != null) {
    t1 = match.length;
    if (2 >= t1)
      throw $.ioore(2);
    if (match[2] != null)
      return $.intTypeCheck(parseInt(source, 16));
    if (3 >= t1)
      throw $.ioore(3);
    if (match[3] != null)
      return $.intTypeCheck(parseInt(source, 10));
    return $.intTypeCheck(handleError.call$1(source));
  }
  radix = 10;
  if (match == null)
    return $.intTypeCheck(handleError.call$1(source));
  return $.intTypeCheck(parseInt(source, radix));
},

Primitives_parseInt$bailout: function(state0, source, handleError, maxCharCode, match, radix) {
  switch (state0) {
    case 0:
      var t1;
      $.assertFunctionSubtype(handleError, "int__String");
      handleError = $.assertFunctionSubtype($.Primitives__throwFormatException$closure, "int__String");
      $.checkString(source);
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          throw $.ioore(2);
        if (match[2] != null)
          return $.intTypeCheck(parseInt(source, 16));
        if (3 >= t1)
          throw $.ioore(3);
        if (match[3] != null)
          return $.intTypeCheck(parseInt(source, 10));
        return $.intTypeCheck(handleError.call$1(source));
      }
      radix = 10;
      if (match == null)
        return $.intTypeCheck(handleError.call$1(source));
      return $.intTypeCheck(parseInt(source, radix));
  }
},

Primitives_parseDouble: function(source, handleError) {
  var result, trimmed;
  $.assertFunctionSubtype(handleError, "double__String");
  $.checkString(source);
  handleError = $.assertFunctionSubtype($.Primitives__throwFormatException$closure, "double__String");
  if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
    return $.doubleTypeCheck(handleError.call$1(source));
  result = parseFloat(source);
  if ($.JSNumber_methods.get$isNaN(result)) {
    trimmed = $.trim$0$s(source);
    if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
      return $.doubleTypeCheck(result);
    return $.doubleTypeCheck(handleError.call$1(source));
  }
  return $.doubleTypeCheck(result);
},

Primitives_formatType: function(className, typeArguments) {
  $.listTypeCheck(typeArguments);
  return className + $.joinArguments(typeArguments, 0);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback($.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  if (t1.codeUnitAt$1($name, 0) === 36)
    $name = t1.substring$1($name, 1);
  return $.Primitives_formatType($name, $.getRuntimeTypeInfo(object));
},

Primitives_objectToString: function(object) {
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
},

Primitives_newGrowableList: function($length) {
  return new Array($length);
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives_dateNow: function() {
  return Date.now();
},

Primitives_numMicroseconds: function() {
  if (typeof window != "undefined" && window !== null) {
    var performance = window.performance;
    if (performance != null && typeof performance.webkitNow == "function")
      return $.JSNumber_methods.floor$0(1000 * performance.webkitNow());
  }
  return 1000 * $.Primitives_dateNow();
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  $.interceptedTypeCheck(array, "$isList");
  end = $.get$length$asx(array);
  if (end == null)
    return $.Primitives__fromCharCodeApply$bailout(1, array, end);
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      if (t2 < end)
        ;
      else
        t2 = end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives__fromCharCodeApply$bailout: function(state0, array, end) {
  var result, i, subarray, t1;
  for (result = "", i = 0; $.JSInt_methods.$lt(i, end); i += 500) {
    if (end == null)
      throw end.$le();
    if (end <= 500)
      subarray = array;
    else {
      t1 = i + 500;
      if (t1 < end)
        ;
      else
        t1 = end;
      subarray = array.slice(i, t1);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, t2, t3, $arguments, t4;
  a = $.interceptedTypeCheck([], "$isList");
  for (t1 = $.assertSubtype($.ListIterator$(codePoints, $.getRuntimeTypeArgument(codePoints, "JSArray", 0)), "$isIterator", [$.getRuntimeTypeArgument(codePoints, "JSArray", 0)], "$asIterator"), t2 = $.getInterceptor$ax(a); $.boolConversionCheck(t1.moveNext$0());) {
    t3 = t1.get$_current();
    $arguments = $.substitute($.getField(t1, "$asListIterator"), $.getRuntimeTypeInfo(t1));
    if ($arguments == null)
      t4 = null;
    else {
      $.assertHelper($.isJsArray($arguments));
      t4 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(t3, t4);
    if (typeof t3 !== "number" || Math.floor(t3) !== t3)
      throw $.wrapException(new $.ArgumentError(t3));
    if (t3 <= 65535)
      t2.add$1(a, t3);
    else if (t3 <= 1114111) {
      t2.add$1(a, 55296 + ($.JSNumber_methods.$shr(t3 - 65536, 10) & 1023));
      t2.add$1(a, 56320 + (t3 & 1023));
    } else
      throw $.wrapException(new $.ArgumentError(t3));
  }
  return $.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, t2, $arguments, t3;
  for (t1 = $.JSArray_methods.get$iterator(charCodes); t1.moveNext$0();) {
    t2 = t1._current;
    $arguments = $.substitute($.getField(t1, "$asListIterator"), $.getRuntimeTypeInfo(t1));
    if ($arguments == null)
      t3 = null;
    else {
      $.assertHelper($.isJsArray($arguments));
      t3 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(t2, t3);
    if (typeof t2 !== "number" || Math.floor(t2) !== t2)
      throw $.wrapException(new $.ArgumentError(t2));
    if (t2 < 0)
      throw $.wrapException(new $.ArgumentError(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
},

Primitives_stringConcatUnchecked: function(string1, string2) {
  return string1 + string2;
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getYear: function(receiver) {
  return $.boolConversionCheck(receiver.isUtc) ? $.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : $.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

Primitives_getMonth: function(receiver) {
  return $.boolConversionCheck(receiver.isUtc) ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

Primitives_getDay: function(receiver) {
  return $.boolConversionCheck(receiver.isUtc) ? $.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : $.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

Primitives_getHours: function(receiver) {
  return $.boolConversionCheck(receiver.isUtc) ? $.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : $.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

Primitives_getMinutes: function(receiver) {
  return $.boolConversionCheck(receiver.isUtc) ? $.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : $.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

Primitives_getSeconds: function(receiver) {
  return $.boolConversionCheck(receiver.isUtc) ? $.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : $.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

Primitives_getMilliseconds: function(receiver) {
  return $.boolConversionCheck(receiver.isUtc) ? $.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : $.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
},

iae: function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
},

ioore: function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.iae(index);
  throw $.wrapException($.RangeError$value(index));
},

checkNull: function(object) {
  if (object == null)
    throw $.wrapException($.ArgumentError$(null));
  return object;
},

checkNum: function(value) {
  if (typeof value !== "number")
    throw $.wrapException($.ArgumentError$(value));
  return value;
},

checkString: function(value) {
  if (typeof value !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return value;
},

wrapException: function(ex) {
  var wrapper = $.DartError$(ex == null ? $.NullThrownError$() : ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = $.stringTypeCheck(new Error().stack);
  return wrapper;
},

throwExpression: function(ex) {
  throw $.wrapException(ex);
},

DartError$: function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
},

DartError_toStringWrapper: function() {
  return $.toString$0(this);
},

unwrapException: function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return ex.dartException;
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (!$.contains(message, "JSNull")) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") || t1.$eq(type, "called_non_callable") || t1.$eq(type, "non_object_property_call") || t1.$eq(type, "non_object_property_load");
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method"))
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, message, [], $.makeLiteralMap([]), null);
      else {
        if (!$.contains(message, " has no method "))
          if (!$.contains(message, " is not a function"))
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", message, [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(t1 ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && $.contains(message, "call stack"))
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
},

getTraceFromException: function(exception) {
  if (exception == null)
    return;
  if (typeof exception !== "object")
    return;
  if ("stack" in exception)
    return $._StackTrace$(exception.stack);
  else
    return;
},

_StackTrace$: function(_stack) {
  return new $._StackTrace(_stack);
},

makeLiteralMap: function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.get$iterator$ax($.listTypeCheck(keyValuePairs));
  result = $.LinkedHashMap$(null, null);
  for (; $.boolConversionCheck(iterator.moveNext$0());) {
    key = $.stringTypeCheck(iterator.get$current());
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2) {
  $.propertyTypeCheck(closure, "$isFunction");
  $.intTypeCheck(numberOfArguments);
  if (numberOfArguments === 0)
    return $._callInIsolate(isolate, new $.invokeClosure_closure(closure));
  else if (numberOfArguments === 1)
    return $._callInIsolate(isolate, new $.invokeClosure_closure0(closure, arg1));
  else if (numberOfArguments === 2)
    return $._callInIsolate(isolate, new $.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw $.wrapException($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
},

boolConversionCheck: function(value) {
  $.boolTypeCheck(value);
  $.assertHelper(value != null);
  return value;
},

stringTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "string")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "String"));
},

doubleTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "number")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "double"));
},

numTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "number")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "num"));
},

boolTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "boolean")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "bool"));
},

intTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "number" && Math.floor(value) === value)
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "int"));
},

propertyTypeError: function(value, property) {
  var t1 = $.getInterceptor$asx(property);
  throw $.wrapException($.TypeErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
},

propertyTypeCastError: function(value, property) {
  var t1 = $.getInterceptor$asx(property);
  throw $.wrapException($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
},

propertyTypeCheck: function(value, property) {
  if (value == null)
    return value;
  if (!!value[property])
    return value;
  $.propertyTypeError(value, property);
},

propertyTypeCast: function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
},

interceptedTypeCheck: function(value, property) {
  if (value == null)
    return value;
  if (typeof value === "object" && $.getInterceptor(value)[property])
    return value;
  $.propertyTypeError(value, property);
},

interceptedTypeCast: function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && $.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  $.propertyTypeCastError(value, property);
},

stringSuperTypeCheck: function(value, property) {
  if (value == null)
    return value;
  if (typeof value === "string")
    return value;
  if (!!value[property])
    return value;
  $.propertyTypeError(value, property);
},

stringSuperNativeTypeCheck: function(value, property) {
  if (value == null)
    return value;
  if (typeof value === "string")
    return value;
  if ($.getInterceptor(value)[property])
    return value;
  $.propertyTypeError(value, property);
},

listTypeCheck: function(value) {
  if (value == null)
    return value;
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isList))
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "List"));
},

listSuperNativeTypeCheck: function(value, property) {
  if (value == null)
    return value;
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isList))
    return value;
  if ($.getInterceptor(value)[property])
    return value;
  $.propertyTypeError(value, property);
},

voidTypeCheck: function(value) {
  if (value == null)
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "void"));
},

TypeErrorImplementation$: function(value, type) {
  return new $.TypeErrorImplementation("type '" + $.Primitives_objectTypeName(value) + "' is not a subtype of type '" + type + "'");
},

CastErrorImplementation$: function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + expectedType);
},

assertHelper: function(condition) {
  if (typeof condition === "object" && condition !== null && !!$.getInterceptor(condition).$isFunction)
    condition = condition.call$0();
  if (typeof condition !== "boolean")
    throw $.wrapException(new $.TypeErrorImplementation("type '" + $.Primitives_objectTypeName(condition) + "' is not a subtype of type 'bool'"));
  if (!condition)
    throw $.wrapException(new $.AssertionError());
},

throwCyclicInit: function(staticName) {
  throw $.wrapException($.CyclicInitializationError$("Cyclic initialization for static " + $.stringTypeCheck(staticName)));
},

setRuntimeTypeInfo: function(target, typeInfo) {
  $.assertHelper($.isNull(typeInfo) || $.isJsArray(typeInfo));
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return $.substitute($.getField(target, "$as" + $.S(substitutionName)), $.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments;
  $.stringTypeCheck(substitutionName);
  $.intTypeCheck(index);
  $arguments = $.getRuntimeTypeArguments(target, substitutionName);
  return $.isNull($arguments) ? null : $.getIndex($arguments, index);
},

getConstructorName: function(type) {
  return type.builtin$cls;
},

runtimeTypeToString: function(type) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array) {
    $.assertHelper($.isJsArray(type));
    return $.getConstructorName($.getIndex(type, 0)) + $.joinArguments(type, 1);
  } else if (typeof type == "function")
    return type.builtin$cls;
  else
    return;
},

joinArguments: function(types, startIndex) {
  var buffer, t1, index, firstArgument, allDynamic, argument, str;
  if ($.isNull(types))
    return "";
  $.assertHelper($.isJsArray(types));
  buffer = $.StringBuffer$("");
  for (t1 = typeof types === "object" && types !== null && types.constructor === Array, index = startIndex, firstArgument = true, allDynamic = true; $.assertHelper(t1), index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    $.assertHelper(t1);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = $.runtimeTypeToString(argument);
    str = typeof str === "string" ? str : str;
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  $.assertHelper($.isNull(substitution) || $.isJsArray(substitution) || $.isJsFunction(substitution));
  $.assertHelper($.isNull($arguments) || $.isJsArray($arguments));
  if ($.isJsArray(substitution))
    $arguments = substitution;
  else if ($.isJsFunction(substitution)) {
    substitution = $.invoke(substitution, $arguments);
    if ($.isJsArray(substitution))
      $arguments = substitution;
    else if ($.isJsFunction(substitution))
      $arguments = $.invoke(substitution, $arguments);
  }
  return $arguments;
},

checkSubtype: function(object, isField, checks, asField) {
  var $arguments, interceptor;
  if (object == null)
    return false;
  $arguments = $.getRuntimeTypeInfo(object);
  interceptor = $.getInterceptor(object);
  if ($.isNull($.getField(interceptor, isField)))
    return false;
  return $.checkArguments($.getField(interceptor, asField), $arguments, checks);
},

computeTypeName: function(isField, $arguments) {
  return $.Primitives_formatType($.substring$2$s(isField, 3, isField.length), $arguments);
},

assertSubtype: function(object, isField, checks, asField) {
  $.stringTypeCheck(isField);
  $.listTypeCheck(checks);
  $.stringTypeCheck(asField);
  if (object != null && !$.checkSubtype(object, isField, checks, asField))
    throw $.wrapException($.TypeErrorImplementation$(object, $.computeTypeName(isField, checks)));
  return object;
},

checkArguments: function(substitution, $arguments, checks) {
  return $.areSubtypes($.substitute(substitution, $arguments), checks);
},

areSubtypes: function(s, t) {
  var len, t1, t2, i, t3;
  if ($.isNull(s) || $.isNull(t))
    return true;
  $.assertHelper($.isJsArray(s));
  $.assertHelper($.isJsArray(t));
  $.assertHelper($.getLength(s) === $.getLength(t));
  len = $.getLength(s);
  for (t1 = typeof s === "object" && s !== null && s.constructor === Array, t2 = typeof t === "object" && t !== null && t.constructor === Array, i = 0; i < len; ++i) {
    $.assertHelper(t1);
    t3 = s[i];
    $.assertHelper(t2);
    if (!$.isSubtype(t3, t[i]))
      return false;
  }
  return true;
},

assertFunctionSubtype: function(object, signatureName, contextName, context, typeArguments) {
  $.stringTypeCheck(signatureName);
  if (!$.checkFunctionSubtype(object, signatureName, $.stringTypeCheck(contextName), context, typeArguments))
    throw $.wrapException($.TypeErrorImplementation$(object, signatureName));
  return object;
},

checkFunctionSubtype: function(target, signatureName, contextName, context, typeArguments) {
  var interceptor, signatureLocation, typeSignature, targetSignatureFunction, targetSignature;
  if ($.isNull(target))
    return true;
  interceptor = $.getInterceptor(target);
  if ($.hasField(interceptor, "$is_" + signatureName))
    return true;
  signatureLocation = $;
  if ($.isNotNull(contextName))
    signatureLocation = $.getField(signatureLocation, contextName);
  typeSignature = $.getField(signatureLocation, "$signature_" + signatureName);
  if ($.isNull(typeSignature))
    return false;
  targetSignatureFunction = $.getField(interceptor, "$signature");
  if ($.isNull(targetSignatureFunction))
    return false;
  targetSignature = $.invokeOn(targetSignatureFunction, interceptor, null);
  if ($.isJsFunction(typeSignature))
    if ($.isNotNull(typeArguments))
      typeSignature = $.invoke(typeSignature, typeArguments);
    else
      typeSignature = $.isNotNull(context) ? $.invoke(typeSignature, $.getRuntimeTypeArguments(context, contextName)) : $.invoke(typeSignature, null);
  return $.isFunctionSubtype(targetSignature, typeSignature);
},

isSupertypeOfNull: function(type) {
  return $.isNull(type) || $.getConstructorName(type) === "Object";
},

checkSubtypeOfRuntimeType: function(o, t) {
  var rti, type;
  if ($.isNull(o))
    return $.isSupertypeOfNull(t);
  if ($.isNull(t))
    return true;
  rti = $.getRuntimeTypeInfo(o);
  o = $.getInterceptor(o);
  if ($.isNotNull(rti)) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return $.isSubtype(type, t);
},

assertSubtypeOfRuntimeType: function(object, type) {
  if (object != null && !$.checkSubtypeOfRuntimeType(object, type))
    throw $.wrapException($.TypeErrorImplementation$(object, $.runtimeTypeToString(type)));
  return object;
},

isSubtype: function(s, t) {
  var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
  if (s === t)
    return true;
  if (s == null || t == null)
    return true;
  if (t.func != null) {
    if (s.func == null) {
      if (s["$is_" + $.S(t.func)] != null)
        return true;
      targetSignatureFunction = s.$signature;
      if (targetSignatureFunction == null)
        return false;
      $.assertHelper($.isJsFunction(targetSignatureFunction));
      $.assertHelper($.isNull(null) || $.isJsArray(null));
      s = targetSignatureFunction.apply(s, null);
    }
    return $.isFunctionSubtype(s, t);
  }
  if (t.builtin$cls === "Function" && s.func != null)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  if (t1) {
    $.assertHelper($.isJsArray(s));
    typeOfS = s[0];
  } else
    typeOfS = s;
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  if (t2) {
    $.assertHelper($.isJsArray(t));
    typeOfT = t[0];
  } else
    typeOfT = t;
  if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
  if ((typeof s !== "object" || s === null || s.constructor !== Array) && substitution == null || typeof t !== "object" || t === null || t.constructor !== Array)
    return true;
  t1 = $.isJsArray(s) ? s.slice(1) : null;
  t2 = $.isJsArray(t) ? t.slice(1) : null;
  return $.areSubtypes($.substitute(substitution, t1), t2);
},

isAssignable: function(s, t) {
  return $.isSubtype(s, t) || $.isSubtype(t, s);
},

areAssignable: function(s, t, allowShorter) {
  var sLength, tLength, t1, t2, i, t3, t4;
  $.listTypeCheck(s);
  $.listTypeCheck(t);
  if ($.isNull(t) && $.isNull(s))
    return true;
  if ($.isNull(t))
    return allowShorter;
  if ($.isNull(s))
    return false;
  $.assertHelper($.isJsArray(s));
  $.assertHelper($.isJsArray(t));
  sLength = $.getLength(s);
  tLength = $.getLength(t);
  if (allowShorter) {
    if (sLength < tLength)
      return false;
  } else if (sLength !== tLength)
    return false;
  for (t1 = typeof s === "object" && s !== null && s.constructor === Array, t2 = typeof t === "object" && t !== null && t.constructor === Array, i = 0; i < tLength; ++i) {
    $.assertHelper(t1);
    t3 = s[i];
    $.assertHelper(t2);
    t4 = t[i];
    if (!($.isSubtype(t3, t4) || $.isSubtype(t4, t3)))
      return false;
  }
  return true;
},

areAssignableMaps: function(s, t) {
  if ($.isNull(t))
    return true;
  if ($.isNull(s))
    return false;
  $.assertHelper($.isJsObject(s));
  $.assertHelper($.isJsObject(t));
  return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, $.isAssignable$closure)
  ;
},

isFunctionSubtype: function(s, t) {
  var sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, t1, t2, pos, t3, t4, tPos, sPos;
  $.assertHelper($.hasField(t, "func"));
  if ($.hasNoField(s, "func"))
    return false;
  if ($.hasField(s, "void")) {
    if ($.hasNoField(t, "void") && $.hasField(t, "ret"))
      return false;
  } else if ($.hasNoField(t, "void"))
    if (!$.isAssignable($.getField(s, "ret"), $.getField(t, "ret")))
      return false;
  sParameterTypes = $.getField(s, "args");
  tParameterTypes = $.getField(t, "args");
  sOptionalParameterTypes = $.getField(s, "opt");
  tOptionalParameterTypes = $.getField(t, "opt");
  sParametersLen = $.isNotNull(sParameterTypes) ? $.getLength(sParameterTypes) : 0;
  tParametersLen = $.isNotNull(tParameterTypes) ? $.getLength(tParameterTypes) : 0;
  sOptionalParametersLen = $.isNotNull(sOptionalParameterTypes) ? $.getLength(sOptionalParameterTypes) : 0;
  tOptionalParametersLen = $.isNotNull(tOptionalParameterTypes) ? $.getLength(tOptionalParameterTypes) : 0;
  if (sParametersLen > tParametersLen)
    return false;
  if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
    return false;
  if (sParametersLen === tParametersLen) {
    if (!$.areAssignable(sParameterTypes, tParameterTypes, false))
      return false;
    if (!$.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
      return false;
  } else {
    for (t1 = typeof sParameterTypes === "object" && sParameterTypes !== null && sParameterTypes.constructor === Array, t2 = typeof tParameterTypes === "object" && tParameterTypes !== null && tParameterTypes.constructor === Array, pos = 0; pos < sParametersLen; ++pos) {
      $.assertHelper(t1);
      t3 = sParameterTypes[pos];
      $.assertHelper(t2);
      t4 = tParameterTypes[pos];
      if (!($.isSubtype(t3, t4) || $.isSubtype(t4, t3)))
        return false;
    }
    for (t1 = typeof sOptionalParameterTypes === "object" && sOptionalParameterTypes !== null && sOptionalParameterTypes.constructor === Array, tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
      $.assertHelper(t1);
      t3 = sOptionalParameterTypes[sPos];
      $.assertHelper(t2);
      t4 = tParameterTypes[tPos];
      if (!($.isSubtype(t3, t4) || $.isSubtype(t4, t3)))
        return false;
    }
    for (t1 = typeof tOptionalParameterTypes === "object" && tOptionalParameterTypes !== null && tOptionalParameterTypes.constructor === Array, sPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
      $.assertHelper(t1);
      t2 = tOptionalParameterTypes[sPos];
      $.assertHelper(t1);
      t3 = tOptionalParameterTypes[tPos];
      if (!($.isSubtype(t2, t3) || $.isSubtype(t3, t2)))
        return false;
    }
  }
  return $.areAssignableMaps($.getField(s, "named"), $.getField(t, "named"));
},

invoke: function($function, $arguments) {
  return $.invokeOn($function, null, $arguments);
},

invokeOn: function($function, receiver, $arguments) {
  $.assertHelper($.isJsFunction($function));
  $.assertHelper($.isNull($arguments) || $.isJsArray($arguments));
  return $function.apply(receiver, $arguments);
},

getField: function(object, $name) {
  return object[$.stringTypeCheck($name)];
},

getIndex: function(array, index) {
  $.assertHelper(typeof array === "object" && array !== null && array.constructor === Array);
  return array[index];
},

getLength: function(array) {
  $.assertHelper(typeof array === "object" && array !== null && array.constructor === Array);
  return array.length;
},

isJsArray: function(value) {
  return typeof value === "object" && value !== null && value.constructor === Array;
},

hasField: function(object, $name) {
  return object[$name] != null;
},

hasNoField: function(object, $name) {
  return object[$name] == null;
},

isJsFunction: function(o) {
  return typeof o == "function";
},

isJsObject: function(o) {
  return typeof o == 'object';
},

isNull: function(o) {
  return o == null;
},

isNotNull: function(o) {
  return o != null;
},

typeNameInChrome: function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
},

typeNameInSafari: function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
},

typeNameInWebKitCommon: function(tag) {
  return tag;
},

typeNameInOpera: function(obj) {
  return $.constructorNameFallback(obj);
},

typeNameInFirefox: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
},

typeNameInIE: function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
},

constructorNameFallback: function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.builtin$cls;
    if ($name != null)
      return $.stringTypeCheck($name);
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $.stringTypeCheck($name);
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
},

alternateTag: function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
},

contains: function(userAgent, $name) {
  return $.stringTypeCheck(userAgent).indexOf($name) !== -1;
},

propertyGet: function(object, property) {
  return object[property];
},

callHasOwnProperty: function($function, object, property) {
  return $function.call(object, property);
},

getFunctionForTypeNameOf: function() {
  if (typeof navigator !== "object")
    return $.propertyTypeCheck($.typeNameInChrome$closure, "$isFunction");
  var userAgent = navigator.userAgent;
  if ($.contains(userAgent, "Chrome") || $.contains(userAgent, "DumpRenderTree"))
    return $.propertyTypeCheck($.typeNameInChrome$closure, "$isFunction");
  else if ($.contains(userAgent, "Firefox"))
    return $.propertyTypeCheck($.typeNameInFirefox$closure, "$isFunction");
  else if ($.contains(userAgent, "MSIE"))
    return $.propertyTypeCheck($.typeNameInIE$closure, "$isFunction");
  else if ($.contains(userAgent, "Opera"))
    return $.propertyTypeCheck($.typeNameInOpera$closure, "$isFunction");
  else if ($.contains(userAgent, "AppleWebKit"))
    return $.propertyTypeCheck($.typeNameInSafari$closure, "$isFunction");
  else
    return $.propertyTypeCheck($.constructorNameFallback$closure, "$isFunction");
},

getTypeNameOf: function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $.stringTypeCheck($._getTypeNameOf.call$1(obj));
},

toStringForNativeObject: function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
},

hashCodeForNativeObject: function(object) {
  return $.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, $.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
},

isDartObject: function(obj) {
  return obj instanceof $.Object;
},

defineNativeMethods: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon($.stringTypeCheck(tags), interceptorClass, true);
},

defineNativeMethodsNonleaf: function(tags, interceptorClass) {
  $.defineNativeMethodsCommon($.stringTypeCheck(tags), interceptorClass, false);
},

defineNativeMethodsCommon: function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
},

defineNativeMethodsFinish: function() {
},

lookupInterceptor: function(hasOwnPropertyFunction, tag) {
  var map = $.interceptorsByTag;
  if (map == null)
    return;
  return $.callHasOwnProperty(hasOwnPropertyFunction, map, tag) ? $.propertyGet(map, tag) : null;
},

lookupDispatchRecord: function(obj) {
  var hasOwnPropertyFunction, tag, interceptor, secondTag, t1;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  $.assertHelper(!$.isDartObject(obj));
  tag = $.getTypeNameOf(obj);
  interceptor = $.lookupInterceptor(hasOwnPropertyFunction, tag);
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null)
      interceptor = $.lookupInterceptor(hasOwnPropertyFunction, secondTag);
  }
  if (interceptor == null)
    return;
  t1 = $.leafTags;
  if (t1 != null && t1[tag] === true)
    return $.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return $.makeDispatchRecord(interceptor, Object.getPrototypeOf(obj), null, null);
},

stringReplaceJS: function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
},

stringReplaceAllUnchecked: function(receiver, from, to) {
  var result, $length, i, t1;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.write$1(result, to);
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to);
}}],
["asset", "asset.dart", , {
Asset: {"": "Object;_mesh,_mtl,_obj,_shader,_texture",
  get$mesh: function() {
    return this._mesh;
  },
  get$mtl: function() {
    return this._mtl;
  },
  get$obj: function() {
    return this._obj;
  },
  get$shader: function() {
    return this._shader;
  },
  get$texture: function() {
    return this._texture;
  },
  setRoot$1: function(root) {
    this._mesh = root + "mesh";
    this._mtl = root + "mtl";
    this._obj = root + "obj";
    this._shader = root + "shader";
    this._texture = root + "texture";
  },
  Asset$1: function(root) {
    this.setRoot$1(root);
  },
  $isAsset: true
},

Asset$: function(root) {
  var t1 = new $.Asset(null, null, null, null, null);
  t1.Asset$1(root);
  return t1;
}}],
["camera", "camera.dart", , {
Camera: {"": "Object;degreesPerSec,camOrbitRadius,eye,center,up,oldAngle,angle",
  getRad$1: function(interpolation) {
    var t1, t2, deg;
    $.doubleTypeCheck(interpolation);
    t1 = this.angle;
    t2 = this.oldAngle;
    if (t1 > t2) {
      if (interpolation == null)
        throw interpolation.$mul();
      deg = interpolation * (t1 - t2) + t2;
    } else {
      if (interpolation == null)
        throw interpolation.$mul();
      deg = interpolation * (t1 + 360 - t2) + t2;
    }
    return deg * 3.141592653589793 / 180;
  },
  _liblib4$_update$1: function(gameTime) {
    $.doubleTypeCheck(gameTime);
    this.oldAngle = $.doubleTypeCheck(this.angle);
    if (gameTime == null)
      throw gameTime.$mul();
    this.angle = $.JSDouble_methods.$mod(gameTime * this.degreesPerSec, 360);
  },
  update$1: function(_, gameLoop) {
    this._liblib4$_update$1(gameLoop.get$gameTime());
  },
  render$1: function(gameLoop) {
    var r, t1, t2;
    r = $.doubleTypeCheck(this.getRad$1(gameLoop.get$renderInterpolationFactor()));
    t1 = this.eye;
    t2 = this.camOrbitRadius;
    t1.$indexSet(t1, 0, t2 * $.sin(r));
    t1.$indexSet(t1, 2, t2 * $.cos(r));
  },
  Camera$3: function(eye, center, up) {
    this._liblib4$_update$1(0);
  },
  $isCamera: true
},

Camera$: function(eye, center, up) {
  var t1;
  $.doubleTypeCheck(30);
  $.doubleTypeCheck(15);
  $.doubleTypeCheck(0);
  t1 = new $.Camera(30, 15, eye, center, up, 0, 0);
  t1.Camera$3(eye, center, up);
  return t1;
}}],
["cookies", "cookies/cookies.dart", , {
Cookie__readCookie_closure: {"": "Closure;cookie_0",
  call$1: function(t) {
    var t1, k, t2;
    t1 = $.getInterceptor$asx(t);
    k = t1.indexOf$1(t, "=");
    if (k == null)
      throw k.$gt();
    if (k > 0) {
      t2 = this.cookie_0;
      t2.$indexSet(t2, $.Uri_decodeComponent(t1.substring$2(t, 0, k)), $.Uri_decodeComponent(t1.substring$1(t, k + 1)));
    }
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

Cookie__readCookie: function() {
  var cookie = $.Map_Map(null, null);
  $.JSArray_methods.forEach$1($.document().cookie.split(";"), new $.Cookie__readCookie_closure(cookie));
  return cookie;
},

Cookie_getCookie: function($name) {
  var t = $.Cookie__readCookie();
  if (t.containsKey$1(t, $name))
    return $.stringTypeCheck(t.$index(t, $name));
  return;
}}],
["dart._collection.dev", "dart:_collection-dev", , {
ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return $.assertSubtype($.ListIterator$(this, $.getRuntimeTypeArgument(this, "ListIterable", 0)), "$isIterator", [$.getRuntimeTypeArgument(this, "ListIterable", 0)], "$asIterator");
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var $length, i, element, $arguments, t1;
    $.assertFunctionSubtype(test, "bool__E2", "ListIterable", this);
    $.assertFunctionSubtype(orElse, "Object_");
    $length = this.get$length(this);
    if ($length == null)
      return this.firstWhere$2$orElse$bailout1(1, $length, orElse, test);
    for (i = 0; i < $length; ++i) {
      element = this.elementAt$1(this, i);
      $arguments = $.substitute(this.$asListIterable, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(element, t1);
      if ($.boolConversionCheck(test.call$1(element)))
        return element;
      if ($length !== this.get$length(this))
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
    if (orElse != null)
      return orElse.call$0();
    throw $.wrapException($.StateError$("No matching element"));
  },
  firstWhere$2$orElse$bailout1: function(state0, $length, orElse, test) {
    var i, element, $arguments, t1;
    for (i = 0; $.JSInt_methods.$lt(i, $length); ++i) {
      element = this.elementAt$1(this, i);
      $arguments = $.substitute(this.$asListIterable, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(element, t1);
      if ($.boolConversionCheck(test.call$1(element)))
        return element;
      t1 = this.get$length(this);
      if ($length == null ? t1 != null : $length !== t1)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
    if (orElse != null)
      return orElse.call$0();
    throw $.wrapException($.StateError$("No matching element"));
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  skip$1: function(_, count) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(this, $.intTypeCheck(count), null, null), "$isIterable");
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List(null, $.getRuntimeTypeArgument(this, "ListIterable", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
      $.interceptedTypeCheck(result, "$isList");
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, "ListIterable", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      $.interceptedTypeCheck(result, "$isList");
    }
    if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !$.isJsIndexable(result, result[$.dispatchPropertyName]))
      return this.toList$1$growable$bailout1(1, result);
    for (i = 0; $.JSInt_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return $.interceptedTypeCheck(result, "$isList");
  },
  toList$1$growable$bailout1: function(state0, result) {
    var t1, i;
    for (t1 = $.getInterceptor$ax(result), i = 0; $.JSInt_methods.$lt(i, this.get$length(this)); ++i)
      t1.$indexSet(result, i, this.elementAt$1(this, i));
    return $.interceptedTypeCheck(result, "$isList");
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 != null) {
      if (t1 == null)
        throw t1.$gt();
      t2 = $.JSInt_methods.$gt(t1, $length);
    } else
      t2 = true;
    if (t2)
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if (t1 == null)
      throw t1.$gt();
    if ($.JSInt_methods.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if ($length == null)
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (t1 == null)
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 == null)
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if (t1 == null)
          throw t1.$ge();
        if ($.JSInt_methods.$ge(t1, $length))
          return 0;
        t2 = this._endOrLength;
      case 3:
        var t3;
        state0 = 0;
        if (t2 != null) {
          if (t2 == null)
            throw t2.$ge();
          t3 = $.JSInt_methods.$ge(t2, $length);
        } else
          t3 = true;
        if (t3) {
          if ($length == null)
            throw $length.$sub();
          return $length - t1;
        }
        if (t2 == null)
          throw t2.$sub();
        return t2 - t1;
    }
  },
  elementAt$1: function(_, index) {
    var t1, t2, $arguments;
    $.intTypeCheck(index);
    if (index == null)
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (t1 == null)
      return this.elementAt$1$bailout2(2, index, t1);
    t1 += index;
    if (index >= 0) {
      t2 = this.get$_endIndex();
      if (t2 == null)
        return this.elementAt$1$bailout2(3, index, t1, t2);
      t2 = t1 >= t2;
    } else
      t2 = true;
    if (t2) {
      t1 = this.get$length(this);
      throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + t1));
    }
    t1 = $.elementAt$1$ax(this._iterable, t1);
    $arguments = $.getRuntimeTypeArguments(this, "SubListIterable");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  elementAt$1$bailout2: function(state0, index, t1, t2) {
    switch (state0) {
      case 0:
        $.intTypeCheck(index);
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        if (t1 == null)
          throw t1.$add();
        t1 = $.JSInt_methods.$add(t1, index);
        if (index == null)
          throw index.$lt();
      case 3:
        var $arguments;
        if (state0 === 3 || state0 === 0 && index >= 0)
          switch (state0) {
            case 0:
              t2 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t2 = $.$ge$n(t1, t2);
          }
        else
          t2 = true;
        if (t2) {
          t1 = this.get$length(this);
          throw $.wrapException(new $.RangeError("value " + index + " not in range 0.." + t1));
        }
        t1 = $.elementAt$1$ax(this._iterable, t1);
        $arguments = $.getRuntimeTypeArguments(this, "SubListIterable");
        return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    }
  },
  skip$1: function(_, count) {
    var t1;
    $.intTypeCheck(count);
    if (count == null)
      throw count.$lt();
    if (count < 0)
      throw $.wrapException($.RangeError$value(count));
    t1 = this._start;
    if (t1 == null)
      throw t1.$add();
    return $.listSuperNativeTypeCheck($.SubListIterable$(this._iterable, t1 + count, this._endOrLength, null), "$isIterable");
  },
  SubListIterable$3: function(_iterable, _start, _endOrLength, E) {
    var t1, t2;
    $.listSuperNativeTypeCheck(_iterable, "$isIterable");
    $.intTypeCheck(_start);
    t1 = this._start;
    if (t1 == null)
      throw t1.$lt();
    if (t1 < 0)
      throw $.wrapException($.RangeError$value(t1));
    t2 = this._endOrLength;
    if (t2 != null) {
      if (t2 == null)
        throw t2.$lt();
      if (t2 < 0)
        throw $.wrapException($.RangeError$value(t2));
      if (t1 > t2)
        throw $.wrapException($.RangeError$range(t1, 0, t2));
    }
  },
  $asListIterable: null,
  $asListIterable: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
},

ListIterator: {"": "Object;_iterable,_liblib1$_length,_index,_current@",
  get$current: function() {
    var t1, $arguments;
    t1 = this._current;
    $arguments = $.getRuntimeTypeArguments(this, "ListIterator");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = $.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if ($length == null)
      return this.moveNext$0$bailout(1, t2, t1, $length);
    if (this._liblib1$_length !== $length)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this.set$_current(null);
      return false;
    }
    this.set$_current(t2.elementAt$1(t1, t3));
    this._index = this._index + 1;
    return true;
  },
  moveNext$0$bailout: function(state0, t2, t1, $length) {
    var t3 = this._liblib1$_length;
    if (t3 == null ? $length != null : t3 !== $length)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    if ($.JSInt_methods.$ge(this._index, $length)) {
      this.set$_current(null);
      return false;
    }
    this.set$_current(t2.elementAt$1(t1, this._index));
    this._index = this._index + 1;
    return true;
  },
  $isIterator: true,
  $asObject: null
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.assertSubtype($.MappedIterator$(t1.get$iterator(t1), this._f, $.getRuntimeTypeArgument(this, "MappedIterable", 0), $.getRuntimeTypeArgument(this, "MappedIterable", 1)), "$isIterator", [$.getRuntimeTypeArgument(this, "MappedIterable", 1)], "$asIterator");
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return $.assertSubtypeOfRuntimeType(this._f$1(t1.elementAt$1(t1, index)), $.getRuntimeTypeArgument(this, "MappedIterable", 1));
  },
  $asIterableBase: function (S, T) { return [T]; },
  $asIterableBase: function (S, T) { return [T]; },
  $asObject: null,
  $asIterable: function (S, T) { return [T]; }
},

MappedIterator: {"": "Iterator;_current@,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if ($.boolConversionCheck(t1.moveNext$0())) {
      this.set$_current(this._f$1(t1.get$current()));
      return true;
    }
    this.set$_current(null);
    return false;
  },
  get$current: function() {
    var t1, $arguments;
    t1 = this._current;
    $arguments = $.getRuntimeTypeArguments(this, "MappedIterator");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
  },
  $asIterator: function (S, T) { return [T]; },
  $asObject: null
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    return $.assertSubtype($.WhereIterator$($.get$iterator$ax(this._iterable), this._f, $.getRuntimeTypeArgument(this, "WhereIterable", 0)), "$isIterator", [$.getRuntimeTypeArgument(this, "WhereIterable", 0)], "$asIterator");
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; $.boolConversionCheck(t1.moveNext$0());)
      if ($.boolConversionCheck(this._f$1(t1.get$current())))
        return true;
    return false;
  },
  get$current: function() {
    var t1, $arguments;
    t1 = this._iterator.get$current();
    $arguments = $.getRuntimeTypeArguments(this, "WhereIterator");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  $asIterator: null,
  $asObject: null
},

SkipIterable: {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    var t1;
    $.intTypeCheck(n);
    if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
      throw $.wrapException($.RangeError$value(n));
    t1 = this._skipCount;
    if (t1 == null)
      throw t1.$add();
    return $.listSuperNativeTypeCheck($.SkipIterable$(this._iterable, $.JSInt_methods.$add(t1, n), $.getRuntimeTypeArgument(this, "SkipIterable", 0)), "$isIterable");
  },
  get$iterator: function(_) {
    return $.assertSubtype($.SkipIterator$($.get$iterator$ax(this._iterable), this._skipCount, $.getRuntimeTypeArgument(this, "SkipIterable", 0)), "$isIterator", [$.getRuntimeTypeArgument(this, "SkipIterable", 0)], "$asIterator");
  },
  SkipIterable$2: function(_iterable, _skipCount, E) {
    var t1, t2;
    $.listSuperNativeTypeCheck(_iterable, "$isIterable");
    $.intTypeCheck(_skipCount);
    t1 = this._skipCount;
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      if (t1 == null)
        throw t1.$lt();
      t2 = t1 < 0;
    } else
      t2 = true;
    if (t2)
      throw $.wrapException($.RangeError$(t1));
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
},

SkipIterator: {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (t2 == null)
        return this.moveNext$0$bailout1(1, t2, t1, i);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  moveNext$0$bailout1: function(state0, t2, t1, i) {
    switch (state0) {
      case 0:
        t1 = this._iterator;
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this._skipCount;
              case 1:
                state0 = 0;
                if (!$.JSInt_methods.$lt(i, t2))
                  break L0;
                t1.moveNext$0();
                ++i;
            }
        this._skipCount = 0;
        return t1.moveNext$0();
    }
  },
  get$current: function() {
    var t1, $arguments;
    t1 = this._iterator.get$current();
    $arguments = $.getRuntimeTypeArguments(this, "SkipIterator");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  SkipIterator$2: function(_iterator, _skipCount, E) {
    var t1;
    $.assertSubtype(_iterator, "$isIterator", [E], "$asIterator");
    t1 = this._skipCount;
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      if (t1 == null)
        throw t1.$ge();
      t1 = t1 >= 0;
    } else
      t1 = false;
    $.assertHelper(t1);
  },
  $asIterator: null,
  $asObject: null
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    $.intTypeCheck(newLength);
    throw $.wrapException(new $.UnsupportedError("Cannot change the length of a fixed-length list"));
  },
  add$1: function(receiver, value) {
    var $arguments = $.getRuntimeTypeArguments(receiver, "FixedLengthListMixin");
    $.assertSubtypeOfRuntimeType(value, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    throw $.wrapException(new $.UnsupportedError("Cannot add to a fixed-length list"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from a fixed-length list"));
  }
},

ToString__emitPair_closure: {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0) {
      t2 = this.result_1;
      t2.write$1(t2, ", ");
    }
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_dynamic__int_dynamic: true,
  $is_bool__DigitalButtonEvent_bool: true,
  $is_void__GameLoop_GameLoopTouch: true,
  $is_void__int_String: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__K_V0: true,
  $is_void__RenderingContext_GameLoopHtml: true,
  $is_void__String_String: true
},

Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3, t4;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.isJsIndexable(src, src[$.dispatchPropertyName])))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.isJsIndexable(dst, dst[$.dispatchPropertyName]))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (dstStart == null)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  $.intTypeCheck(count);
  if (count == null)
    return $.Arrays_copy$bailout(2, src, srcStart, dst, dstStart, count);
  if (srcStart == null)
    throw srcStart.$lt();
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = srcStart + count, t2 = src.length, t3 = dst.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      t4 = src[i];
      if (j < 0 || j >= t3)
        throw $.ioore(j);
      dst[j] = t4;
    }
},

Arrays_copy$bailout: function(state0, src, srcStart, dst, dstStart, count) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.intTypeCheck(count);
    case 2:
      var t1, i, j, t2;
      state0 = 0;
      t1 = $.getInterceptor$n(srcStart);
      if (srcStart == null)
        throw srcStart.$lt();
      if (t1.$lt(srcStart, dstStart)) {
        i = t1.$add(srcStart, count) - 1;
        if (dstStart == null)
          throw dstStart.$add();
        j = $.JSInt_methods.$add(dstStart, count) - 1;
        t1 = $.getInterceptor$asx(src);
        for (; i >= srcStart; --i, --j)
          $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
      } else {
        t2 = $.getInterceptor$asx(src);
        j = dstStart;
        i = srcStart;
        while (i < t1.$add(srcStart, count)) {
          $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
          ++i;
          if (j == null)
            throw j.$add();
          ++j;
        }
      }
  }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var t1, i;
  t1 = a.length;
  if (startIndex >= t1)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= t1)
      throw $.ioore(i);
    if ($.$eq(a[i], element))
      return i;
  }
  return -1;
},

SubListIterable$: function(_iterable, _start, _endOrLength, E) {
  var t1;
  $.listSuperNativeTypeCheck(_iterable, "$isIterable");
  $.intTypeCheck(_start);
  t1 = new $.SubListIterable($.listSuperNativeTypeCheck(_iterable, "$isIterable"), _start, _endOrLength);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SubListIterable$3(_iterable, _start, _endOrLength, E);
  return t1;
},

ListIterator$: function(iterable, E) {
  var t1;
  $.listSuperNativeTypeCheck(iterable, "$isIterable");
  t1 = $.get$length$asx(iterable);
  t1 = new $.ListIterator($.listSuperNativeTypeCheck(iterable, "$isIterable"), t1, 0, $.assertSubtypeOfRuntimeType(null, E));
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

MappedIterable$: function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable($.listSuperNativeTypeCheck($.listSuperNativeTypeCheck(_iterable, "$isIterable"), "$isIterable"), _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
},

MappedIterator$: function(_iterator, _f, S, T) {
  var t1;
  $.assertSubtype(_iterator, "$isIterator", [S], "$asIterator");
  t1 = new $.MappedIterator($.assertSubtypeOfRuntimeType(null, T), $.assertSubtype(_iterator, "$isIterator", [S], "$asIterator"), _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
},

WhereIterable$: function(_iterable, _f, E) {
  var t1 = new $.WhereIterable($.listSuperNativeTypeCheck($.listSuperNativeTypeCheck(_iterable, "$isIterable"), "$isIterable"), _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

WhereIterator$: function(_iterator, _f, E) {
  var t1 = new $.WhereIterator($.assertSubtype($.assertSubtype(_iterator, "$isIterator", [E], "$asIterator"), "$isIterator", [E], "$asIterator"), _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

SkipIterable$: function(_iterable, _skipCount, E) {
  var t1;
  $.listSuperNativeTypeCheck(_iterable, "$isIterable");
  $.intTypeCheck(_skipCount);
  t1 = new $.SkipIterable($.listSuperNativeTypeCheck(_iterable, "$isIterable"), _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterable$2(_iterable, _skipCount, E);
  return t1;
},

SkipIterator$: function(_iterator, _skipCount, E) {
  var t1;
  $.assertSubtype(_iterator, "$isIterator", [E], "$asIterator");
  t1 = new $.SkipIterator($.assertSubtype(_iterator, "$isIterator", [E], "$asIterator"), _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterator$2(_iterator, _skipCount, E);
  return t1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1, t2, $arguments, t3;
  $.assertFunctionSubtype(f, "void__dynamic");
  for (t1 = $.JSArray_methods.get$iterator(iterable); t1.moveNext$0();) {
    t2 = t1._current;
    $arguments = $.substitute($.getField(t1, "$asListIterator"), $.getRuntimeTypeInfo(t1));
    if ($arguments == null)
      t3 = null;
    else {
      $.assertHelper($.isJsArray($arguments));
      t3 = $arguments[0];
    }
    f.call$1($.assertSubtypeOfRuntimeType(t2, t3));
  }
},

IterableMixinWorkaround_firstWhere: function(iterable, test, orElse) {
  var t1, t2, $arguments, t3;
  $.assertFunctionSubtype(test, "bool__dynamic");
  $.assertFunctionSubtype(orElse, "dynamic_");
  for (t1 = $.JSArray_methods.get$iterator(iterable); t1.moveNext$0();) {
    t2 = t1._current;
    $arguments = $.substitute($.getField(t1, "$asListIterator"), $.getRuntimeTypeInfo(t1));
    if ($arguments == null)
      t3 = null;
    else {
      $.assertHelper($.isJsArray($arguments));
      t3 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(t2, t3);
    if ($.boolConversionCheck(test.call$1(t2)))
      return t2;
  }
  throw $.wrapException($.StateError$("No matching element"));
},

IterableMixinWorkaround_where: function(iterable, f) {
  return $.WhereIterable$(iterable, $.assertFunctionSubtype(f, "bool__dynamic"), null);
},

IterableMixinWorkaround_skipList: function(list, n) {
  return $.SubListIterable$(list, n, null, null);
},

IterableMixinWorkaround_indexOfList: function(list, element, start) {
  return $.Arrays_indexOf(list, element, start, list.length);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw $.wrapException($.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw $.wrapException($.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw $.wrapException($.ArgumentError$(skipCount));
  otherStart = skipCount;
  otherList = from;
  if ($.JSInt_methods.$gt(otherStart + $length, $.get$length$asx(otherList)))
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
},

ToString_iterableToString: function(i) {
  var result = $.StringBuffer$("");
  $.ToString__emitValue(i, result, $.List_List(null, null));
  return result.toString$0(result);
},

ToString__emitValue: function(i, result, visiting) {
  var t1, isList, t2, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(result, isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; $.boolConversionCheck(t2.moveNext$0()); first = false) {
    e = t2.get$current();
    if (!first) {
      result.write$1;
      result._contents = result._contents + ", ";
    }
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
},

ToString__emitObject: function(o, result, visiting) {
  if (typeof o !== "string")
    return $.ToString__emitObject$bailout(1, o, result, visiting);
  result.write$1;
  result._contents = $.Primitives_stringConcatUnchecked(result._contents, o);
},

ToString__emitObject$bailout: function(state0, o, result, visiting) {
  var t1, str;
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable))
    if ($.ToString__containsRef(visiting, o)) {
      t1 = typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}";
      result.write$1;
      result._contents = $.Primitives_stringConcatUnchecked(result._contents, t1);
    } else
      $.ToString__emitValue(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o)) {
      result.write$1;
      result._contents = $.Primitives_stringConcatUnchecked(result._contents, "{...}");
    } else
      $.ToString__emitPair(o, result, visiting);
  else {
    result.write$1;
    str = $.stringTypeCheck(typeof o === "string" ? o : $.S(o));
    result._contents = $.Primitives_stringConcatUnchecked(result._contents, str);
  }
},

ToString__containsRef: function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); $.boolConversionCheck(t1.moveNext$0());)
    if (t1.get$current() === ref)
      return true;
  return false;
},

ToString_mapToString: function(m) {
  var result = $.StringBuffer$("");
  $.ToString__emitPair(m, result, $.List_List(null, null));
  return result.toString$0(result);
},

ToString__emitPair: function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1(result, "{");
  t1.first_0 = true;
  $.forEach$1$ax(m, new $.ToString__emitPair_closure(t1, result, visiting));
  result.write$1(result, "}");
  t2.removeLast$0(visiting);
}}],
["dart.async", "dart:async", , {
Future: {"": "Object;", $isFuture: true},

_Completer: {"": "Object;",
  complete$1: function(_, value) {
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_Completer", 0));
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._zone.cancelCallbackExpectation$0();
    this._setFutureValue$1(value);
  },
  complete$0: function($receiver) {
    return this.complete$1($receiver, null);
  },
  completeError$2: function(error, stackTrace) {
    var futureImpl;
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    futureImpl = this.future;
    if (futureImpl._inSameErrorZone$1($._Zone_current())) {
      futureImpl._zone.cancelCallbackExpectation$0();
      this._setFutureError$1(error);
    } else
      $._Zone_current().handleUncaughtError$1(error);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  _Completer$0: function(T) {
    this.future._zone.expectCallback$0();
  },
  $isCompleter: true,
  $asObject: null
},

_AsyncCompleter: {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    this.future._asyncSetValue$1($.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_AsyncCompleter", 0)));
  },
  _setFutureError$1: function(error) {
    this.future._asyncSetError$1(error);
  },
  $as_Completer: null,
  $as_Completer: null,
  $asObject: null,
  $asCompleter: null
},

_FutureListenerWrapper: {"": "Object;future,_nextListener<",
  set$_nextListener: function(v) {
    this._nextListener = $.propertyTypeCheck(v, "$is_FutureListener");
  },
  _sendValue$1: function(value) {
    var $arguments = $.getRuntimeTypeArguments(this, "_FutureListenerWrapper");
    this.future._setValueUnchecked$1($.assertSubtypeOfRuntimeType(value, $.isNull($arguments) ? null : $.getIndex($arguments, 0)));
  },
  _sendError$1: function(error) {
    this.future._setErrorUnchecked$1(error);
  },
  _inSameErrorZone$1: function(otherZone) {
    return this.future._inSameErrorZone$1(otherZone);
  },
  $is_FutureListener: true,
  $asObject: null
},

_ErrorZoneBoundaryListener: {"": "Object;_nextListener<,_listener",
  set$_nextListener: function(v) {
    this._nextListener = $.propertyTypeCheck(v, "$is_FutureListener");
  },
  _inSameErrorZone$1: function(otherZone) {
    throw $.wrapException($.UnsupportedError$("A Zone boundary doesn't support the inSameErrorZone test."));
  },
  _sendValue$1: function(value) {
    this._listener._sendValue$1(value);
  },
  _sendError$1: function(error) {
    $.get$_Zone__current().handleUncaughtError$1(error);
  },
  $is_FutureListener: true,
  $as_FutureListener: function () { return [null]; },
  $asObject: null
},

_FutureImpl: {"": "Object;_state,_zone<,_resultOrListeners<",
  get$_isChained: function() {
    return (this._state & 2) !== 0;
  },
  get$_isComplete: function() {
    return this._state >= 8;
  },
  get$_mayComplete: function() {
    return this._state === 0;
  },
  get$_hasValue: function() {
    return this._state === 8;
  },
  get$_hasError: function() {
    return this._state >= 12;
  },
  get$_hasUnhandledError: function() {
    return this._state >= 16;
  },
  _clearUnhandledError$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    $.assertFunctionSubtype(f, "dynamic__T", "_FutureImpl", this);
    $.assertFunctionSubtype(onError, "dynamic__dynamic");
    if (onError == null) {
      t1 = new $._ThenFuture(f, null, 0, $._Zone_current().fork$0(), null);
      $.setRuntimeTypeInfo(t1, [null, null]);
      t1._TransformFuture$0(null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    $.assertFunctionSubtype(f, "dynamic__S", "_SubscribeFuture", null, [null, null]);
    t1 = new $._SubscribeFuture(onError, f, null, 0, $._Zone_current().fork$0(), null);
    $.setRuntimeTypeInfo(t1, [null, null]);
    t1._TransformFuture$0(null, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    $.assertFunctionSubtype(f, "dynamic__dynamic");
    t1 = new $._CatchErrorFuture($.assertFunctionSubtype(test, "bool__dynamic"), f, null, 0, $._Zone_current().fork$0(), null);
    $.setRuntimeTypeInfo(t1, [null]);
    t1._TransformFuture$0(null, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _inSameErrorZone$1: function(otherZone) {
    return this._zone.inSameErrorZone$1(otherZone);
  },
  _setValue$1: function(value) {
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_FutureImpl", 0));
    if (!this.get$_mayComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    this._setValueUnchecked$1(value);
  },
  get$_setValue: function() {
    return new $.Bound__setValue__FutureImpl(this, "_setValue$1", null);
  },
  _setValueUnchecked$1: function(value) {
    var listeners, listeners0;
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_FutureImpl", 0));
    listeners = this.get$_isChained() ? null : this._removeListeners$0();
    this._state = 8;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  _setError$1: function(error) {
    if (!this.get$_mayComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    this._setErrorUnchecked$1(error);
  },
  get$_setError: function() {
    return new $.Bound__setError__FutureImpl(this, "_setError$1", null);
  },
  _setErrorUnchecked$1: function(error) {
    var hasListeners, listeners, listeners0;
    if (this.get$_isChained()) {
      hasListeners = this._state === 2;
      listeners = null;
    } else {
      listeners = this._removeListeners$0();
      hasListeners = listeners != null;
    }
    this._state = 12;
    this._resultOrListeners = error;
    if (!hasListeners) {
      this._scheduleUnhandledError$0();
      return;
    }
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
    }
  },
  _asyncSetValue$1: function(value) {
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_FutureImpl", 0));
    if (!this.get$_mayComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    this._state = 1;
    $.runAsync(new $._FutureImpl__asyncSetValue_closure(this, value));
  },
  _asyncSetError$1: function(error) {
    if (!this.get$_mayComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    this._state = 1;
    $.runAsync(new $._FutureImpl__asyncSetError_closure(this, error));
  },
  _scheduleUnhandledError$0: function() {
    $.assertHelper(this._state === 12);
    this._state = 28;
    $.runAsync(new $._FutureImpl__scheduleUnhandledError_closure(this));
  },
  _addListener$1: function(listener) {
    var t1, t2, future, t3, currentZone;
    t1 = {};
    t1.listener_0 = listener;
    $.assertHelper(t1.listener_0.get$_nextListener() == null);
    t2 = t1.listener_0;
    if (!t2._inSameErrorZone$1(this._zone))
      t1.listener_0 = new $._ErrorZoneBoundaryListener(null, t2);
    t2 = this._state;
    if ((t2 & 2) !== 0) {
      this._state = 2;
      $.assertHelper(this.get$_isChained());
      future = $.propertyTypeCheck(this._resultOrListeners, "$is_FutureImpl");
      if (future.get$_isChained()) {
        future = future.get$_chainSource();
        this._resultOrListeners = future;
      }
      future._addListener$1(t1.listener_0);
      return;
    }
    t3 = t2 >= 8;
    if (t3) {
      this._state = (t2 & 4294967279) >>> 0;
      t1 = new $._FutureImpl__addListener_closure(t1, this);
      $.assertFunctionSubtype(t1, "void_");
      currentZone = $.get$_Zone__current();
      currentZone.runAsync$2(t1, currentZone);
    } else {
      $.assertHelper(!t3);
      t1.listener_0.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = t1.listener_0;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    $.assertHelper(!this.get$_isComplete());
    current = $.propertyTypeCheck(this._resultOrListeners, "$is_FutureListener");
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (!this.get$_isComplete())
      future._chainFromFuture$1(this);
    else if (this.get$_hasValue())
      future._setValue$1(this._resultOrListeners);
    else {
      $.assertHelper(this.get$_hasError());
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  get$_chainSource: function() {
    $.assertHelper(this.get$_isChained());
    var future = $.propertyTypeCheck(this._resultOrListeners, "$is_FutureImpl");
    if (future.get$_isChained()) {
      future = future.get$_chainSource();
      this._resultOrListeners = future;
    }
    return future;
  },
  _chainFromFuture$1: function(resultSource) {
    var cursor, cursor0, cursor1;
    $.assertHelper(!this.get$_isComplete());
    $.assertHelper(!this.get$_isChained());
    if (resultSource.get$_isChained())
      resultSource = resultSource.get$_chainSource();
    $.assertHelper(!resultSource.get$_isChained());
    if (this === resultSource) {
      this._setError$1($.StateError$("Cyclic future dependency."));
      return;
    }
    cursor = this._removeListeners$0();
    for (cursor0 = cursor; cursor0 != null; cursor0 = cursor1) {
      cursor1 = cursor0.get$_nextListener();
      cursor0.set$_nextListener(null);
      resultSource._addListener$1(cursor0);
    }
    resultSource._addListener$1(this._asListener$0());
    this._resultOrListeners = resultSource;
    this._state = cursor != null ? 2 : 6;
  },
  _setOrChainValue$1: function(result) {
    $.assertHelper(!this.get$_isChained());
    $.assertHelper(!this.get$_isComplete());
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture)
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListener__FutureListener$wrap(this, null);
  },
  _FutureImpl$immediate$1: function(value, T) {
    $.assertSubtypeOfRuntimeType(value, T);
    this._state = 8;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true,
  $asObject: null
},

_FutureImpl__FutureImpl$wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__dynamic", void: true, args: [null]}; }
},

_FutureImpl__FutureImpl$wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Object", args: [$.Object]}; }
},

_FutureImpl__asyncSetValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._setValueUnchecked$1(this.value_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_FutureImpl__asyncSetError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    this.this_0._setErrorUnchecked$1(this.error_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_FutureImpl__scheduleUnhandledError_closure: {"": "Closure;this_0",
  call$0: function() {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      t1.get$_zone().handleUncaughtError$1(error);
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_FutureImpl__addListener_closure: {"": "Closure;box_0,this_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_1;
    t2 = this.box_0;
    if (t1.get$_hasValue()) {
      value = $.assertSubtypeOfRuntimeType(t1.get$_resultOrListeners(), $.getRuntimeTypeArgument(t1, "_FutureImpl", 0));
      t2.listener_0._sendValue$1(value);
    } else {
      $.assertHelper(t1.get$_hasError());
      t2.listener_0._sendError$1(t1.get$_resultOrListeners());
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_TransformFuture: {"": "_FutureImpl;_nextListener<",
  set$_nextListener: function(v) {
    this._nextListener = $.propertyTypeCheck(v, "$is_FutureListener");
  },
  _sendValue$1: function(value) {
    var $arguments, t1, t2;
    $arguments = $.getRuntimeTypeArguments(this, "_TransformFuture");
    t1 = this._zone;
    t2 = new $._TransformFuture__sendValue_closure(this, $.assertSubtypeOfRuntimeType(value, $.isNull($arguments) ? null : $.getIndex($arguments, 0)));
    $.assertFunctionSubtype(t2, "void_");
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runUnguarded$1(t2);
  },
  _sendError$1: function(error) {
    var t1, t2;
    t1 = this._zone;
    t2 = new $._TransformFuture__sendError_closure(this, error);
    $.assertFunctionSubtype(t2, "void_");
    t1._openCallbacks = t1._openCallbacks - 1;
    t1._runUnguarded$1(t2);
  },
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  _TransformFuture$0: function(S, T) {
    this._zone.expectCallback$0();
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asObject: null,
  $asFuture: function (S, T) { return [T]; },
  $as_FutureListener: function (S, T) { return [S]; },
  $is_FutureListener: true
},

_TransformFuture__sendValue_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    return this.this_0._zonedSendValue$1(this.value_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_TransformFuture__sendError_closure: {"": "Closure;this_0,error_1",
  call$0: function() {
    return this.this_0._zonedSendError$1(this.error_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_ThenFuture: {"": "_TransformFuture;_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    var result, e, s, exception, t1;
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_ThenFuture", 0));
    $.assertHelper(true);
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _zonedSendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asObject: null,
  $asFuture: function (S, T) { return [T]; },
  $as_FutureListener: function (S, T) { return [S]; }
},

_CatchErrorFuture: {"": "_TransformFuture;_test,_onError,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendValue$1: function(value) {
    this._setValue$1($.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "_CatchErrorFuture", 0)));
  },
  _zonedSendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    $.assertHelper(true);
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asObject: null,
  $asFuture: null,
  $as_FutureListener: null
},

_SubscribeFuture: {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_zone,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _zonedSendError$1: function(error) {
    var result, e, s, exception, t1;
    $.assertHelper(this._onError != null);
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_ThenFuture: null,
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asObject: null,
  $asFuture: function (S, T) { return [T]; },
  $as_FutureListener: function (S, T) { return [S]; }
},

Stream: {"": "Object;",
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = $.assertSubtype($._FutureImpl$($.JSInt), "$is_FutureImpl", [$.JSInt], "$as_FutureImpl");
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return $.assertSubtype(future, "$isFuture", [$.JSInt], "$asFuture");
  },
  firstWhere$2$defaultValue: function(_, test, defaultValue) {
    var t1, future;
    t1 = {};
    $.assertFunctionSubtype(test, "bool__T", "Stream", this);
    $.assertFunctionSubtype(defaultValue, "Object_");
    future = $.assertSubtype($._FutureImpl$(null), "$is_FutureImpl", [null], "$as_FutureImpl");
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_firstWhere_closure(t1, test, future), true, new $.Stream_firstWhere_closure0(defaultValue, future), future.get$_setError());
    return $.assertSubtype(future, "$isFuture", [null], "$asFuture");
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$defaultValue($receiver, test, null);
  },
  $isStream: true
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

Stream_firstWhere_closure: {"": "Closure;box_0,test_1,future_2",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = this.future_2;
    $._runUserCode(new $.Stream_firstWhere__closure(this.test_1, value), new $.Stream_firstWhere__closure0(t1, t2, value), $._cancelAndError(t1.subscription_0, t2));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

Stream_firstWhere__closure: {"": "Closure;test_3,value_4",
  call$0: function() {
    return this.test_3.call$1(this.value_4);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

Stream_firstWhere__closure0: {"": "Closure;box_0,future_5,value_6",
  call$1: function(isMatch) {
    var t1;
    if ($.boolTypeCheck(isMatch)) {
      t1 = this.box_0.subscription_0;
      t1.cancel$0(t1);
      this.future_5._setValue$1(this.value_6);
    }
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__bool", args: [$.JSBool]}; }
},

Stream_firstWhere_closure0: {"": "Closure;defaultValue_7,future_8",
  call$0: function() {
    var t1, t2;
    t1 = this.defaultValue_7;
    if (t1 != null) {
      t2 = this.future_8;
      $._runUserCode(t1, t2.get$_setValue(), t2.get$_setError());
      return;
    }
    this.future_8._setError$1($.StateError$("firstMatch ended without match"));
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

StreamSubscription: {"": "Object;", $isStreamSubscription: true},

EventSink: {"": "Object;"},

_EventSink: {"": "Object;"},

_cancelAndError_closure: {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    var t1 = this.subscription_0;
    t1.cancel$0(t1);
    this.future_1._setError$1(error);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

_Zone: {"": "Object;", $is_Zone: true},

_ZoneBase: {"": "Object;",
  get$_errorZone: function() {
    return this._parentZone.get$_errorZone();
  },
  handleUncaughtError$1: function(error) {
    this._parentZone.handleUncaughtError$1(error);
  },
  inSameErrorZone$1: function(otherZone) {
    var t1, t2;
    t1 = this.get$_errorZone();
    t2 = otherZone.get$_errorZone();
    return t1 == null ? t2 == null : t1 === t2;
  },
  fork$0: function() {
    return this;
  },
  expectCallback$0: function() {
    var t1 = this._openCallbacks;
    this._openCallbacks = t1 + 1;
    return t1;
  },
  cancelCallbackExpectation$0: function() {
    this._openCallbacks = this._openCallbacks - 1;
    this._checkIfDone$0();
  },
  _dispose$0: function() {
  },
  _checkIfDone$0: function() {
    if (!$.boolConversionCheck(this._isExecutingCallback) && this._openCallbacks === 0 && $.JSArray_methods.get$isEmpty(this._children))
      this._dispose$0();
  },
  executeCallbackGuarded$1: function(f) {
    $.assertFunctionSubtype(f, "void_");
    this._openCallbacks = this._openCallbacks - 1;
    this._runGuarded$1(f);
  },
  _runInZone$2: function(f, handleUncaught) {
    var oldZone, oldIsExecuting, e, s, t1, exception;
    $.assertFunctionSubtype(f, "dynamic_");
    if ($.get$_Zone__current() === this && !$.boolConversionCheck(handleUncaught) && $.boolConversionCheck(this._isExecutingCallback))
      return f.call$0();
    oldZone = $.get$_Zone__current();
    $._Zone__current = this;
    oldIsExecuting = this._isExecutingCallback;
    this._isExecutingCallback = true;
    try {
      try {
        t1 = f.call$0();
        return t1;
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        if ($.boolConversionCheck(handleUncaught))
          this.handleUncaughtError$1($._asyncError(e, s));
        else
          throw exception;
      }

    } finally {
      this._isExecutingCallback = $.boolTypeCheck(oldIsExecuting);
      $._Zone__current = $.propertyTypeCheck(oldZone, "$is_Zone");
      this._checkIfDone$0();
    }
  },
  _runGuarded$1: function(f) {
    return this._runInZone$2($.assertFunctionSubtype(f, "void_"), true);
  },
  _runUnguarded$1: function(f) {
    return this._runInZone$2($.assertFunctionSubtype(f, "void_"), false);
  },
  runAsync$2: function(f, zone) {
    return this._parentZone.runAsync$2($.assertFunctionSubtype(f, "void_"), zone);
  },
  createTimer$2: function(duration, callback) {
    return $._ZoneTimer$(this, duration, $.assertFunctionSubtype(callback, "void_"));
  },
  _ZoneBase$_defaultZone$0: function() {
    $.assertHelper(!!$.getInterceptor(this).$is_DefaultZone);
  },
  $is_Zone: true,
  $asObject: null
},

_DefaultZone: {"": "_ZoneBase;_parentZone,_children,_openCallbacks,_isExecutingCallback",
  get$_errorZone: function() {
    return this;
  },
  handleUncaughtError$1: function(error) {
    $._scheduleAsyncCallback(new $._DefaultZone_handleUncaughtError_closure(error));
  },
  runAsync$2: function(f, zone) {
    $.assertFunctionSubtype(f, "void_");
    if (this === zone) {
      $._scheduleAsyncCallback(f);
      return;
    }
    zone.expectCallback$0();
    $._scheduleAsyncCallback(new $._DefaultZone_runAsync_closure(f, zone));
  },
  $is_DefaultZone: true
},

_DefaultZone_handleUncaughtError_closure: {"": "Closure;error_0",
  call$0: function() {
    var t1, trace;
    t1 = this.error_0;
    $.print("Uncaught Error: " + $.S(t1));
    trace = $.getAttachedStackTrace(t1);
    $._attachStackTrace(t1, null);
    if (trace != null)
      $.print("Stack Trace:\n" + $.S(trace) + "\n");
    throw $.wrapException(t1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_DefaultZone_runAsync_closure: {"": "Closure;f_0,zone_1",
  call$0: function() {
    this.zone_1.executeCallbackGuarded$1(this.f_0);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

_ZoneTimer: {"": "Object;_zone<,_callback,_liblib5$_timer",
  _run$0: function() {
    this._zone.executeCallbackGuarded$1(this._callback);
  },
  get$_run: function() {
    return new $.Bound__run__ZoneTimer(this, "_run$0", null);
  },
  _ZoneTimer$3: function(_zone, duration, _callback) {
    $.assertFunctionSubtype(_callback, "void_");
    this._zone.expectCallback$0();
    this._liblib5$_timer = $._createTimer(duration, this.get$_run());
  },
  $isTimer: true,
  $asObject: null
},

_attachStackTrace: function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
},

getAttachedStackTrace: function(o) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  return t1.$index(t1, o);
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.propertyTypeCheck($.get$_asyncCallbacks().removeFirst$0(), "$isFunction");
    try {
      callback.call$0();
    } catch (exception) {
      $.unwrapException(exception);
      $.assertFunctionSubtype($._asyncRunCallback$closure, "void_");
      milliseconds = $.JSInt_methods.$tdiv($.Duration_0._duration, 1000);
      $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, $._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  var t1 = $.get$_asyncCallbacks();
  t1.add$1(t1, callback);
  if (!$._callbacksAreEnqueued) {
    $._AsyncRun__enqueueImmediate($._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

runAsync: function(callback) {
  var currentZone;
  $.assertFunctionSubtype(callback, "void_");
  currentZone = $.get$_Zone__current();
  currentZone.runAsync$2(callback, currentZone);
},

_AsyncRun__enqueueImmediate: function(callback) {
  var milliseconds;
  $.assertFunctionSubtype(callback, "void_");
  milliseconds = $.Duration_0.get$inMilliseconds();
  $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

Future_Future$value: function(value, T) {
  return $.assertSubtype($._FutureImpl$immediate($.assertSubtypeOfRuntimeType(value, T), T), "$isFuture", [T], "$asFuture");
},

Future_wait: function(futures) {
  return $.assertSubtype($._FutureImpl__FutureImpl$wait($.listSuperNativeTypeCheck(futures, "$isIterable"), $.JSArray), "$isFuture", [$.JSArray], "$asFuture");
},

Completer_Completer: function(T) {
  return $.assertSubtype($._AsyncCompleter$(T), "$isCompleter", [T], "$asCompleter");
},

_AsyncCompleter$: function(T) {
  var t1, t2;
  t1 = T;
  t2 = new $._AsyncCompleter($.assertSubtype($._FutureImpl$(t1), "$isFuture", [t1], "$asFuture"), false);
  $.setRuntimeTypeInfo(t2, [T]);
  t2._Completer$0(t1);
  return t2;
},

_FutureListener__FutureListener$wrap: function(future, T) {
  return $.assertSubtype($._FutureListenerWrapper$(future, null), "$is_FutureListener", [T], "$as_FutureListener");
},

_FutureListenerWrapper$: function(future, T) {
  var t1 = new $._FutureListenerWrapper(future, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

_FutureImpl$: function(T) {
  var t1 = new $._FutureImpl(0, $._Zone_current().fork$0(), null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

_FutureImpl$immediate: function(value, T) {
  var t1;
  $.assertSubtypeOfRuntimeType(value, T);
  t1 = new $._FutureImpl(0, $._Zone_current().fork$0(), null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
},

_FutureImpl__FutureImpl$wait: function(futures, T) {
  var t1, t2, t3, t4, $arguments, t5, pos;
  t1 = {};
  $.listSuperNativeTypeCheck(futures, "$isIterable");
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.get$iterator$ax(futures); $.boolConversionCheck(t3.moveNext$0());) {
    t4 = t3.get$_current();
    $arguments = $.substitute($.getField(t3, "$asListIterator"), $.getRuntimeTypeInfo(t3));
    if ($arguments == null)
      t5 = null;
    else {
      $.assertHelper($.isJsArray($arguments));
      t5 = $arguments[0];
    }
    t4 = $.propertyTypeCheck($.assertSubtypeOfRuntimeType(t4, t5), "$isFuture");
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return $.assertSubtype($.Future_Future$value($.List_empty, null), "$is_FutureImpl", [T], "$as_FutureImpl");
  t1.values_1 = $.List_List(t2, null);
  t1.completer_0 = $.Completer_Completer($.JSArray);
  return $.assertSubtype(t1.completer_0.future, "$is_FutureImpl", [T], "$as_FutureImpl");
},

_asyncError: function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  $.assertFunctionSubtype(userCode, "dynamic_");
  $.assertFunctionSubtype(onSuccess, "dynamic__dynamic");
  $.assertFunctionSubtype(onError, "dynamic__dynamic");
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    onError.call$1($._asyncError(e, s));
  }

},

_cancelAndError: function(subscription, future) {
  return new $._cancelAndError_closure(subscription, future);
},

Timer_Timer: function(duration, callback) {
  $.assertFunctionSubtype(callback, "void_");
  return $._Zone_current().createTimer$2(duration, callback);
},

Timer_run: function(callback) {
  $.Timer_Timer($.Duration_0, $.assertFunctionSubtype(callback, "void_"));
},

_createTimer: function(duration, callback) {
  var milliseconds;
  $.assertFunctionSubtype(callback, "void_");
  milliseconds = duration.get$inMilliseconds();
  return $.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_Zone_current: function() {
  return $.get$_Zone__current();
},

_DefaultZone$: function() {
  var t1 = new $._DefaultZone(null, $.interceptedTypeCheck([], "$isList"), 0, false);
  t1._ZoneBase$_defaultZone$0();
  return t1;
},

_ZoneTimer$: function(_zone, duration, _callback) {
  var t1;
  $.assertFunctionSubtype(_callback, "void_");
  t1 = new $._ZoneTimer(_zone, _callback, null);
  t1._ZoneTimer$3(_zone, duration, _callback);
  return t1;
}}],
["dart.collection", "dart:collection", , {
HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.assertSubtype($.HashMapKeyIterator$(t1, t1._computeKeys$0(), $.getRuntimeTypeArgument(this, "HashMapKeyIterable", 0)), "$isIterator", [$.getRuntimeTypeArgument(this, "HashMapKeyIterable", 0)], "$asIterator");
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    $.assertFunctionSubtype(f, "void__E2", "HashMapKeyIterable", this);
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException(new $.ConcurrentModificationError(t1));
    }
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
},

HashMapKeyIterator: {"": "Object;_map,_keys,_liblib2$_offset,_liblib2$_current?",
  get$current: function() {
    var t1, $arguments;
    t1 = this._liblib2$_current;
    $arguments = $.getRuntimeTypeArguments(this, "HashMapKeyIterator");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._liblib2$_offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else if (offset >= keys.length) {
      this.set$_liblib2$_current(null);
      return false;
    } else {
      this.set$_liblib2$_current(keys[offset]);
      this._liblib2$_offset = offset + 1;
      return true;
    }
  },
  $isIterator: true,
  $asObject: null
},

LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

LinkedHashMapCell: {"": "Object;_key,_value,_next,_previous", $isLinkedHashMapCell: true},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.assertSubtype($.LinkedHashMapKeyIterator$(t1, t1._modifications, $.getRuntimeTypeArgument(this, "LinkedHashMapKeyIterable", 0)), "$isIterator", [$.getRuntimeTypeArgument(this, "LinkedHashMapKeyIterable", 0)], "$asIterator");
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_liblib2$_current?",
  get$current: function() {
    var t1, $arguments;
    t1 = this._liblib2$_current;
    $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMapKeyIterator");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException(new $.ConcurrentModificationError(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this.set$_liblib2$_current(null);
        return false;
      } else {
        this.set$_liblib2$_current(t1._key);
        this._cell = this._cell._next;
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications, E) {
    this._cell = this._map._first;
  },
  $isIterator: true,
  $asObject: null
},

HashMap: {"": "Object;_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._length;
  },
  get$isEmpty: function(_) {
    return this._length === 0;
  },
  get$keys: function(_) {
    return $.listSuperNativeTypeCheck($.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, "HashMap", 0)), "$isIterable");
  },
  get$values: function(_) {
    var t1 = this.get$keys(this);
    return $.listSuperNativeTypeCheck(t1.map$1(t1, new $.HashMap_values_closure(this)), "$isIterable");
  },
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    if ($.HashMap__isStringKey(key)) {
      strings = this._strings;
      return strings == null ? false : $.HashMap__hasTableEntry(strings, key);
    } else if ($.HashMap__isNumericKey(key)) {
      nums = this._nums;
      return nums == null ? false : $.HashMap__hasTableEntry(nums, key);
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex($.HashMap__getBucket(rest, key), key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, $arguments, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      $arguments = $.getRuntimeTypeArguments(this, "HashMap");
      return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      $arguments = $.getRuntimeTypeArguments(this, "HashMap");
      return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
    } else {
      rest = this._rest;
      if (rest == null) {
        $arguments = $.getRuntimeTypeArguments(this, "HashMap");
        return $.assertSubtypeOfRuntimeType(null, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
      }
      bucket = $.listTypeCheck(rest[$.HashMap__computeHashCode(key)]);
      index = $.HashMap__findBucketIndex(bucket, key);
      t1 = index < 0 ? null : bucket[index + 1];
      $arguments = $.getRuntimeTypeArguments(this, "HashMap");
      return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
    }
  },
  $indexSet: function(_, key, value) {
    var $arguments, strings, table, nums, rest, hash, bucket, t1, index;
    $arguments = $.getRuntimeTypeArguments(this, "HashMap");
    $.assertSubtypeOfRuntimeType(key, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    $arguments = $.getRuntimeTypeArguments(this, "HashMap");
    $.assertSubtypeOfRuntimeType(value, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        $.HashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.HashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._strings = table;
        strings = table;
      }
      $.assertSubtypeOfRuntimeType(key, $.getRuntimeTypeArgument(this, "HashMap", 0));
      $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "HashMap", 1));
      if (!$.HashMap__hasTableEntry(strings, key)) {
        this._length = this._length + 1;
        this._keys = null;
      }
      $.HashMap__setTableEntry(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        $.HashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.HashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._nums = table;
        nums = table;
      }
      $.assertSubtypeOfRuntimeType(key, $.getRuntimeTypeArgument(this, "HashMap", 0));
      $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "HashMap", 1));
      if (!$.HashMap__hasTableEntry(nums, key)) {
        this._length = this._length + 1;
        this._keys = null;
      }
      $.HashMap__setTableEntry(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        $.HashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.HashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._length = this._length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._length = this._length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if ($.HashMap__isStringKey(key))
      return $.assertSubtypeOfRuntimeType(this._removeHashTableEntry$2(this._strings, key), $.getRuntimeTypeArgument(this, "HashMap", 1));
    else if ($.HashMap__isNumericKey(key))
      return $.assertSubtypeOfRuntimeType(this._removeHashTableEntry$2(this._nums, key), $.getRuntimeTypeArgument(this, "HashMap", 1));
    else {
      rest = this._rest;
      if (rest == null)
        return $.assertSubtypeOfRuntimeType(null, $.getRuntimeTypeArgument(this, "HashMap", 1));
      bucket = $.HashMap__getBucket(rest, key);
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return $.assertSubtypeOfRuntimeType(null, $.getRuntimeTypeArgument(this, "HashMap", 1));
      this._length = this._length - 1;
      this._keys = null;
      return $.assertSubtypeOfRuntimeType(bucket.splice(index, 2)[1], $.getRuntimeTypeArgument(this, "HashMap", 1));
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    $.assertFunctionSubtype(action, "void__K_V0", "HashMap", this);
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException(new $.ConcurrentModificationError(this));
    }
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    $.assertHelper(index === this._length);
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    $.assertSubtypeOfRuntimeType(key, $.getRuntimeTypeArgument(this, "HashMap", 0));
    if (table != null && $.HashMap__hasTableEntry(table, key)) {
      value = $.assertSubtypeOfRuntimeType($.HashMap__getTableEntry(table, key), $.getRuntimeTypeArgument(this, "HashMap", 1));
      $.HashMap__deleteTableEntry(table, key);
      this._length = this._length - 1;
      this._keys = null;
      return $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "HashMap", 1));
    } else
      return $.assertSubtypeOfRuntimeType(null, $.getRuntimeTypeArgument(this, "HashMap", 1));
  },
  $isMap: true,
  $asMap: null,
  $asObject: null
},

IterableBase: {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, $.assertFunctionSubtype(f, "dynamic__E", "IterableBase", this), $.getRuntimeTypeArgument(this, "IterableBase", 0), null);
  },
  forEach$1: function(_, f) {
    var t1, element, $arguments, t2;
    $.assertFunctionSubtype(f, "void__E1", "IterableBase", this);
    for (t1 = this.get$iterator(this); $.boolConversionCheck(t1.moveNext$0());) {
      element = t1.get$current();
      $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      f.call$1($.assertSubtypeOfRuntimeType(element, t2));
    }
  },
  toList$1$growable: function(_, growable) {
    return $.interceptedTypeCheck($.List_List$from(this, growable, $.getRuntimeTypeArgument(this, "IterableBase", 0)), "$isList");
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; $.boolConversionCheck(it.moveNext$0());)
      ++count;
    return count;
  },
  skip$1: function(_, n) {
    return $.listSuperNativeTypeCheck($.SkipIterable$(this, $.intTypeCheck(n), $.getRuntimeTypeArgument(this, "IterableBase", 0)), "$isIterable");
  },
  firstWhere$2$orElse: function(_, test, orElse) {
    var t1, element, $arguments, t2;
    $.assertFunctionSubtype(test, "bool__E1", "IterableBase", this);
    $.assertFunctionSubtype(orElse, "Object_");
    for (t1 = this.get$iterator(this); $.boolConversionCheck(t1.moveNext$0());) {
      element = t1.get$current();
      $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(element, t2);
      if ($.boolConversionCheck(test.call$1(element)))
        return element;
    }
    if (orElse != null)
      return orElse.call$0();
    throw $.wrapException($.StateError$("No matching element"));
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element, $arguments, t2;
    $.intTypeCheck(index);
    if (index == null)
      return this.elementAt$1$bailout(1, index);
    if (index < 0)
      throw $.wrapException(new $.RangeError("value " + index));
    for (t1 = this.get$iterator(this), remaining = index; $.boolConversionCheck(t1.moveNext$0());) {
      element = t1.get$current();
      $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(element, t2);
      if (remaining === 0) {
        $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
        if ($arguments == null)
          t1 = null;
        else {
          $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
          t1 = $arguments[0];
        }
        return $.assertSubtypeOfRuntimeType(element, t1);
      }
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, $arguments, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException(new $.RangeError("value " + $.S(index)));
    for (t1 = this.get$iterator(this), remaining = index; $.boolConversionCheck(t1.moveNext$0());) {
      element = t1.get$current();
      $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
      if ($arguments == null)
        t2 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t2 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(element, t2);
      if (remaining === 0) {
        $arguments = $.substitute(this.$asIterableBase, $.getRuntimeTypeInfo(this));
        if ($arguments == null)
          t1 = null;
        else {
          $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
          t1 = $arguments[0];
        }
        return $.assertSubtypeOfRuntimeType(element, t1);
      }
      if (remaining == null)
        throw remaining.$sub();
      --remaining;
    }
    throw $.wrapException(new $.RangeError("value " + $.S(index)));
  },
  $isIterable: true,
  $asIterable: null,
  $asObject: null
},

LinkedHashMap: {"": "Object;_length,_strings,_nums,_rest,_first,_last,_modifications",
  $index: function(_, key) {
    var strings, $arguments, cell, t1, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMap");
        return $.assertSubtypeOfRuntimeType(null, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
      }
      cell = $.propertyTypeCheck(strings[key], "$isLinkedHashMapCell");
      t1 = cell == null ? null : cell._value;
      $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMap");
      return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMap");
        return $.assertSubtypeOfRuntimeType(null, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
      }
      cell = $.propertyTypeCheck(nums[key], "$isLinkedHashMapCell");
      t1 = cell == null ? null : cell._value;
      $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMap");
      return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
    } else {
      rest = this._rest;
      if (rest == null) {
        $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMap");
        return $.assertSubtypeOfRuntimeType(null, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
      }
      bucket = $.listTypeCheck(rest[$.LinkedHashMap__computeHashCode(key)]);
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0) {
        $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMap");
        return $.assertSubtypeOfRuntimeType(null, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
      }
      t1 = $.propertyTypeCheck(bucket[index], "$isLinkedHashMapCell")._value;
      $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMap");
      return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
    }
  },
  $indexSet: function(_, key, value) {
    var $arguments, strings, table, nums, rest, hash, bucket, t1, index;
    $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMap");
    $.assertSubtypeOfRuntimeType(key, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    $arguments = $.getRuntimeTypeArguments(this, "LinkedHashMap");
    $.assertSubtypeOfRuntimeType(value, $.isNull($arguments) ? null : $.getIndex($arguments, 1));
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        $.LinkedHashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        $.LinkedHashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        $.LinkedHashMap__setTableEntry(table, "<non-identifier-key>", table);
        $.LinkedHashMap__deleteTableEntry(table, "<non-identifier-key>");
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [this._newLinkedCell$2(key, value)];
        $.assertHelper(t1 != null);
        rest[hash] = t1;
      } else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          $.propertyTypeCheck(bucket[index], "$isLinkedHashMapCell")._value = value;
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    $.assertFunctionSubtype(action, "void__K_V", "LinkedHashMap", this);
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell._key, cell._value);
      if (modifications !== this._modifications)
        throw $.wrapException(new $.ConcurrentModificationError(this));
      cell = cell._next;
    }
  },
  get$keys: function(_) {
    return $.listSuperNativeTypeCheck($.LinkedHashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, "LinkedHashMap", 0)), "$isIterable");
  },
  get$values: function(_) {
    var t1 = this.get$keys(this);
    return $.listSuperNativeTypeCheck(t1.map$1(t1, new $.LinkedHashMap_values_closure(this)), "$isIterable");
  },
  get$length: function(_) {
    return this._length;
  },
  toString$0: function(_) {
    return $.Maps_mapToString(this);
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell;
    $.assertSubtypeOfRuntimeType(key, $.getRuntimeTypeArgument(this, "LinkedHashMap", 0));
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "LinkedHashMap", 1));
    cell = $.propertyTypeCheck($.LinkedHashMap__getTableEntry(table, key), "$isLinkedHashMapCell");
    if (cell == null)
      $.LinkedHashMap__setTableEntry(table, key, this._newLinkedCell$2(key, value));
    else
      cell._value = value;
  },
  _modified$0: function() {
    this._modifications = this._modifications + 1 & 67108863;
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$($.assertSubtypeOfRuntimeType(key, $.getRuntimeTypeArgument(this, "LinkedHashMap", 0)), $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "LinkedHashMap", 1)));
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._length = this._length + 1;
    this._modified$0();
    return cell;
  },
  $isMap: true,
  $asMap: null,
  $asObject: null
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null, $asObject: null},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return $.assertSubtype($.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, "ListMixin", 0)), "$isIterator", [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)], "$asIterator");
  },
  elementAt$1: function(receiver, index) {
    return $.assertSubtypeOfRuntimeType(this.$index(receiver, index), $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $.assertFunctionSubtype(action, "void__E0", "ListMixin", receiver);
    $length = this.get$length(receiver);
    if ($length == null)
      return this.forEach$1$bailout(1, action, receiver, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver, $length) {
    var i, t1;
    for (i = 0; $.JSInt_methods.$lt(i, $length); ++i) {
      action.call$1(this.$index(receiver, i));
      t1 = this.get$length(receiver);
      if ($length == null ? t1 != null : $length !== t1)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
  },
  get$last: function(receiver) {
    var t1;
    if (this.get$length(receiver) === 0)
      throw $.wrapException($.StateError$("No elements"));
    t1 = this.get$length(receiver);
    if (t1 == null)
      throw t1.$sub();
    return $.assertSubtypeOfRuntimeType(this.$index(receiver, t1 - 1), $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
  },
  firstWhere$2$orElse: function(receiver, test, orElse) {
    var $length, i, element, $arguments, t1;
    $.assertFunctionSubtype(test, "bool__E", "ListMixin", receiver);
    $.assertFunctionSubtype(orElse, "Object_");
    $length = this.get$length(receiver);
    if ($length == null)
      return this.firstWhere$2$orElse$bailout(1, test, orElse, receiver, $length);
    for (i = 0; i < $length; ++i) {
      element = this.$index(receiver, i);
      $arguments = $.substitute(receiver.$asListMixin, $.getRuntimeTypeInfo(receiver));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(element, t1);
      if ($.boolConversionCheck(test.call$1(element)))
        return element;
      if ($length !== this.get$length(receiver))
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
    if (orElse != null)
      return orElse.call$0();
    throw $.wrapException($.StateError$("No matching element"));
  },
  firstWhere$2$orElse$bailout: function(state0, test, orElse, receiver, $length) {
    var i, element, $arguments, t1;
    for (i = 0; $.JSInt_methods.$lt(i, $length); ++i) {
      element = this.$index(receiver, i);
      $arguments = $.substitute(receiver.$asListMixin, $.getRuntimeTypeInfo(receiver));
      if ($arguments == null)
        t1 = null;
      else {
        $.assertHelper(typeof $arguments === "object" && $arguments !== null && $arguments.constructor === Array);
        t1 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(element, t1);
      if ($.boolConversionCheck(test.call$1(element)))
        return element;
      t1 = this.get$length(receiver);
      if ($length == null ? t1 != null : $length !== t1)
        throw $.wrapException(new $.ConcurrentModificationError(receiver));
    }
    if (orElse != null)
      return orElse.call$0();
    throw $.wrapException($.StateError$("No matching element"));
  },
  firstWhere$1: function($receiver, test) {
    return this.firstWhere$2$orElse($receiver, test, null);
  },
  where$1: function(receiver, test) {
    return $.listSuperNativeTypeCheck($.WhereIterable$(receiver, $.assertFunctionSubtype(test, "bool__E", "ListMixin", receiver), $.getRuntimeTypeArgument(receiver, "ListMixin", 0)), "$isIterable");
  },
  skip$1: function(receiver, count) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, count, null, null), "$isIterable");
  },
  toList$1$growable: function(receiver, growable) {
    var result, t1, t2, i, t3;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.toList$1$growable$bailout(1, growable, receiver);
    if (growable) {
      result = $.List_List(null, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      $.JSArray_methods.set$length(result, receiver.length);
      $.interceptedTypeCheck(result, "$isList");
    } else {
      result = $.List_List(receiver.length, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      $.interceptedTypeCheck(result, "$isList");
    }
    if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !$.isJsIndexable(result, result[$.dispatchPropertyName]))
      return this.toList$1$growable$bailout(2, 0, receiver, result);
    for (t1 = receiver.length, t2 = result.length, i = 0; i < t1; ++i) {
      t3 = receiver[i];
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return $.interceptedTypeCheck(result, "$isList");
  },
  toList$1$growable$bailout: function(state0, growable, receiver, result) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (growable) {
          result = $.List_List(null, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
          $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
          $.JSArray_methods.set$length(result, this.get$length(receiver));
          $.interceptedTypeCheck(result, "$isList");
        } else {
          result = $.List_List(this.get$length(receiver), $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
          $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
          $.interceptedTypeCheck(result, "$isList");
        }
      case 2:
        var t1, i;
        state0 = 0;
        for (t1 = $.getInterceptor$ax(result), i = 0; $.JSInt_methods.$lt(i, this.get$length(receiver)); ++i)
          t1.$indexSet(result, i, this.$index(receiver, i));
        return $.interceptedTypeCheck(result, "$isList");
    }
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var $arguments, t1;
    $arguments = $.getRuntimeTypeArguments(receiver, "ListMixin");
    $.assertSubtypeOfRuntimeType(element, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    t1 = this.get$length(receiver);
    if (t1 == null)
      return this.add$1$bailout(1, element, receiver, t1);
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  add$1$bailout: function(state0, element, receiver, t1) {
    if (t1 == null)
      throw t1.$add();
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  removeLast$0: function(receiver) {
    var t1, result;
    if (this.get$length(receiver) === 0)
      throw $.wrapException($.StateError$("No elements"));
    t1 = this.get$length(receiver);
    if (t1 == null)
      throw t1.$sub();
    result = $.assertSubtypeOfRuntimeType(this.$index(receiver, t1 - 1), $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
    t1 = this.get$length(receiver);
    if (t1 == null)
      throw t1.$sub();
    this.set$length(receiver, t1 - 1);
    return $.assertSubtypeOfRuntimeType(result, $.getRuntimeTypeArgument(receiver, "ListMixin", 0));
  },
  _rangeCheck$2: function(receiver, start, end) {
    if (start == null)
      throw start.$lt();
    if (start < 0 || $.JSInt_methods.$gt(start, this.get$length(receiver)))
      throw $.wrapException($.RangeError$range(start, 0, this.get$length(receiver)));
    if (end == null)
      throw end.$lt();
    if (end < start || $.JSInt_methods.$gt(end, this.get$length(receiver)))
      throw $.wrapException($.RangeError$range(end, start, this.get$length(receiver)));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $arguments, t1, otherStart, otherList, t2, i;
    if (start == null)
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (skipCount == null)
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    $.intTypeCheck(end);
    if (end == null)
      return this.setRange$4$bailout(2, start, end, iterable, skipCount, receiver);
    $arguments = $.getRuntimeTypeArguments(receiver, "ListMixin");
    t1 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    this._rangeCheck$2(receiver, start, end);
    t1 = end - start;
    if (t1 === 0)
      return;
    if (skipCount < 0)
      throw $.wrapException(new $.ArgumentError(skipCount));
    if (typeof iterable === "object" && iterable !== null && (iterable.constructor === Array || !!$.getInterceptor(iterable).$isList)) {
      if (typeof iterable !== "string" && (typeof iterable !== "object" || iterable === null || iterable.constructor !== Array && !$.isJsIndexable(iterable, iterable[$.dispatchPropertyName])))
        return this.setRange$4$bailout(3, start, 0, iterable, skipCount, receiver, t1);
      otherStart = skipCount;
      otherList = iterable;
    } else {
      t2 = $.skip$1$ax(iterable, skipCount);
      otherList = t2.toList$1$growable(t2, false);
      if (typeof otherList !== "string" && (typeof otherList !== "object" || otherList === null || otherList.constructor !== Array && !$.isJsIndexable(otherList, otherList[$.dispatchPropertyName])))
        return this.setRange$4$bailout(4, start, 0, 0, 0, receiver, t1, otherList);
      otherStart = 0;
    }
    if (otherStart + t1 > otherList.length)
      throw $.wrapException(new $.StateError("Not enough elements"));
    if (otherStart < start)
      for (i = t1 - 1; i >= 0; --i) {
        t1 = otherStart + i;
        if (t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
    else
      for (i = 0; i < t1; ++i) {
        t2 = otherStart + i;
        if (t2 >= otherList.length)
          throw $.ioore(t2);
        this.$indexSet(receiver, start + i, otherList[t2]);
      }
  },
  setRange$4$bailout: function(state0, start, end, iterable, skipCount, receiver, t1, otherList, t3, t4, t2, otherStart) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        $.intTypeCheck(end);
      case 2:
        state0 = 0;
        $arguments = $.getRuntimeTypeArguments(receiver, "ListMixin");
        t1 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
        $.listSuperNativeTypeCheck(iterable, "$isIterable");
        this._rangeCheck$2(receiver, start, end);
        if (end == null)
          throw end.$sub();
        t1 = $.JSInt_methods.$sub(end, start);
        if (t1 === 0)
          return;
        if (skipCount == null)
          throw skipCount.$lt();
        if (skipCount < 0)
          throw $.wrapException(new $.ArgumentError(skipCount));
      default:
        if (state0 === 3 || state0 === 0 && typeof iterable === "object" && iterable !== null && (iterable.constructor === Array || !!$.getInterceptor(iterable).$isList))
          switch (state0) {
            case 0:
            case 3:
              state0 = 0;
              otherStart = skipCount;
              otherList = iterable;
          }
        else
          switch (state0) {
            case 0:
              t2 = $.skip$1$ax(iterable, skipCount);
              otherList = t2.toList$1$growable(t2, false);
            case 4:
              state0 = 0;
              otherStart = 0;
          }
        t2 = otherStart + t1;
        t3 = $.getInterceptor$asx(otherList);
        t4 = t3.get$length(otherList);
      case 5:
        var $arguments, i;
        state0 = 0;
        if ($.JSInt_methods.$gt(t2, t4))
          throw $.wrapException(new $.StateError("Not enough elements"));
        if ($.JSInt_methods.$lt(otherStart, start))
          for (i = t1 - 1; i >= 0; --i) {
            if (start == null)
              throw start.$add();
            this.$indexSet(receiver, start + i, t3.$index(otherList, otherStart + i));
          }
        else
          for (i = 0; i < t1; ++i) {
            if (start == null)
              throw start.$add();
            this.$indexSet(receiver, start + i, t3.$index(otherList, otherStart + i));
          }
    }
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  indexOf$2: function(receiver, element, startIndex) {
    var t1, i;
    if (typeof receiver !== "string" && (typeof receiver !== "object" || receiver === null || receiver.constructor !== Array && !$.isJsIndexable(receiver, receiver[$.dispatchPropertyName])))
      return this.indexOf$2$bailout(1, element, startIndex, receiver);
    t1 = receiver.length;
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < t1; ++i) {
      if (i < 0)
        throw $.ioore(i);
      if ($.$eq(receiver[i], element))
        return i;
    }
    return -1;
  },
  indexOf$2$bailout: function(state0, element, startIndex, receiver) {
    var i;
    if ($.JSInt_methods.$ge(startIndex, this.get$length(receiver)))
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; $.JSInt_methods.$lt(i, this.get$length(receiver)); ++i)
      if ($.$eq(this.$index(receiver, i), element))
        return i;
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(receiver) {
    return $.ToString_iterableToString(receiver);
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null,
  $asObject: null
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  set$_table: function(v) {
    this._table = $.interceptedTypeCheck(v, "$isList");
  },
  get$iterator: function(_) {
    return $.assertSubtype($._ListQueueIterator$(this, null), "$isIterator", [$.getRuntimeTypeArgument(this, "ListQueue", 0)], "$asIterator");
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    if (index == null)
      throw index.$lt();
    if (index < 0 || index > this.get$length(this))
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = t1.length;
    t3 = (this._head + index & t2 - 1) >>> 0;
    if (t3 < 0 || t3 >= t2)
      throw $.ioore(t3);
    return $.assertSubtypeOfRuntimeType(t1[t3], $.getRuntimeTypeArgument(this, "ListQueue", 0));
  },
  add$1: function(_, element) {
    this._add$1(this, $.assertSubtypeOfRuntimeType(element, $.getRuntimeTypeArgument(this, "ListQueue", 0)));
  },
  toString$0: function(_) {
    return $.ToString_iterableToString(this);
  },
  addLast$1: function(element) {
    this._add$1(this, $.assertSubtypeOfRuntimeType(element, $.getRuntimeTypeArgument(this, "ListQueue", 0)));
  },
  removeFirst$0: function() {
    var t1, t2, result, $arguments;
    if (this._head === this._tail)
      throw $.wrapException(new $.StateError("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    result = t1[t2];
    $arguments = $.getRuntimeTypeArguments(this, "ListQueue");
    $.assertSubtypeOfRuntimeType(result, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    this._head = (this._head + 1 & this._table.length - 1) >>> 0;
    $arguments = $.getRuntimeTypeArguments(this, "ListQueue");
    return $.assertSubtypeOfRuntimeType(result, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  _add$1: function(_, element) {
    var t1, t2, t3;
    $.assertSubtypeOfRuntimeType(element, $.getRuntimeTypeArgument(this, "ListQueue", 0));
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split, t3;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, "ListQueue", 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    $.interceptedTypeCheck(newTable, "$isList");
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    t3 = $.getInterceptor$ax(newTable);
    t3.setRange$4(newTable, 0, split, t1, t2);
    t3.setRange$4(newTable, split, split + this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this.set$_table(newTable);
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (true)
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    $.assertHelper($.ListQueue__isPowerOf2(initialCapacity));
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this.set$_table(t1);
  },
  $isListQueue: true,
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null,
  $asQueue: null,
  $isQueue: true,
  $isIterable: true
},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_position,_liblib2$_current?",
  get$current: function() {
    var t1, $arguments;
    t1 = this._liblib2$_current;
    $arguments = $.getRuntimeTypeArguments(this, "_ListQueueIterator");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression($.ConcurrentModificationError$(t1));
    t2 = this._position;
    if (t2 === this._end) {
      this.set$_liblib2$_current(null);
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this.set$_liblib2$_current(t3[t2]);
    this._position = (this._position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  $isIterator: true,
  $asObject: null
},

HashMap__isStringKey: function(key) {
  return typeof key === "string" && key !== "__proto__";
},

HashMap__isNumericKey: function(key) {
  return typeof key === "number" && (key & 0x3ffffff) === key;
},

HashMap__computeHashCode: function(key) {
  return $.get$hashCode$(key) & 0x3ffffff;
},

HashMap__hasTableEntry: function(table, key) {
  return table[key] != null;
},

HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
},

HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

HashMap__deleteTableEntry: function(table, key) {
  delete table[key];
},

HashMap__getBucket: function(table, key) {
  return $.listTypeCheck(table[$.HashMap__computeHashCode(key)]);
},

HashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
},

HashMapKeyIterable$: function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

HashMapKeyIterator$: function(_map, _keys, E) {
  var t1 = new $.HashMapKeyIterator(_map, _keys, 0, $.assertSubtypeOfRuntimeType(null, E));
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

LinkedHashMap__computeHashCode: function(key) {
  return $.get$hashCode$(key) & 0x3ffffff;
},

LinkedHashMap__getTableEntry: function(table, key) {
  return table[key];
},

LinkedHashMap__setTableEntry: function(table, key, value) {
  $.assertHelper(value != null);
  table[key] = value;
},

LinkedHashMap__deleteTableEntry: function(table, key) {
  delete table[key];
},

LinkedHashMap__findBucketIndex: function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq($.propertyTypeCheck(bucket[i], "$isLinkedHashMapCell")._key, key))
      return i;
  return -1;
},

LinkedHashMapCell$: function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
},

LinkedHashMapKeyIterable$: function(_map, E) {
  var t1 = new $.LinkedHashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
},

LinkedHashMapKeyIterator$: function(_map, _modifications, E) {
  var t1 = new $.LinkedHashMapKeyIterator(_map, _modifications, null, $.assertSubtypeOfRuntimeType(null, E));
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedHashMapKeyIterator$2(_map, _modifications, E);
  return t1;
},

HashMap$: function(K, V) {
  var t1 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
},

LinkedHashMap$: function(K, V) {
  var t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
},

Maps_mapToString: function(m) {
  return $.ToString_mapToString(m);
},

Queue_Queue: function(E) {
  return $.assertSubtype($.ListQueue$(null, E), "$isQueue", [E], "$asQueue");
},

ListQueue$: function(initialCapacity, E) {
  var t1 = new $.ListQueue($.interceptedTypeCheck(null, "$isList"), 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
},

ListQueue__isPowerOf2: function(number) {
  if (number == null)
    throw number.$sub();
  return (number & number - 1) >>> 0 === 0;
},

ListQueue__nextPowerOf2: function(number) {
  var nextNumber;
  $.assertHelper($.JSNull_methods.$gt(number, 0));
  number = $.JSNull_methods.$shl(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
},

_ListQueueIterator$: function(queue, E) {
  var t1 = new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, $.assertSubtypeOfRuntimeType(null, E));
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
}}],
["dart.core", "dart:core", , {
NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2;
    $.stringTypeCheck(key);
    t1 = this.box_0;
    if (t1.i_1 > 0) {
      t2 = t1.sb_0;
      t2.write$1(t2, ", ");
    }
    t2 = t1.sb_0;
    t2.write$1(t2, key);
    t2 = t1.sb_0;
    t2.write$1(t2, ": ");
    t2 = t1.sb_0;
    t2.write$1(t2, $.Error_safeToString(value));
    t1.i_1 = t1.i_1 + 1;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__String_dynamic", args: [$.JSString, null]}; }
},

DateTime: {"": "Object;millisecondsSinceEpoch,isUtc",
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDateTime)
      return false;
    if (this.millisecondsSinceEpoch === other.millisecondsSinceEpoch) {
      t1 = this.isUtc;
      t2 = other.isUtc;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_twoDigits();
    y = $.stringTypeCheck(new $.DateTime_toString_fourDigits().call$1(this.get$year()));
    m = $.stringTypeCheck(t1.call$1(this.get$month()));
    d = $.stringTypeCheck(t1.call$1(this.get$day()));
    h = $.stringTypeCheck(t1.call$1(this.get$hour()));
    min = $.stringTypeCheck(t1.call$1(this.get$minute()));
    sec = $.stringTypeCheck(t1.call$1(this.get$second()));
    ms = $.stringTypeCheck(new $.DateTime_toString_threeDigits().call$1(this.get$millisecond()));
    if ($.boolConversionCheck(this.isUtc))
      return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
    else
      return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
  },
  difference$1: function(other) {
    return $.Duration$(0, 0, 0, this.millisecondsSinceEpoch - other.millisecondsSinceEpoch, 0, 0);
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    $.intTypeCheck(millisecondsSinceEpoch);
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.wrapException($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.wrapException($.ArgumentError$(isUtc));
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  $isDateTime: true,
  $asObject: null
},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var absN, sign;
    $.intTypeCheck(n);
    absN = $.intTypeCheck($.abs$0$n(n));
    if (n == null)
      throw n.$lt();
    sign = n < 0 ? "-" : "";
    if (absN == null)
      throw absN.$ge();
    if (absN >= 1000)
      return "" + n;
    if (absN >= 100)
      return sign + "0" + absN;
    if (absN >= 10)
      return sign + "00" + absN;
    return sign + "000" + absN;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "String__int", ret: $.JSString, args: [$.JSInt]}; }
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    $.intTypeCheck(n);
    if (n == null)
      throw n.$ge();
    if (n >= 100)
      return "" + n;
    if (n >= 10)
      return "0" + n;
    return "00" + n;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "String__int", ret: $.JSString, args: [$.JSInt]}; }
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    $.intTypeCheck(n);
    if (n == null)
      throw n.$ge();
    if (n >= 10)
      return "" + n;
    return "0" + n;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "String__int", ret: $.JSString, args: [$.JSInt]}; }
},

Duration: {"": "Object;_duration",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + $.propertyTypeCheck(other, "$isDuration")._duration, 0, 0, 0);
  },
  $le: function(_, other) {
    return this._duration <= $.propertyTypeCheck(other, "$isDuration")._duration;
  },
  get$inHours: function() {
    return $.JSInt_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSInt_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSInt_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSInt_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSInt_methods.get$hashCode(this._duration);
  },
  toString$0: function(_) {
    var t1, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = $.stringTypeCheck(t1.call$1($.JSInt_methods.remainder$1(this.get$inMinutes(), 60)));
    twoDigitSeconds = $.stringTypeCheck(t1.call$1($.JSInt_methods.remainder$1(this.get$inSeconds(), 60)));
    sixDigitUs = $.stringTypeCheck(new $.Duration_toString_sixDigits().call$1($.JSInt_methods.remainder$1(this.get$inMicroseconds(), 1000000)));
    return "" + this.get$inHours() + ":" + twoDigitMinutes + ":" + twoDigitSeconds + "." + sixDigitUs;
  },
  $isDuration: true,
  $asObject: null
},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    $.intTypeCheck(n);
    if (n == null)
      throw n.$ge();
    if (n >= 100000)
      return "" + n;
    if (n >= 10000)
      return "0" + n;
    if (n >= 1000)
      return "00" + n;
    if (n >= 100)
      return "000" + n;
    if (n > 10)
      return "0000" + n;
    return "00000" + n;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "String__int", ret: $.JSString, args: [$.JSInt]}; }
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    $.intTypeCheck(n);
    if (n == null)
      throw n.$ge();
    if (n >= 10)
      return "" + n;
    return "0" + n;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "String__int", ret: $.JSString, args: [$.JSInt]}; }
},

Error: {"": "Object;"},

AssertionError: {"": "Error;"},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
},

NoSuchMethodError: {"": "Error;_liblib0$_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    for (t2 = this._arguments; t3 = t1.i_1, t3 < t2.length; t1.i_1 = t1.i_1 + 1) {
      if (t3 > 0) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    return "NoSuchMethodError : method not found: '" + this._memberName + "'\nReceiver: " + $.Error_safeToString(this._liblib0$_receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
  }
},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
  },
  $asObject: null
},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  $asObject: null
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  }
},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true,
  $asObject: null
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true,
  $asObject: null
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values, t1, $arguments;
    values = $.Primitives_getProperty(object, "expando$values");
    t1 = values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
    $arguments = $.getRuntimeTypeArguments(this, "Expando");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  $indexSet: function(_, object, value) {
    var values;
    $.assertSubtypeOfRuntimeType(value, $.getRuntimeTypeArgument(this, "Expando", 0));
    values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = $.Object$();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.stringTypeCheck($.Primitives_getProperty(this, "expando$key"));
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  $isExpando: true
},

Function: {"": "Object;", $isFunction: true},

Iterator: {"": "Object;", $isIterator: true},

Map: {"": "Object;", $isMap: true, $asMap: null},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return $.Primitives_objectToString(this);
  },
  $isObject: true,
  $asObject: null
},

Stopwatch: {"": "Object;_liblib0$_start,_stop",
  start$0: function(_) {
    var t1, t2, t3;
    if (this.get$isRunning())
      return;
    if (this._liblib0$_start == null)
      this._liblib0$_start = $.Stopwatch__now();
    else {
      t1 = $.Stopwatch__now();
      t2 = this._stop;
      t3 = this._liblib0$_start;
      if (t2 == null)
        throw t2.$sub();
      this._liblib0$_start = t1 - $.JSInt_methods.$sub(t2, t3);
      this._stop = null;
    }
  },
  reset$0: function(_) {
    if (this._liblib0$_start == null)
      return;
    this._liblib0$_start = $.Stopwatch__now();
    if (this._stop != null)
      this._stop = this._liblib0$_start;
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._liblib0$_start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    if (t2 == null)
      t1 = $.JSInt_methods.$sub($.Stopwatch__now(), this._liblib0$_start);
    else {
      if (t2 == null)
        throw t2.$sub();
      t1 = $.JSInt_methods.$sub(t2, t1);
    }
    return t1;
  },
  get$frequency: function(_) {
    return $.Stopwatch__frequency();
  },
  get$isRunning: function() {
    return this._liblib0$_start != null && this._stop == null;
  },
  $isStopwatch: true
},

StringBuffer: {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(_, obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = $.stringTypeCheck(typeof obj === "string" ? obj : $.S(obj));
    this._contents = this._contents + str;
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  $isStringBuffer: true,
  $asObject: null
},

DateTime_DateTime$now: function() {
  return $.DateTime$_now();
},

DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1;
  $.intTypeCheck(millisecondsSinceEpoch);
  t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

DateTime$_now: function() {
  var t1 = new $.DateTime($.intTypeCheck($.Primitives_dateNow()), false);
  t1.DateTime$_now$0();
  return t1;
},

double_parse: function(source, handleError) {
  return $.Primitives_parseDouble($.stringTypeCheck(source), $.assertFunctionSubtype(handleError, "double__String"));
},

Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  $.intTypeCheck(microseconds);
  $.intTypeCheck(milliseconds);
  if (milliseconds == null)
    throw milliseconds.$mul();
  return new $.Duration($.JSInt_methods.$add(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000, microseconds));
},

Error_safeToString: function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    $.checkString("\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    $.checkString("\\r");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    $.checkString("\\\"");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return $.Primitives_objectToString(object);
},

NullThrownError$: function() {
  return new $.NullThrownError();
},

ArgumentError$: function(message) {
  return new $.ArgumentError(message);
},

RangeError$: function(message) {
  return new $.RangeError(message);
},

RangeError$value: function(value) {
  return new $.RangeError("value " + $.S($.numTypeCheck(value)));
},

RangeError$range: function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
},

NoSuchMethodError$: function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, $.stringTypeCheck(_memberName), _arguments, $.interceptedTypeCheck($.interceptedTypeCheck(_namedArguments, "$isMap"), "$isMap"), existingArgumentNames);
},

UnsupportedError$: function(message) {
  return new $.UnsupportedError(message);
},

UnimplementedError$: function(message) {
  return new $.UnimplementedError(message);
},

StateError$: function(message) {
  return new $.StateError(message);
},

ConcurrentModificationError$: function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
},

StackOverflowError$: function() {
  return new $.StackOverflowError();
},

CyclicInitializationError$: function(variableName) {
  return new $.CyclicInitializationError(variableName);
},

Exception_Exception: function(message) {
  return $._ExceptionImplementation$(message);
},

_ExceptionImplementation$: function(message) {
  return new $._ExceptionImplementation(message);
},

FormatException$: function(message) {
  return new $.FormatException(message);
},

Expando$: function($name, T) {
  var t1 = new $.Expando($name);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

List_List: function($length, E) {
  if ($length == null)
    return $.interceptedTypeCheck($.Primitives_newGrowableList(0), "$isList");
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.interceptedTypeCheck($.Primitives_newFixedList($length), "$isList");
},

List_List$filled: function($length, fill, E) {
  var result, t1, i;
  $.assertSubtypeOfRuntimeType(fill, E);
  if ($length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = $.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return $.interceptedTypeCheck(result, "$isList");
},

List_List$from: function(other, growable, E) {
  var list, t1, t2, $length, fixedList, i, t3;
  list = $.List_List(null, E);
  $.setRuntimeTypeInfo(list, [E]);
  $.interceptedTypeCheck(list, "$isList");
  if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.isJsIndexable(list, list[$.dispatchPropertyName])))
    return $.List_List$from$bailout(1, list, other, growable, E);
  for (t1 = $.get$iterator$ax(other), t2 = $.getInterceptor$ax(list); $.boolConversionCheck(t1.moveNext$0());)
    t2.add$1(list, $.assertSubtypeOfRuntimeType(t1.get$current(), E));
  if (growable)
    return $.interceptedTypeCheck(list, "$isList");
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  $.interceptedTypeCheck(fixedList, "$isList");
  if (typeof fixedList !== "object" || fixedList === null || (fixedList.constructor !== Array || !!fixedList.immutable$list) && !$.isJsIndexable(fixedList, fixedList[$.dispatchPropertyName]))
    return $.List_List$from$bailout(3, list, 0, 0, E, t2, $length, fixedList);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return $.interceptedTypeCheck(fixedList, "$isList");
},

List_List$from$bailout: function(state0, list, other, growable, E, t2, $length, fixedList) {
  switch (state0) {
    case 0:
      list = $.List_List(null, E);
      $.setRuntimeTypeInfo(list, [E]);
      $.interceptedTypeCheck(list, "$isList");
    case 1:
      state0 = 0;
      for (t1 = $.get$iterator$ax(other), t2 = $.getInterceptor$asx(list); $.boolConversionCheck(t1.moveNext$0());)
        t2.add$1(list, $.assertSubtypeOfRuntimeType(t1.get$current(), E));
      if (growable)
        return $.interceptedTypeCheck(list, "$isList");
      $length = t2.get$length(list);
    case 2:
      state0 = 0;
      fixedList = $.List_List($length, E);
      $.setRuntimeTypeInfo(fixedList, [E]);
      $.interceptedTypeCheck(fixedList, "$isList");
    case 3:
      var t1, i;
      state0 = 0;
      for (t1 = $.getInterceptor$ax(fixedList), i = 0; $.JSInt_methods.$lt(i, $length); ++i)
        t1.$indexSet(fixedList, i, t2.$index(list, i));
      return $.interceptedTypeCheck(fixedList, "$isList");
  }
},

Map_Map: function(K, V) {
  return $.interceptedTypeCheck($.HashMap$(K, V), "$isMap");
},

Object$: function() {
  return new $.Object();
},

print: function(object) {
  $.Primitives_printString($.toString$0(object));
},

Stopwatch$: function() {
  return new $.Stopwatch(null, null);
},

Stopwatch__frequency: function() {
  return 1000000;
},

Stopwatch__now: function() {
  return $.intTypeCheck($.Primitives_numMicroseconds());
},

String_String$fromCharCodes: function(charCodes) {
  $.listSuperNativeTypeCheck(charCodes, "$isIterable");
  return $.Primitives_stringFromCharCodes(typeof charCodes !== "object" || charCodes === null || charCodes.constructor !== Array ? $.listSuperNativeTypeCheck($.List_List$from(charCodes, true, null), "$isIterable") : charCodes);
},

StringBuffer$: function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
},

Uri_decodeComponent: function(encodedComponent) {
  return $.Uri__uriDecode(encodedComponent, $.decodeUtf8$closure, false);
},

Uri__hexCharPairToByte: function(s, pos) {
  var t1, $byte, i, t2, charCode;
  for (t1 = s.length, $byte = 0, i = 0; i < 2; ++i) {
    t2 = pos + i;
    if (t2 < 0)
      $.throwExpression(new $.RangeError("value " + t2));
    if (t2 >= t1)
      $.throwExpression(new $.RangeError("value " + t2));
    charCode = s.charCodeAt(t2);
    if (48 <= charCode && charCode <= 57)
      $byte = $byte * 16 + charCode - 48;
    else {
      charCode = (charCode | 32) >>> 0;
      if (97 <= charCode && charCode <= 102)
        $byte = $byte * 16 + charCode - 87;
      else
        throw $.wrapException(new $.ArgumentError("Invalid URL encoding"));
    }
  }
  return $byte;
},

Uri__uriDecode: function(text, decode, plusToSpace) {
  var result, codepoints, t1, t2, t3, i, ch, charCodes, t4, str;
  result = $.StringBuffer$("");
  codepoints = $.List_List(null, $.JSInt);
  $.setRuntimeTypeInfo(codepoints, [$.JSInt]);
  $.interceptedTypeCheck(codepoints, "$isList");
  for (t1 = text.length, t2 = $.getInterceptor$asx(codepoints), t3 = t1 - 2, i = 0; i < t1;) {
    if (i < 0)
      $.throwExpression(new $.RangeError("value " + i));
    if (i >= t1)
      $.throwExpression(new $.RangeError("value " + i));
    ch = text.charCodeAt(i);
    if (ch !== 37) {
      if (plusToSpace && ch === 43)
        result._contents = result._contents + " ";
      else {
        charCodes = $.List_List$filled(1, ch, $.JSInt);
        t4 = [$.JSInt];
        $.assertHelper($.isNull(t4) || $.isJsArray(t4));
        charCodes.$builtinTypeInfo = t4;
        $.interceptedTypeCheck(charCodes, "$isList");
        $.listSuperNativeTypeCheck(charCodes, "$isIterable");
        t4 = $.Primitives_stringFromCharCodes(typeof charCodes !== "object" || charCodes === null || charCodes.constructor !== Array ? $.listSuperNativeTypeCheck($.List_List$from(charCodes, true, null), "$isIterable") : charCodes);
        result._contents = result._contents + t4;
      }
      ++i;
    } else {
      t2.set$length(codepoints, 0);
      for (; ch === 37;) {
        ++i;
        if (i > t3)
          throw $.wrapException(new $.ArgumentError("Truncated URI"));
        t2.add$1(codepoints, $.Uri__hexCharPairToByte(text, i));
        i += 2;
        if (i === t1)
          break;
        if (i < 0)
          $.throwExpression(new $.RangeError("value " + i));
        if (i >= t1)
          $.throwExpression(new $.RangeError("value " + i));
        ch = text.charCodeAt(i);
      }
      str = decode.call$1(codepoints);
      str = $.stringTypeCheck(typeof str === "string" ? str : $.S(str));
      result._contents = result._contents + str;
    }
  }
  return result.toString$0(result);
}}],
["dart.dom.html", "dart:html", , {
Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.JSString]; }, $isIterable: true, $asIterable: function () { return [$.JSString]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true, $asList: function () { return [$.JSString]; }, $isIterable: true, $asIterable: function () { return [$.JSString]; }, $asObject: null},

_ChildrenElementList: {"": "ListBase;_element,_childElements<",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = this._childElements;
    if (t1 == null)
      return this.$$index$bailout(1, index, t1);
    return $.interceptedTypeCheck($.$index$asx(t1, index), "$isElement");
  },
  $$index$bailout: function(state0, index, t1) {
    return $.interceptedTypeCheck($.$index$asx(t1, index), "$isElement");
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isElement");
    t1 = this._element;
    t2 = this._childElements;
    if (t2 == null)
      return this.$$indexSet$bailout(1, t2, value, index, t1);
    $.$$dom_replaceChild$2$x(t1, value, $.$index$asx(t2, index));
  },
  $$indexSet$bailout: function(state0, t2, value, index, t1) {
    $.$$dom_replaceChild$2$x(t1, value, $.$index$asx(t2, index));
  },
  set$length: function(_, newLength) {
    $.intTypeCheck(newLength);
    throw $.wrapException(new $.UnsupportedError("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    $.interceptedTypeCheck(value, "$isElement");
    $.append$1$x(this._element, value);
    return value;
  },
  get$iterator: function(_) {
    return $.assertSubtype($.get$iterator$ax(this.toList$0(this)), "$isIterator", [$.Element], "$asIterator");
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    $.intTypeCheck(end);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    throw $.wrapException(new $.UnimplementedError(null));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.$$dom_removeChild$1$x(this._element, result);
    return result;
  },
  get$first: function(_) {
    var result = this._element.firstElementChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  $asObject: null,
  $asListMixin: function () { return [$.Element]; },
  $asList: function () { return [$.Element]; },
  $asIterable: function () { return [$.Element]; }
},

Entry_remove_closure: {"": "Closure;completer_0",
  call$0: function() {
    var t1 = this.completer_0;
    t1.complete$0(t1);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

Entry_remove_closure0: {"": "Closure;completer_1",
  call$1: function(error) {
    this.completer_1.completeError$1(error);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.File]; }, $isIterable: true, $asIterable: function () { return [$.File]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function () { return [$.File]; }, $isIterable: true, $asIterable: function () { return [$.File]; }, $asObject: null},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }, $asObject: null},

Interceptor_ListMixin2: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin2: {"": "Interceptor_ListMixin2+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }, $asObject: null},

HttpRequest_getString_closure: {"": "Closure;",
  call$1: function(xhr) {
    return $.get$responseText$x(xhr);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

HttpRequest_request_closure: {"": "Closure;xhr_0",
  call$2: function(header, value) {
    $.HttpRequest_methods.setRequestHeader$2(this.xhr_0, header, value);
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_dynamic__int_dynamic: true,
  $is_bool__DigitalButtonEvent_bool: true,
  $is_void__GameLoop_GameLoopTouch: true,
  $is_void__int_String: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__K_V0: true,
  $is_void__RenderingContext_GameLoopHtml: true,
  $is_void__String_String: true
},

HttpRequest_request_closure0: {"": "Closure;completer_1,xhr_2",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_2;
    t2 = t1.status;
    if (t2 == null)
      throw t2.$ge();
    t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
    t3 = this.completer_1;
    if (t2)
      t3.complete$1(t3, t1);
    else
      t3.completeError$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

HttpRequest_request_closure1: {"": "Closure;completer_3",
  call$1: function(e) {
    this.completer_3.completeError$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

Interceptor_ListMixin3: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.MimeType]; }, $isIterable: true, $asIterable: function () { return [$.MimeType]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin3: {"": "Interceptor_ListMixin3+ImmutableListMixin;", $isList: true, $asList: function () { return [$.MimeType]; }, $isIterable: true, $asIterable: function () { return [$.MimeType]; }, $asObject: null},

_ChildNodeListLazy: {"": "ListBase;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    $.append$1$x(this._this, $.interceptedTypeCheck(value, "$isNode"));
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.$$dom_removeChild$1$x(this._this, result);
    return result;
  },
  $indexSet: function(_, index, value) {
    var t1;
    $.intTypeCheck(index);
    t1 = this._this;
    $.$$dom_replaceChild$2$x(t1, $.interceptedTypeCheck(value, "$isNode"), $.NodeList_methods.$index(t1.childNodes, index));
  },
  get$iterator: function(_) {
    return $.assertSubtype($.NodeList_methods.get$iterator(this._this.childNodes), "$isIterator", [$.Node], "$asIterator");
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    $.intTypeCheck(end);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on Node list"));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    $.intTypeCheck(value);
    throw $.wrapException(new $.UnsupportedError("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    $.intTypeCheck(index);
    return $.NodeList_methods.$index(this._this.childNodes, index);
  },
  $asObject: null,
  $asListMixin: function () { return [$.Node]; },
  $asList: function () { return [$.Node]; },
  $asIterable: function () { return [$.Node]; }
},

Interceptor_ListMixin4: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin4: {"": "Interceptor_ListMixin4+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }, $asObject: null},

Interceptor_ListMixin5: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Plugin]; }, $isIterable: true, $asIterable: function () { return [$.Plugin]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin5: {"": "Interceptor_ListMixin5+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Plugin]; }, $isIterable: true, $asIterable: function () { return [$.Plugin]; }, $asObject: null},

EventTarget_ListMixin: {"": "EventTarget+ListMixin;", $isList: true, $asList: function () { return [$.SourceBuffer]; }, $isIterable: true, $asIterable: function () { return [$.SourceBuffer]; }, $asObject: null},

EventTarget_ListMixin_ImmutableListMixin: {"": "EventTarget_ListMixin+ImmutableListMixin;", $isList: true, $asList: function () { return [$.SourceBuffer]; }, $isIterable: true, $asIterable: function () { return [$.SourceBuffer]; }, $asObject: null},

Interceptor_ListMixin6: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.SpeechGrammar]; }, $isIterable: true, $asIterable: function () { return [$.SpeechGrammar]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin6: {"": "Interceptor_ListMixin6+ImmutableListMixin;", $isList: true, $asList: function () { return [$.SpeechGrammar]; }, $isIterable: true, $asIterable: function () { return [$.SpeechGrammar]; }, $asObject: null},

Storage_keys_closure: {"": "Closure;keys_0",
  call$2: function(k, v) {
    return $.JSArray_methods.add$1(this.keys_0, k);
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_dynamic__int_dynamic: true,
  $is_bool__DigitalButtonEvent_bool: true,
  $is_void__GameLoop_GameLoopTouch: true,
  $is_void__int_String: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__K_V0: true,
  $is_void__RenderingContext_GameLoopHtml: true,
  $is_void__String_String: true
},

Storage_values_closure: {"": "Closure;values_0",
  call$2: function(k, v) {
    return $.JSArray_methods.add$1(this.values_0, v);
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_dynamic__int_dynamic: true,
  $is_bool__DigitalButtonEvent_bool: true,
  $is_void__GameLoop_GameLoopTouch: true,
  $is_void__int_String: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__K_V0: true,
  $is_void__RenderingContext_GameLoopHtml: true,
  $is_void__String_String: true
},

closure: {"": "Closure;",
  call$1: function(node) {
    throw $.wrapException($.UnsupportedError$("The MDV package is not available. You can enable it with `import 'package:mdv/mdv.dart' as mdv;` and `mdv.initialize()`"));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

Interceptor_ListMixin7: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.TextTrackCue]; }, $isIterable: true, $asIterable: function () { return [$.TextTrackCue]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin7: {"": "Interceptor_ListMixin7+ImmutableListMixin;", $isList: true, $asList: function () { return [$.TextTrackCue]; }, $isIterable: true, $asIterable: function () { return [$.TextTrackCue]; }, $asObject: null},

EventTarget_ListMixin0: {"": "EventTarget+ListMixin;", $isList: true, $asList: function () { return [$.TextTrack]; }, $isIterable: true, $asIterable: function () { return [$.TextTrack]; }, $asObject: null},

EventTarget_ListMixin_ImmutableListMixin0: {"": "EventTarget_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function () { return [$.TextTrack]; }, $isIterable: true, $asIterable: function () { return [$.TextTrack]; }, $asObject: null},

Interceptor_ListMixin8: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Touch]; }, $isIterable: true, $asIterable: function () { return [$.Touch]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin8: {"": "Interceptor_ListMixin8+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Touch]; }, $isIterable: true, $asIterable: function () { return [$.Touch]; }, $asObject: null},

Interceptor_ListMixin9: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Rect]; }, $isIterable: true, $asIterable: function () { return [$.Rect]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin9: {"": "Interceptor_ListMixin9+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Rect]; }, $isIterable: true, $asIterable: function () { return [$.Rect]; }, $asObject: null},

Interceptor_ListMixin10: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.CssRule]; }, $isIterable: true, $asIterable: function () { return [$.CssRule]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin10: {"": "Interceptor_ListMixin10+ImmutableListMixin;", $isList: true, $asList: function () { return [$.CssRule]; }, $isIterable: true, $asIterable: function () { return [$.CssRule]; }, $asObject: null},

_CSSValue_ListMixin: {"": "_CSSValue+ListMixin;", $isList: true, $asList: function () { return [$._CSSValue]; }, $isIterable: true, $asIterable: function () { return [$._CSSValue]; }, $asObject: null},

_CSSValue_ListMixin_ImmutableListMixin: {"": "_CSSValue_ListMixin+ImmutableListMixin;", $isList: true, $asList: function () { return [$._CSSValue]; }, $isIterable: true, $asIterable: function () { return [$._CSSValue]; }, $asObject: null},

Interceptor_ListMixin11: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Entry]; }, $isIterable: true, $asIterable: function () { return [$.Entry]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin11: {"": "Interceptor_ListMixin11+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Entry]; }, $isIterable: true, $asIterable: function () { return [$.Entry]; }, $asObject: null},

Interceptor_ListMixin12: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$._EntrySync]; }, $isIterable: true, $asIterable: function () { return [$._EntrySync]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin12: {"": "Interceptor_ListMixin12+ImmutableListMixin;", $isList: true, $asList: function () { return [$._EntrySync]; }, $isIterable: true, $asIterable: function () { return [$._EntrySync]; }, $asObject: null},

Interceptor_ListMixin13: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Gamepad]; }, $isIterable: true, $asIterable: function () { return [$.Gamepad]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin13: {"": "Interceptor_ListMixin13+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Gamepad]; }, $isIterable: true, $asIterable: function () { return [$.Gamepad]; }, $asObject: null},

Interceptor_ListMixin14: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin14: {"": "Interceptor_ListMixin14+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Node]; }, $isIterable: true, $asIterable: function () { return [$.Node]; }, $asObject: null},

Interceptor_ListMixin15: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.SpeechInputResult]; }, $isIterable: true, $asIterable: function () { return [$.SpeechInputResult]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin15: {"": "Interceptor_ListMixin15+ImmutableListMixin;", $isList: true, $asList: function () { return [$.SpeechInputResult]; }, $isIterable: true, $asIterable: function () { return [$.SpeechInputResult]; }, $asObject: null},

Interceptor_ListMixin16: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.SpeechRecognitionResult]; }, $isIterable: true, $asIterable: function () { return [$.SpeechRecognitionResult]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin16: {"": "Interceptor_ListMixin16+ImmutableListMixin;", $isList: true, $asList: function () { return [$.SpeechRecognitionResult]; }, $isIterable: true, $asIterable: function () { return [$.SpeechRecognitionResult]; }, $asObject: null},

Interceptor_ListMixin17: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.StyleSheet]; }, $isIterable: true, $asIterable: function () { return [$.StyleSheet]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin17: {"": "Interceptor_ListMixin17+ImmutableListMixin;", $isList: true, $asList: function () { return [$.StyleSheet]; }, $isIterable: true, $asIterable: function () { return [$.StyleSheet]; }, $asObject: null},

_EventStream: {"": "Stream;_liblib$_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    $.assertFunctionSubtype(onData, "void__T", "_EventStream", this);
    $.assertFunctionSubtype(onDone, "void_");
    $.assertFunctionSubtype(onError, "void__dynamic");
    return $.assertSubtype($._EventStreamSubscription$(this._liblib$_target, this._eventType, onData, this._useCapture, $.getRuntimeTypeArgument(this, "_EventStream", 0)), "$isStreamSubscription", [$.getRuntimeTypeArgument(this, "_EventStream", 0)], "$asStreamSubscription");
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  $asStream: null,
  $asObject: null
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_liblib$_target,_eventType,_onData,_useCapture",
  cancel$0: function(_) {
    if (this.get$_canceled())
      return;
    this._unlisten$0();
    this._liblib$_target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._liblib$_target == null;
  },
  get$isPaused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && !this.get$isPaused())
      $.$$dom_addEventListener$3$x(this._liblib$_target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._liblib$_target, this._eventType, t1, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture, T) {
    this._tryResume$0();
  },
  $asStreamSubscription: null,
  $asObject: null
},

EventStreamProvider: {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $.assertSubtype($._EventStream$(e, this._eventType, useCapture, null), "$isStream", [$.getRuntimeTypeArgument(this, "EventStreamProvider", 0)], "$asStream");
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
},

_CustomEventStreamProvider: {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    return $.assertSubtype($._EventStream$(e, this._eventTypeGetter$1(e), useCapture, null), "$isStream", [$.getRuntimeTypeArgument(this, "_CustomEventStreamProvider", 0)], "$asStream");
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  $asObject: null
},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return $.assertSubtype($.FixedSizeListIterator$(receiver, $.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)), "$isIterator", [$.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)], "$asIterator");
  },
  add$1: function(receiver, value) {
    var $arguments = $.getRuntimeTypeArguments(receiver, "ImmutableListMixin");
    $.assertSubtypeOfRuntimeType(value, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
    throw $.wrapException(new $.UnsupportedError("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $arguments, t1;
    $.intTypeCheck(end);
    $arguments = $.getRuntimeTypeArguments(receiver, "ImmutableListMixin");
    t1 = $.isNull($arguments) ? null : $.getIndex($arguments, 0);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null,
  $asObject: null
},

Point: {"": "Object;x,y",
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isPoint)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.JenkinsSmiHash_hash2($.get$hashCode$(this.x), $.get$hashCode$(this.y));
  },
  $add: function(_, other) {
    var t1, t2, t3;
    $.propertyTypeCheck(other, "$isPoint");
    t1 = this.x;
    t2 = other.x;
    if (t1 == null)
      throw t1.$add();
    t2 = $.JSNumber_methods.$add(t1, t2);
    t1 = this.y;
    t3 = other.y;
    if (t1 == null)
      throw t1.$add();
    return $.Point$(t2, $.JSNumber_methods.$add(t1, t3));
  },
  $isPoint: true
},

Rect: {"": "Object;left>,top>,width>,height>",
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = this.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = this.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = this.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = this.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.JenkinsSmiHash_hash4($.get$hashCode$(this.left), $.get$hashCode$(this.top), $.get$hashCode$(this.width), $.get$hashCode$(this.height));
  },
  $isRect: true,
  $asRect: null
},

FixedSizeListIterator: {"": "Object;_array,_liblib$_length,_liblib$_position,_liblib$_current?",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._liblib$_position;
    if (t1 == null)
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib$_length;
    if (t1 == null)
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
        return this.moveNext$0$bailout(3, t1, nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this.set$_liblib$_current(t1[nextPosition]);
      this._liblib$_position = nextPosition;
      return true;
    }
    this.set$_liblib$_current(null);
    this._liblib$_position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._liblib$_position;
      case 1:
        state0 = 0;
        if (t1 == null)
          throw t1.$add();
        nextPosition = t1 + 1;
        t1 = this._liblib$_length;
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && $.JSInt_methods.$lt(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this.set$_liblib$_current($.$index$asx(t1, nextPosition));
              this._liblib$_position = nextPosition;
              return true;
          }
        this.set$_liblib$_current(null);
        this._liblib$_position = t1;
        return false;
    }
  },
  get$current: function() {
    var t1, $arguments;
    t1 = this._liblib$_current;
    $arguments = $.getRuntimeTypeArguments(this, "FixedSizeListIterator");
    return $.assertSubtypeOfRuntimeType(t1, $.isNull($arguments) ? null : $.getIndex($arguments, 0));
  },
  $isIterator: true,
  $asObject: null
},

window: function() {
  return window;
},

document: function() {
  return document;
},

query: function(selector) {
  return $.HtmlDocument_methods.query$1($.document(), selector);
},

AnchorElement_AnchorElement: function(href) {
  var e = $.HtmlDocument_methods.$$dom_createElement$1($.document(), "a");
  return $.interceptedTypeCheck(e, "$isAnchorElement");
},

CanvasElement_CanvasElement: function(height, width) {
  var e = $.HtmlDocument_methods.$$dom_createElement$1($.document(), "canvas");
  return $.interceptedTypeCheck(e, "$isCanvasElement");
},

DivElement_DivElement: function() {
  return $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1($.document(), "div"), "$isDivElement");
},

Element__determineMouseWheelEventType: function(e) {
  $.interceptedTypeCheck(e, "$isEventTarget");
  if (e.onwheel !== undefined)
    return "wheel";
  else if (e.onmousewheel !== undefined)
    return "mousewheel";
  else
    return "DOMMouseScroll";
},

HttpRequest_getString: function(url, onProgress, withCredentials) {
  return $.assertSubtype($.HttpRequest_request(url, null, null, $.assertFunctionSubtype(onProgress, "void__ProgressEvent"), null, null, null, withCredentials).then$1(new $.HttpRequest_getString_closure()), "$isFuture", [$.JSString], "$asFuture");
},

HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
  var completer, xhr;
  $.assertFunctionSubtype(onProgress, "void__ProgressEvent");
  $.interceptedTypeCheck(requestHeaders, "$isMap");
  completer = $.Completer_Completer($.HttpRequest);
  xhr = $.HttpRequest_HttpRequest();
  $.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
  if (requestHeaders != null)
    $.forEach$1$ax(requestHeaders, new $.HttpRequest_request_closure(xhr));
  $.HttpRequest_methods.get$onLoad(xhr).listen$1(new $.HttpRequest_request_closure0(completer, xhr));
  $.HttpRequest_methods.get$onError(xhr).listen$1(new $.HttpRequest_request_closure1(completer));
  xhr.send();
  return $.assertSubtype(completer.future, "$isFuture", [$.HttpRequest], "$asFuture");
},

HttpRequest_HttpRequest: function() {
  return $.HttpRequest__create_1();
},

HttpRequest__create_1: function() {
  return new XMLHttpRequest();
},

ImageElement_ImageElement: function(height, src, width) {
  var e = $.HtmlDocument_methods.$$dom_createElement$1($.document(), "img");
  return $.interceptedTypeCheck(e, "$isImageElement");
},

InputElement_InputElement: function(type) {
  var e, exception;
  e = $.HtmlDocument_methods.$$dom_createElement$1($.document(), "input");
  if (type != null)
    try {
      $.set$type$x(e, type);
    } catch (exception) {
      $.unwrapException(exception);
    }

  return $.interceptedTypeCheck(e, "$isInputElement");
},

LabelElement_LabelElement: function() {
  return $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1($.document(), "label"), "$isLabelElement");
},

_ChildNodeListLazy$: function(_this) {
  return new $._ChildNodeListLazy(_this);
},

ParagraphElement_ParagraphElement: function() {
  return $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1($.document(), "p"), "$isParagraphElement");
},

Text_Text: function(data) {
  return $.HtmlDocument_methods.$$dom_createTextNode$1($.document(), data);
},

WebSocket_WebSocket: function(url, protocol_OR_protocols) {
  var t1, t2;
  t1 = typeof url !== "string";
  if ((typeof url === "string" || url == null) && true)
    return $.WebSocket__create_1(url);
  t2 = $.checkSubtype(protocol_OR_protocols, "$isList", [$.JSString], "$asList");
  if (!t2)
    ;
  t2 = typeof url === "string" || url == null;
  if (t2)
    return $.WebSocket__create_2(url, protocol_OR_protocols);
  t1 = typeof url === "string" || url == null;
  if (t1)
    return $.WebSocket__create_3(url, protocol_OR_protocols);
  throw $.wrapException($.ArgumentError$("Incorrect number or type of arguments"));
},

WebSocket__create_1: function(url) {
  return new WebSocket(url);
},

WebSocket__create_2: function(url, protocol_OR_protocols) {
  return new WebSocket(url, protocol_OR_protocols);
},

WebSocket__create_3: function(url, protocol_OR_protocols) {
  return new WebSocket(url, protocol_OR_protocols);
},

_EventStream$: function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, $.stringTypeCheck(_eventType), _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
},

_EventStreamSubscription$: function(_target, _eventType, _onData, _useCapture, T) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture, T);
  return t1;
},

Point$: function(x, y) {
  return new $.Point(x, y);
},

FixedSizeListIterator$: function(array, T) {
  var t1;
  $.interceptedTypeCheck(array, "$isList");
  t1 = $.get$length$asx(array);
  t1 = new $.FixedSizeListIterator($.interceptedTypeCheck(array, "$isList"), t1, -1, $.assertSubtypeOfRuntimeType(null, T));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
}}],
["dart.dom.svg", "dart:svg", , {
Interceptor_ListMixin18: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Length]; }, $isIterable: true, $asIterable: function () { return [$.Length]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin18: {"": "Interceptor_ListMixin18+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Length]; }, $isIterable: true, $asIterable: function () { return [$.Length]; }, $asObject: null},

Interceptor_ListMixin19: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Number]; }, $isIterable: true, $asIterable: function () { return [$.Number]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin19: {"": "Interceptor_ListMixin19+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Number]; }, $isIterable: true, $asIterable: function () { return [$.Number]; }, $asObject: null},

Interceptor_ListMixin20: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.PathSeg]; }, $isIterable: true, $asIterable: function () { return [$.PathSeg]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin20: {"": "Interceptor_ListMixin20+ImmutableListMixin;", $isList: true, $asList: function () { return [$.PathSeg]; }, $isIterable: true, $asIterable: function () { return [$.PathSeg]; }, $asObject: null},

Interceptor_ListMixin21: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.JSString]; }, $isIterable: true, $asIterable: function () { return [$.JSString]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin21: {"": "Interceptor_ListMixin21+ImmutableListMixin;", $isList: true, $asList: function () { return [$.JSString]; }, $isIterable: true, $asIterable: function () { return [$.JSString]; }, $asObject: null},

Interceptor_ListMixin22: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Transform]; }, $isIterable: true, $asIterable: function () { return [$.Transform]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin22: {"": "Interceptor_ListMixin22+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Transform]; }, $isIterable: true, $asIterable: function () { return [$.Transform]; }, $asObject: null},

Interceptor_ListMixin23: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.ElementInstance]; }, $isIterable: true, $asIterable: function () { return [$.ElementInstance]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin23: {"": "Interceptor_ListMixin23+ImmutableListMixin;", $isList: true, $asList: function () { return [$.ElementInstance]; }, $isIterable: true, $asIterable: function () { return [$.ElementInstance]; }, $asObject: null}}],
["dart.dom.web_sql", "dart:web_sql", , {
Interceptor_ListMixin24: {"": "Interceptor+ListMixin;", $isList: true, $asList: function () { return [$.Map]; }, $isIterable: true, $asIterable: function () { return [$.Map]; }, $asObject: null},

Interceptor_ListMixin_ImmutableListMixin24: {"": "Interceptor_ListMixin24+ImmutableListMixin;", $isList: true, $asList: function () { return [$.Map]; }, $isIterable: true, $asIterable: function () { return [$.Map]; }, $asObject: null}}],
["dart.isolate", "dart:isolate", , {
SendPort: {"": "Object;", $isSendPort: true, $isFunction: true, $asObject: null, $signature: function () { return {func: "Future__dynamic", ret: $.Future, args: [null]}; }},

ReceivePort: {"": "Object;", $isReceivePort: true},

port: function() {
  return $._Isolate_port();
},

ReceivePort_ReceivePort: function() {
  return $.ReceivePortImpl$();
},

_Isolate_port: function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
}}],
["dart.json", "dart:json", , {
_convertJsonToDart_closure: {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_dynamic__int_dynamic: true,
  $is_bool__DigitalButtonEvent_bool: true,
  $is_void__GameLoop_GameLoopTouch: true,
  $is_void__int_String: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__K_V0: true,
  $is_void__RenderingContext_GameLoopHtml: true,
  $is_void__String_String: true
},

_convertJsonToDart_walk: {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = $.stringTypeCheck(keys[i]);
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

JsonUnsupportedObjectError: {"": "Error;unsupportedObject,cause",
  toString$0: function(_) {
    if (this.cause != null)
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  }
},

JsonCyclicError: {"": "JsonUnsupportedObjectError;unsupportedObject,cause",
  toString$0: function(_) {
    return "Cyclic error in JSON stringify";
  }
},

_JsonStringifier: {"": "Object;sb<,seen",
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw $.wrapException(new $.JsonCyclicError(object, null));
    }
    $.JSArray_methods.add$1(t1, object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!this.stringifyJsonValue$1(object)) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!this.stringifyJsonValue$1(customJson))
          throw $.wrapException(new $.JsonUnsupportedObjectError(object, null));
        t1 = this.seen;
        if (0 >= t1.length)
          throw $.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        throw $.wrapException(new $.JsonUnsupportedObjectError(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, i, t2;
    t1 = {};
    if (typeof object === "number") {
      t1 = this.sb;
      t1.write$1(t1, $._JsonStringifier_numberToString(object));
      return true;
    } else if (object === true) {
      t1 = this.sb;
      t1.write$1(t1, "true");
      return true;
    } else if (object === false) {
      t1 = this.sb;
      t1.write$1(t1, "false");
      return true;
    } else if (object == null) {
      t1 = this.sb;
      t1.write$1(t1, "null");
      return true;
    } else if (typeof object === "string") {
      t1 = this.sb;
      t1.write$1(t1, "\"");
      $._JsonStringifier_escape(t1, object);
      t1.write$1(t1, "\"");
      return true;
    } else if (typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList)) {
      if (typeof object !== "string" && (typeof object !== "object" || object === null || object.constructor !== Array && !$.isJsIndexable(object, object[$.dispatchPropertyName])))
        return this.stringifyJsonValue$1$bailout(1, object);
      this.checkCycle$1(object);
      t1 = this.sb;
      t1.write$1(t1, "[");
      if (object.length > 0) {
        this.stringifyValue$1(object[0]);
        for (i = 1; i < object.length; ++i) {
          t1._contents = t1._contents + ",";
          if (i >= object.length)
            throw $.ioore(i);
          this.stringifyValue$1(object[i]);
        }
      }
      t1.write$1(t1, "]");
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
      this.checkCycle$1(object);
      object = $.interceptedTypeCheck(object, "$isMap");
      t2 = this.sb;
      t2.write$1(t2, "{");
      t1.first_0 = true;
      $.forEach$1$ax(object, new $._JsonStringifier_stringifyJsonValue_closure(t1, this));
      t2.write$1(t2, "}");
      t2 = this.seen;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2.pop();
      return true;
    } else
      return false;
  },
  stringifyJsonValue$1$bailout: function(state0, object) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, t2, t3, i;
        if (state0 === 0 && typeof object === "number") {
          t1 = this.sb;
          t1.write$1(t1, $._JsonStringifier_numberToString(object));
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                t1 = this.sb;
                t1.write$1(t1, "true");
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      t1 = this.sb;
                      t1.write$1(t1, "false");
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            t1 = this.sb;
                            t1.write$1(t1, "null");
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sb;
                                  t1.write$1(t1, "\"");
                                  $._JsonStringifier_escape(t1, object);
                                  t1.write$1(t1, "\"");
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t1 = this.sb;
                                            t1.write$1(t1, "[");
                                            t2 = $.getInterceptor$asx(object);
                                            t3 = t2.get$length(object);
                                            if (t3 == null)
                                              throw t3.$gt();
                                            if (t3 > 0) {
                                              this.stringifyValue$1(t2.$index(object, 0));
                                              for (i = 1; $.JSInt_methods.$lt(i, t2.get$length(object)); ++i) {
                                                t1._contents = t1._contents + ",";
                                                this.stringifyValue$1(t2.$index(object, i));
                                              }
                                            }
                                            t1.write$1(t1, "]");
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw $.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
                                        this.checkCycle$1(object);
                                        object = $.interceptedTypeCheck(object, "$isMap");
                                        t2 = this.sb;
                                        t2.write$1(t2, "{");
                                        t1.first_0 = true;
                                        $.forEach$1$ax(object, new $._JsonStringifier_stringifyJsonValue_closure(t1, this));
                                        t2.write$1(t2, "}");
                                        t2 = this.seen;
                                        if (0 >= t2.length)
                                          throw $.ioore(0);
                                        t2.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  },
  $is_JsonStringifier: true
},

_JsonStringifier_stringifyJsonValue_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, value) {
    var t1, t2, t3;
    $.stringTypeCheck(key);
    t1 = this.box_0;
    t2 = this.this_1;
    if (!t1.first_0) {
      t2 = t2.get$sb();
      t2.write$1(t2, ",\"");
    } else {
      t2 = t2.get$sb();
      t2.write$1(t2, "\"");
    }
    t2 = this.this_1;
    $._JsonStringifier_escape(t2.get$sb(), key);
    t3 = t2.get$sb();
    t3.write$1(t3, "\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__String_Object", args: [$.JSString, $.Object]}; }
},

_convertJsonToDart: function(json, reviver) {
  var revive;
  $.assertFunctionSubtype(reviver, "dynamic__dynamic_dynamic");
  revive = reviver == null ? new $._convertJsonToDart_closure() : reviver;
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
},

parse: function(json, reviver) {
  var parsed, e, t1, exception;
  $.stringTypeCheck(json);
  $.assertFunctionSubtype(reviver, "dynamic__dynamic_dynamic");
  t1 = json;
  if (typeof t1 !== "string")
    throw $.wrapException($.ArgumentError$(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.wrapException($.FormatException$(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
},

stringify: function(object) {
  return $._JsonStringifier_stringify(object);
},

_JsonStringifier$: function(sb) {
  return new $._JsonStringifier(sb, $.interceptedTypeCheck([], "$isList"));
},

_JsonStringifier_stringify: function(object) {
  var output = $.StringBuffer$("");
  $._JsonStringifier$(output).stringifyValue$1(object);
  return output.toString$0(output);
},

_JsonStringifier_numberToString: function(x) {
  return $.JSNumber_methods.toString$0(x);
},

_JsonStringifier_escape: function(sb, s) {
  var $length, charCodes, t1, needsEscape, i, charCode, t2;
  $length = s.length;
  charCodes = $.List_List(null, $.JSInt);
  $.setRuntimeTypeInfo(charCodes, [$.JSInt]);
  for (t1 = $.getInterceptor$s(s), needsEscape = false, i = 0; i < $length; ++i) {
    charCode = t1.codeUnitAt$1(s, i);
    if (charCode < 32) {
      $.JSArray_methods.add$1(charCodes, 92);
      switch (charCode) {
        case 8:
          $.JSArray_methods.add$1(charCodes, 98);
          break;
        case 9:
          $.JSArray_methods.add$1(charCodes, 116);
          break;
        case 10:
          $.JSArray_methods.add$1(charCodes, 110);
          break;
        case 12:
          $.JSArray_methods.add$1(charCodes, 102);
          break;
        case 13:
          $.JSArray_methods.add$1(charCodes, 114);
          break;
        default:
          $.JSArray_methods.add$1(charCodes, 117);
          t2 = $.JSInt_methods.$shr(charCode, 12) & 15;
          $.JSArray_methods.add$1(charCodes, t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = $.JSInt_methods.$shr(charCode, 8) & 15;
          $.JSArray_methods.add$1(charCodes, t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = $.JSInt_methods.$shr(charCode, 4) & 15;
          $.JSArray_methods.add$1(charCodes, t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = charCode & 15;
          $.JSArray_methods.add$1(charCodes, t2 < 10 ? 48 + t2 : 87 + t2);
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      $.JSArray_methods.add$1(charCodes, 92);
      $.JSArray_methods.add$1(charCodes, charCode);
      needsEscape = true;
    } else
      $.JSArray_methods.add$1(charCodes, charCode);
  }
  sb.write$1(sb, needsEscape ? $.String_String$fromCharCodes(charCodes) : s);
}}],
["dart.math", "dart:math", , {
min: function(a, b) {
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0 && $.JSDouble_methods.get$isNegative(b) || $.JSDouble_methods.get$isNaN(b))
      return b;
    return a;
  }
  return a;
  throw $.wrapException($.ArgumentError$(b));
  throw $.wrapException($.ArgumentError$(a));
},

max: function(a, b) {
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if ($.JSDouble_methods.get$isNaN(b))
      return b;
    return a;
  }
  if (b === 0 && $.JSInt_methods.get$isNegative(a))
    return b;
  return a;
  throw $.wrapException($.ArgumentError$(b));
  throw $.wrapException($.ArgumentError$(a));
},

sin: function(x) {
  return Math.sin($.checkNum(x));
},

cos: function(x) {
  return Math.cos($.checkNum(x));
},

tan: function(x) {
  return Math.tan($.checkNum(x));
},

sqrt: function(x) {
  return Math.sqrt($.checkNum(x));
}}],
["dart.typed_data", "dart:typed_data", , {
TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: function () { return [$.JSDouble]; }, $isIterable: true, $asIterable: function () { return [$.JSDouble]; }, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asObject: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: function () { return [$.JSDouble]; }, $isIterable: true, $asIterable: function () { return [$.JSDouble]; }, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asObject: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: function () { return [$.JSInt]; }, $isIterable: true, $asIterable: function () { return [$.JSInt]; }, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asObject: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: function () { return [$.JSInt]; }, $isIterable: true, $asIterable: function () { return [$.JSInt]; }, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asObject: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: function () { return [$.JSInt]; }, $isIterable: true, $asIterable: function () { return [$.JSInt]; }, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asObject: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: function () { return [$.JSInt]; }, $isIterable: true, $asIterable: function () { return [$.JSInt]; }, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asObject: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: function () { return [$.JSInt]; }, $isIterable: true, $asIterable: function () { return [$.JSInt]; }, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asObject: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: function () { return [$.JSInt]; }, $isIterable: true, $asIterable: function () { return [$.JSInt]; }, $asObject: null},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asObject: null},

_ensureNativeList: function(list) {
  return list;
},

Float32List_Float32List: function($length) {
  return $.Float32List__create1($length);
},

Float32List_Float32List$fromList: function(list) {
  return $.Float32List__create1($._ensureNativeList($.interceptedTypeCheck(list, "$isList")));
},

Float32List__create1: function(arg) {
  return new Float32Array(arg);
},

Uint16List_Uint16List$fromList: function(list) {
  return $.Uint16List__create1($._ensureNativeList($.interceptedTypeCheck(list, "$isList")));
},

Uint16List__create1: function(arg) {
  return new Uint16Array(arg);
},

Uint8List_Uint8List: function($length) {
  return $.Uint8List__create1($length);
},

Uint8List_Uint8List$fromList: function(list) {
  return $.Uint8List__create1($._ensureNativeList($.interceptedTypeCheck(list, "$isList")));
},

Uint8List__create1: function(arg) {
  return new Uint8Array(arg);
}}],
["dart.utf", "dart:utf", , {
_ListRange: {"": "IterableBase;_source,_offset,_liblib6$_length",
  get$iterator: function(_) {
    var t1 = this._offset;
    if (t1 == null)
      throw t1.$add();
    return $._ListRangeIteratorImpl$(this._source, t1, $.JSInt_methods.$add(t1, this._liblib6$_length));
  },
  get$length: function(_) {
    return this._liblib6$_length;
  },
  _ListRange$3: function(source, offset, $length) {
    var t1, t2, t3;
    t1 = this._offset;
    if (t1 == null)
      throw t1.$lt();
    if (t1 < 0 || $.JSInt_methods.$gt(t1, $.get$length$asx(this._source)))
      throw $.wrapException($.RangeError$value(t1));
    t2 = this._liblib6$_length;
    if (t2 != null) {
      if (t2 == null)
        throw t2.$lt();
      t3 = t2 < 0;
    } else
      t3 = false;
    if (t3)
      throw $.wrapException($.RangeError$value(t2));
    if (t2 == null)
      throw t2.$add();
    if ($.JSInt_methods.$gt(t2 + t1, $.get$length$asx(this._source)))
      throw $.wrapException($.RangeError$value(t2 + t1));
  },
  $asIterableBase: function () { return [null]; },
  $asObject: null,
  $asIterable: function () { return [null]; }
},

_ListRangeIteratorImpl: {"": "Object;_source,_offset,_liblib6$_end",
  get$current: function() {
    var t1, t2;
    t1 = this._source;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.isJsIndexable(t1, t1[$.dispatchPropertyName])))
      return this.get$current$bailout(1, t1);
    t2 = this._offset;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return $.intTypeCheck(t1[t2]);
  },
  get$current$bailout: function(state0, t1) {
    return $.intTypeCheck($.$index$asx(t1, this._offset));
  },
  moveNext$0: function() {
    var t1 = this._offset + 1;
    this._offset = t1;
    return t1 < this._liblib6$_end;
  },
  get$remaining: function() {
    return this._liblib6$_end - this._offset - 1;
  },
  $is_ListRangeIterator: true,
  $isIterator: true,
  $asIterator: function () { return [$.JSInt]; },
  $asObject: null
},

Utf8Decoder: {"": "Object;utf8EncodedBytesIterator,replacementCodepoint,_liblib6$_current",
  decodeRest$0: function() {
    var codepoints, i, i0, t1, truncCodepoints;
    codepoints = $.List_List(this.utf8EncodedBytesIterator.get$remaining(), $.JSInt);
    $.setRuntimeTypeInfo(codepoints, [$.JSInt]);
    $.interceptedTypeCheck(codepoints, "$isList");
    if (typeof codepoints !== "object" || codepoints === null || (codepoints.constructor !== Array || !!codepoints.immutable$list) && !$.isJsIndexable(codepoints, codepoints[$.dispatchPropertyName]))
      return this.decodeRest$0$bailout(1, codepoints);
    for (i = 0; this.moveNext$0(); i = i0) {
      i0 = i + 1;
      t1 = this._liblib6$_current;
      if (i >= codepoints.length)
        throw $.ioore(i);
      codepoints[i] = t1;
    }
    if (i === codepoints.length)
      return $.interceptedTypeCheck(codepoints, "$isList");
    else {
      truncCodepoints = $.List_List(i, $.JSInt);
      $.setRuntimeTypeInfo(truncCodepoints, [$.JSInt]);
      $.interceptedTypeCheck(truncCodepoints, "$isList");
      $.setRange$3$ax(truncCodepoints, 0, i, codepoints);
      return $.interceptedTypeCheck(truncCodepoints, "$isList");
    }
  },
  decodeRest$0$bailout: function(state0, codepoints) {
    var t1, i, i0, truncCodepoints;
    for (t1 = $.getInterceptor$asx(codepoints), i = 0; this.moveNext$0(); i = i0) {
      i0 = i + 1;
      t1.$indexSet(codepoints, i, this._liblib6$_current);
    }
    if (i === t1.get$length(codepoints))
      return $.interceptedTypeCheck(codepoints, "$isList");
    else {
      truncCodepoints = $.List_List(i, $.JSInt);
      $.setRuntimeTypeInfo(truncCodepoints, [$.JSInt]);
      $.interceptedTypeCheck(truncCodepoints, "$isList");
      $.setRange$3$ax(truncCodepoints, 0, i, codepoints);
      return $.interceptedTypeCheck(truncCodepoints, "$isList");
    }
  },
  get$current: function() {
    return this._liblib6$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3, t4, t5, t6, value, additionalBytes, j, validSequence, nonOverlong, inRange;
    this._liblib6$_current = null;
    t1 = this.utf8EncodedBytesIterator;
    t2 = t1._offset + 1;
    t1._offset = t2;
    t3 = t1._liblib6$_end;
    if (t2 >= t3)
      return false;
    t2 = t1._source;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.isJsIndexable(t2, t2[$.dispatchPropertyName])))
      return this.moveNext$0$bailout(1, t3, t2, t1);
    t4 = t1._offset;
    t5 = $.getInterceptor(t2);
    if (t4 < 0 || t4 >= t2.length)
      throw $.ioore(t4);
    t6 = t2[t4];
    $.intTypeCheck(t6);
    if (t6 == null)
      return this.moveNext$0$bailout(2, t3, t2, t1, t5, t6);
    if (t6 < 0) {
      t1 = this.replacementCodepoint;
      if (t1 != null) {
        this._liblib6$_current = t1;
        return true;
      } else
        throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + t4));
    } else if (t6 <= 127) {
      this._liblib6$_current = t6;
      return true;
    } else if (t6 < 192) {
      t1 = this.replacementCodepoint;
      if (t1 != null) {
        this._liblib6$_current = t1;
        return true;
      } else
        throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + t4));
    } else if (t6 < 224) {
      value = t6 - 192;
      additionalBytes = 1;
    } else if (t6 < 240) {
      value = t6 - 224;
      additionalBytes = 2;
    } else if (t6 < 248) {
      value = t6 - 240;
      additionalBytes = 3;
    } else if (t6 < 252) {
      value = t6 - 248;
      additionalBytes = 4;
    } else {
      if (t6 < 254)
        value = t6 - 252;
      else {
        t1 = this.replacementCodepoint;
        if (t1 != null) {
          this._liblib6$_current = t1;
          return true;
        } else
          throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + t4));
      }
      additionalBytes = 5;
    }
    j = 0;
    while (true) {
      if (j < additionalBytes) {
        t4 = t1._offset + 1;
        t1._offset = t4;
        t4 = t4 < t3;
      } else
        t4 = false;
      if (!t4)
        break;
      t4 = t1._offset;
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t6 = t2[t4];
      $.intTypeCheck(t6);
      if (t6 == null)
        return this.moveNext$0$bailout(3, t3, t2, t1, t5, t6, j, additionalBytes, value);
      if (t6 > 127 && t6 < 192)
        value = (value << 6 | t6 & 63) >>> 0;
      else {
        if (t6 >= 192)
          t1._offset = t4 - 1;
        break;
      }
      ++j;
    }
    if (j === additionalBytes)
      validSequence = value < 55296 || value > 57343;
    else
      validSequence = false;
    if (!(additionalBytes === 1 && value > 127))
      if (!(additionalBytes === 2 && value > 2047)) {
        t2 = additionalBytes === 3 && value > 65535;
        nonOverlong = t2;
      } else
        nonOverlong = true;
    else
      nonOverlong = true;
    inRange = value <= 1114111;
    if (validSequence && nonOverlong && inRange) {
      this._liblib6$_current = value;
      return true;
    } else {
      t2 = this.replacementCodepoint;
      if (t2 != null) {
        this._liblib6$_current = t2;
        return true;
      } else
        throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + (t1._offset - j)));
    }
  },
  moveNext$0$bailout: function(state0, t3, t2, t1, t4, t5, j, additionalBytes, value) {
    switch (state0) {
      case 0:
        this._liblib6$_current = null;
        t1 = this.utf8EncodedBytesIterator;
        t2 = t1._offset + 1;
        t1._offset = t2;
        t3 = t1._liblib6$_end;
        if (t2 >= t3)
          return false;
        t2 = t1._source;
      case 1:
        state0 = 0;
        t4 = $.getInterceptor$asx(t2);
        t5 = t4.$index(t2, t1._offset);
        $.intTypeCheck(t5);
      case 2:
        state0 = 0;
        if (t5 == null)
          throw t5.$lt();
        if (t5 < 0) {
          t2 = this.replacementCodepoint;
          if (t2 != null) {
            this._liblib6$_current = t2;
            return true;
          } else
            throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + t1._offset));
        } else if (t5 <= 127) {
          this._liblib6$_current = t5;
          return true;
        } else if (t5 < 192) {
          t2 = this.replacementCodepoint;
          if (t2 != null) {
            this._liblib6$_current = t2;
            return true;
          } else
            throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + t1._offset));
        } else if (t5 < 224) {
          value = t5 - 192;
          additionalBytes = 1;
        } else if (t5 < 240) {
          value = t5 - 224;
          additionalBytes = 2;
        } else if (t5 < 248) {
          value = t5 - 240;
          additionalBytes = 3;
        } else if (t5 < 252) {
          value = t5 - 248;
          additionalBytes = 4;
        } else {
          if (t5 < 254)
            value = t5 - 252;
          else {
            t2 = this.replacementCodepoint;
            if (t2 != null) {
              this._liblib6$_current = t2;
              return true;
            } else
              throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + t1._offset));
          }
          additionalBytes = 5;
        }
        j = 0;
      case 3:
        var validSequence, nonOverlong, inRange;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (j < additionalBytes) {
                  t5 = t1._offset + 1;
                  t1._offset = t5;
                  t5 = t5 < t3;
                } else
                  t5 = false;
                if (!t5)
                  break L0;
                t5 = t4.$index(t2, t1._offset);
                $.intTypeCheck(t5);
              case 3:
                state0 = 0;
                if (t5 == null)
                  throw t5.$gt();
                if (t5 > 127 && t5 < 192)
                  value = (value << 6 | t5 & 63) >>> 0;
                else {
                  if (t5 >= 192)
                    t1._offset = t1._offset - 1;
                  break L0;
                }
                ++j;
            }
        if (j === additionalBytes)
          validSequence = value < 55296 || value > 57343;
        else
          validSequence = false;
        if (!(additionalBytes === 1 && value > 127))
          if (!(additionalBytes === 2 && value > 2047)) {
            t2 = additionalBytes === 3 && value > 65535;
            nonOverlong = t2;
          } else
            nonOverlong = true;
        else
          nonOverlong = true;
        inRange = value <= 1114111;
        if (validSequence && nonOverlong && inRange) {
          this._liblib6$_current = value;
          return true;
        } else {
          t2 = this.replacementCodepoint;
          if (t2 != null) {
            this._liblib6$_current = t2;
            return true;
          } else
            throw $.wrapException(new $.ArgumentError("Invalid UTF8 at " + (t1._offset - j)));
        }
    }
  },
  $isIterator: true,
  $asIterator: function () { return [$.JSInt]; },
  $asObject: null
},

_ListRange$: function(source, offset, $length) {
  var t1;
  if ($length == null) {
    t1 = $.get$length$asx(source);
    if (t1 == null)
      throw t1.$sub();
    t1 = $.JSInt_methods.$sub(t1, offset);
  } else
    t1 = $length;
  t1 = new $._ListRange(source, offset, t1);
  t1._ListRange$3(source, offset, $length);
  return t1;
},

_ListRangeIteratorImpl$: function(_source, offset, _end) {
  $.interceptedTypeCheck(_source, "$isList");
  $.intTypeCheck(_end);
  if (offset == null)
    throw offset.$sub();
  return new $._ListRangeIteratorImpl($.interceptedTypeCheck(_source, "$isList"), offset - 1, _end);
},

decodeUtf8: function(bytes, offset, $length, replacementCodepoint) {
  return $.String_String$fromCharCodes($.Utf8Decoder$($.interceptedTypeCheck(bytes, "$isList"), $.intTypeCheck(offset), $.intTypeCheck($length), $.intTypeCheck(replacementCodepoint)).decodeRest$0());
},

Utf8Decoder$: function(utf8EncodedBytes, offset, $length, replacementCodepoint) {
  var t1 = $._ListRange$($.interceptedTypeCheck(utf8EncodedBytes, "$isList"), offset, $length);
  return new $.Utf8Decoder(t1.get$iterator(t1), replacementCodepoint, null);
}}],
["fpsstats", "package:stats/stats.dart", , {
Stats: {"": "Object;_timer,_ms,_msMin,_msMax,_fps,_fpsMin,_fpsMax,_frames,_mode,container,fpsDiv,msDiv,msText,msGraph,fpsGraph,fpsText",
  _onContainerMouseDown$1: function(e) {
    var t1;
    $.interceptedTypeCheck(e, "$isMouseEvent").preventDefault();
    t1 = this.get$mode(this) + 1;
    this.set$mode(this, t1);
    this.set$mode(this, $.JSInt_methods.$mod(t1, 2));
  },
  get$_onContainerMouseDown: function() {
    return new $.Bound__onContainerMouseDown_Stats(this, "_onContainerMouseDown$1", null);
  },
  _createUi$0: function() {
    var t1, bar;
    t1 = $.DivElement_DivElement();
    t1.id = "stats";
    $.get$onMouseDown$x(t1).listen$1(this.get$_onContainerMouseDown());
    t1.style.cssText = "width:80px;opacity:0.9;cursor:pointer";
    this.container = t1;
    t1 = $.DivElement_DivElement();
    t1.id = "fps";
    t1.style.cssText = "padding:0 0 3px 3px;text-align:left;background-color:#002";
    this.fpsDiv = t1;
    $.append$1$x(this.container, this.fpsDiv);
    t1 = $.DivElement_DivElement();
    t1.id = "fpsText";
    t1.style.cssText = "color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
    t1.textContent = "FPS";
    this.fpsText = t1;
    $.append$1$x(this.fpsDiv, this.fpsText);
    t1 = $.DivElement_DivElement();
    t1.id = "fpsGraph";
    t1.style.cssText = "position:relative;width:74px;height:30px;background-color:#0ff";
    this.fpsGraph = t1;
    $.append$1$x(this.fpsDiv, this.fpsGraph);
    for (; t1 = this.fpsGraph, t1.get$children, $.interceptedTypeCheck(new $._ChildrenElementList(t1, t1.children), "$isList").get$_childElements().length < 74;) {
      bar = $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1(document, "span"), "$isSpanElement");
      bar.style.cssText = "width:1px;height:30px;float:left;background-color:#113";
      $.append$1$x(this.fpsGraph, bar);
    }
    t1 = $.DivElement_DivElement();
    t1.id = "ms";
    t1.style.cssText = "padding:0 0 3px 3px;text-align:left;background-color:#020;display:none";
    this.msDiv = t1;
    $.append$1$x(this.container, this.msDiv);
    t1 = $.DivElement_DivElement();
    t1.id = "msText";
    t1.style.cssText = "color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
    t1.textContent = "MS";
    this.msText = t1;
    $.append$1$x(this.msDiv, this.msText);
    t1 = $.DivElement_DivElement();
    t1.id = "msGraph";
    t1.style.cssText = "position:relative;width:74px;height:30px;background-color:#0f0";
    this.msGraph = t1;
    $.append$1$x(this.msDiv, this.msGraph);
    for (; t1 = this.msGraph, t1.get$children, $.interceptedTypeCheck(new $._ChildrenElementList(t1, t1.children), "$isList").get$_childElements().length < 74;) {
      bar = $.interceptedTypeCheck($.HtmlDocument_methods.$$dom_createElement$1(document, "span"), "$isSpanElement");
      bar.style.cssText = "width:1px;height:30px;float:left;background-color:#131";
      $.append$1$x(this.msGraph, bar);
    }
  },
  set$mode: function(_, value) {
    $.intTypeCheck(value);
    if (this._mode !== value) {
      this._mode = value;
      switch (this.get$mode(this)) {
        case 0:
          $.set$display$x(this.fpsDiv.style, "block");
          $.set$display$x(this.msDiv.style, "none");
          break;
        case 1:
          $.set$display$x(this.fpsDiv.style, "none");
          $.set$display$x(this.msDiv.style, "block");
          break;
      }
    }
  },
  get$mode: function(_) {
    return this._mode;
  },
  begin$0: function() {
    var t1 = this._timer;
    t1.start$0(t1);
  },
  end$0: function(_) {
    var t1, time, t2, t3, t4, t5, first, truncated;
    t1 = this._timer;
    time = $.JSInt_methods.$tdiv(t1.get$elapsedTicks() * 1000, t1.get$frequency(t1));
    this._ms = $.JSInt_methods.$tdiv(t1.get$elapsedTicks() * 1000, t1.get$frequency(t1));
    this._msMin = $.intTypeCheck($.min(this._msMin, this._ms));
    this._msMax = $.intTypeCheck($.max(this._msMax, this._ms));
    this.msText.textContent = "" + this._ms + " MS (" + this._msMin + " - " + this._msMax + ")";
    t2 = this.msGraph;
    t3 = $.min(30, 30 - this._ms / 200 * 30);
    t4 = $.getInterceptor$x(t2);
    t5 = t4.get$children(t2);
    first = t5.get$first(t5);
    t2 = t4.get$children(t2);
    t2.add$1(t2, first);
    $.set$height$x(first.style, "" + $.JSNumber_methods.toInt$0(t3) + "px");
    this._frames = this._frames + 1;
    if (time > 1000) {
      t2 = $.JSNumber_methods.toInt$0($.JSInt_methods.roundToDouble$0(this._frames * 1000 / this._ms));
      if ($.JSInt_methods.get$isNaN(t2))
        $.throwExpression($.UnsupportedError$("NaN"));
      if ($.JSInt_methods.get$isInfinite(t2))
        $.throwExpression($.UnsupportedError$("Infinity"));
      truncated = $.JSInt_methods.truncateToDouble$0(t2);
      this._fps = $.intTypeCheck(truncated == -0.0 ? 0 : truncated);
      this._fpsMin = $.intTypeCheck($.min(this._fpsMin, this._fps));
      this._fpsMax = $.intTypeCheck($.max(this._fpsMax, this._fps));
      this.fpsText.textContent = "" + this._fps + " FPS (" + this._fpsMin + " - " + this._fpsMax + ")";
      t2 = this.fpsGraph;
      t3 = $.min(30, 30 - this._fps / 100 * 30);
      t4 = $.getInterceptor$x(t2);
      t5 = t4.get$children(t2);
      first = t5.get$first(t5);
      t2 = t4.get$children(t2);
      t2.add$1(t2, first);
      $.set$height$x(first.style, "" + $.JSNumber_methods.toInt$0(t3) + "px");
      t1.reset$0(t1);
      this._frames = 0;
    }
    return time;
  },
  Stats$0: function() {
    this._createUi$0();
  },
  $isStats: true
},

Stats$: function() {
  var t1 = new $.Stats($.Stopwatch$(), 0, 1000, 0, 0, 1000, 0, 0, 0, null, null, null, null, null, null, null);
  t1.Stats$0();
  return t1;
}}],
["game_loop_common", "package:game_loop/game_loop_common.dart", , {
GameLoop: {"": "Object;",
  get$time: function() {
    return $.doubleTypeCheck($.GameLoop_timeStampToSeconds($.DateTime_DateTime$now().millisecondsSinceEpoch));
  },
  processTimers$0: function() {
    var t1, _timersLength, t2, i, lastElement;
    t1 = this._timers;
    _timersLength = t1.length;
    for (t2 = this.updateTimeStep, i = 0; i < _timersLength; ++i)
      t1[i]._update$1(t2);
    for (i = _timersLength - 1; i >= 0; --i) {
      t2 = t1.length;
      lastElement = t2 - 1;
      if (i >= t2)
        throw $.ioore(i);
      if (t1[i].get$_isDead()) {
        if (i !== lastElement) {
          if (lastElement < 0)
            throw $.ioore(lastElement);
          t1[i] = t1[lastElement];
        }
        if (0 >= t2)
          throw $.ioore(0);
        t1.pop();
      }
    }
  },
  onUpdate$1: function(arg0) {
    return this.onUpdate.call$1(arg0);
  },
  $isGameLoop: true
},

DigitalButton: {"": "Object;buttonId,framePressed,frameReleased,timePressed,timeReleased", $isDigitalButton: true},

DigitalButtonEvent: {"": "Object;down,frame,buttonId,time",
  toString$0: function(_) {
    return "Button: " + $.S(this.buttonId) + " DOWN: " + this.down + " [" + this.frame + "@" + $.S(this.time) + "]";
  },
  $isDigitalButtonEvent: true
},

DigitalInput: {"": "Object;gameLoop<",
  digitalButtonEvent$1: function($event) {
    var t1, button;
    t1 = this.buttons;
    button = $.propertyTypeCheck(t1.$index(t1, $event.buttonId), "$isDigitalButton");
    if (button == null)
      return;
    if ($event.down) {
      button.get$down;
      if (button.framePressed <= button.frameReleased) {
        button.framePressed = $event.frame;
        button.timePressed = $.doubleTypeCheck($event.time);
      }
    } else {
      button.frameReleased = $event.frame;
      button.timeReleased = $.doubleTypeCheck($event.time);
    }
  },
  pressed$1: function(buttonId) {
    var t1, button;
    t1 = this.buttons;
    button = $.propertyTypeCheck(t1.$index(t1, buttonId), "$isDigitalButton");
    if (button == null)
      return false;
    return button.framePressed === this.gameLoop.get$frame();
  },
  DigitalInput$2: function(gameLoop, buttonIds) {
    var t1, t2, t3, $arguments, t4;
    for (t1 = $.get$iterator$ax($.interceptedTypeCheck(buttonIds, "$isList")), t2 = this.buttons; $.boolConversionCheck(t1.moveNext$0());) {
      t3 = t1.get$_current();
      $arguments = $.substitute($.getField(t1, "$asListIterator"), $.getRuntimeTypeInfo(t1));
      if ($arguments == null)
        t4 = null;
      else {
        $.assertHelper($.isJsArray($arguments));
        t4 = $arguments[0];
      }
      t3 = $.intTypeCheck($.assertSubtypeOfRuntimeType(t3, t4));
      $.doubleTypeCheck(0);
      t2.$indexSet(t2, t3, new $.DigitalButton(t3, 0, 0, 0, 0));
    }
  },
  $isDigitalInput: true
},

GameLoopTimer: {"": "Object;gameLoop<", $isGameLoopTimer: true},

GameLoop_timeStampToSeconds: function(timeStamp) {
  if (timeStamp == null)
    return $.GameLoop_timeStampToSeconds$bailout(1, timeStamp);
  return timeStamp / 1000;
},

GameLoop_timeStampToSeconds$bailout: function(state0, timeStamp) {
  if (timeStamp == null)
    throw timeStamp.$div();
  return timeStamp / 1000;
}}],
["game_loop_html", "package:game_loop/game_loop_html.dart", , {
GameLoopGamepad: {"": "Object;gameLoop<,buttons,sticks", $isGameLoopGamepad: true},

GameLoopHtml: {"": "GameLoop;element,_frameCounter,_initialized,_interrupt,_previousFrameTime,_frameTime,_resizePending,_nextResize,maxAccumulatedTime,_accumulatedTime,_gameTime,_renderInterpolationFactor,resizeLimit,_pointerLock,_keyboard,_mouse,_gamepad0,_lastMousePos,_touchSet,_rafId,_touchEvents,_keyboardEvents,_mouseEvents,onRender,onResize,onFullscreenChange,onPointerLockChange,onTouchStart,onTouchEnd,updateTimeStep,lib8$GameLoop$maxAccumulatedTime,_timers,onUpdate",
  get$frame: function() {
    return this._frameCounter;
  },
  get$gameTime: function() {
    return $.doubleTypeCheck(this._gameTime);
  },
  get$renderInterpolationFactor: function() {
    return $.doubleTypeCheck(this._renderInterpolationFactor);
  },
  get$pointerLock: function() {
    return this._pointerLock;
  },
  get$mouse: function() {
    return this._mouse;
  },
  _processInputEvents$0: function() {
    this._processKeyboardEvents$0();
    this._processMouseEvents$0();
    this._processTouchEvents$0();
  },
  _processKeyboardEvents$0: function() {
    var t1, t2, t3, $arguments, t4, t5, buttonId;
    for (t1 = this._keyboardEvents, t2 = $.JSArray_methods.get$iterator(t1); t2.moveNext$0();) {
      t3 = t2._current;
      $arguments = $.substitute($.getField(t2, "$asListIterator"), $.getRuntimeTypeInfo(t2));
      if ($arguments == null)
        t4 = null;
      else {
        $.assertHelper($.isJsArray($arguments));
        t4 = $arguments[0];
      }
      t3 = $.interceptedTypeCheck($.assertSubtypeOfRuntimeType(t3, t4), "$isKeyboardEvent");
      t4 = t3.type;
      t5 = t3.timeStamp;
      if (t5 == null)
        throw t5.$div();
      t3.get$keyCode;
      buttonId = t3.keyCode;
      t3 = this._frameCounter;
      this._keyboard.digitalButtonEvent$1(new $.DigitalButtonEvent(t4 === "keydown", t3, buttonId, t5 / 1000));
    }
    $.JSArray_methods.clear$0(t1);
  },
  _processMouseEvents$0: function() {
    var docElem, t1, box, t2, t3, t4, canvasX, canvasY, $arguments, t5, t6, time, mouseX, mouseY, x, y, clampX, withinCanvas, clampY, dx, dy, t7, buttonId;
    this.get$mouse()._resetAccumulators$0();
    docElem = $.document().documentElement;
    t1 = this.element;
    box = t1.getBoundingClientRect();
    t2 = $.getInterceptor$x(box);
    t3 = t2.get$left(box);
    t4 = $.window().pageXOffset;
    if (t3 == null)
      throw t3.$add();
    canvasX = $.JSNumber_methods.floor$0($.$sub$n($.JSNumber_methods.$add(t3, t4), docElem.clientLeft));
    t2 = t2.get$top(box);
    t4 = $.window().pageYOffset;
    if (t2 == null)
      throw t2.$add();
    canvasY = $.JSNumber_methods.floor$0($.$sub$n($.JSNumber_methods.$add(t2, t4), docElem.clientTop));
    for (t2 = this._mouseEvents, t3 = $.JSArray_methods.get$iterator(t2); t3.moveNext$0();) {
      t4 = t3._current;
      $arguments = $.substitute($.getField(t3, "$asListIterator"), $.getRuntimeTypeInfo(t3));
      if ($arguments == null)
        t5 = null;
      else {
        $.assertHelper($.isJsArray($arguments));
        t5 = $arguments[0];
      }
      t4 = $.interceptedTypeCheck($.assertSubtypeOfRuntimeType(t4, t5), "$isMouseEvent");
      t5 = t4.type;
      t6 = t4.timeStamp;
      if (t6 == null)
        throw t6.$div();
      time = t6 / 1000;
      if (t5 === "mousemove") {
        t4.get$page;
        t5 = t4.pageX;
        t6 = t4.pageY;
        mouseX = $.intTypeCheck(new $.Point(t5, t6).x);
        mouseY = $.intTypeCheck(new $.Point(t5, t6).y);
        if (mouseX == null)
          throw mouseX.$sub();
        x = mouseX - canvasX;
        if (mouseY == null)
          throw mouseY.$sub();
        y = mouseY - canvasY;
        if (mouseX < canvasX) {
          clampX = 0;
          withinCanvas = false;
        } else {
          t1.get$client;
          if (mouseX > $.JSInt_methods.$add(canvasX, new $.Rect(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight).width)) {
            t1.get$client;
            clampX = new $.Rect(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight).width;
            withinCanvas = false;
          } else {
            clampX = x;
            withinCanvas = true;
          }
        }
        if (mouseY < canvasY) {
          clampY = 0;
          withinCanvas = false;
        } else {
          t1.get$client;
          if (mouseY > $.JSInt_methods.$add(canvasY, new $.Rect(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight).height)) {
            t1.get$client;
            clampY = new $.Rect(t1.clientLeft, t1.clientTop, t1.clientWidth, t1.clientHeight).height;
            withinCanvas = false;
          } else
            clampY = y;
        }
        t5 = this._pointerLock;
        t5.get$locked;
        t6 = document.webkitPointerLockElement;
        t5 = t5.gameLoop.element;
        if (t6 == null ? t5 == null : t6 === t5) {
          t4.get$movement;
          t5 = t4.webkitMovementX;
          t6 = t4.webkitMovementY;
          dx = $.intTypeCheck(new $.Point(t5, t6).x);
          dy = $.intTypeCheck(new $.Point(t5, t6).y);
        } else {
          t4.get$client;
          t5 = new $.Point(t4.clientX, t4.clientY).x;
          t6 = this._lastMousePos;
          if (t5 == null)
            throw t5.$sub();
          dx = $.intTypeCheck($.JSNumber_methods.$sub(t5, t6.x));
          t4.get$client;
          t6 = new $.Point(t4.clientX, t4.clientY).y;
          t5 = this._lastMousePos;
          if (t6 == null)
            throw t6.$sub();
          dy = $.intTypeCheck($.JSNumber_methods.$sub(t6, t5.y));
          t4.get$client;
          this._lastMousePos = new $.Point(t4.clientX, t4.clientY);
        }
        t4.get$client;
        this._lastMousePos = new $.Point(t4.clientX, t4.clientY);
        t4 = this._frameCounter;
        this._mouse.gameLoopMouseEvent$1(new $.GameLoopMouseEvent(x, y, dx, dy, clampX, clampY, time, withinCanvas, t4));
      } else {
        t6 = this._mouse;
        if (t5 === "mousewheel") {
          $.interceptedTypeCast(t4, "$isWheelEvent");
          t5 = $.getInterceptor$x(t4);
          t7 = t5.get$deltaX(t4);
          t4 = t5.get$deltaY(t4);
          t6._accumulateWheel$2;
          $.intTypeCheck(t7);
          $.intTypeCheck(t4);
          t6._wheelDx = $.intTypeCheck(t6._wheelDx + t7);
          t6._wheelDy = $.intTypeCheck(t6._wheelDy + t4);
        } else {
          buttonId = t4.button;
          t6.digitalButtonEvent$1(new $.DigitalButtonEvent(t5 === "mousedown", this._frameCounter, buttonId, time));
        }
      }
    }
    $.JSArray_methods.clear$0(t2);
  },
  _processTouchEvents$0: function() {
    var t1, t2, t3, $arguments, t4;
    for (t1 = this._touchEvents, t2 = $.JSArray_methods.get$iterator(t1); t2.moveNext$0();) {
      t3 = t2._current;
      $arguments = $.substitute($.getField(t2, "$asListIterator"), $.getRuntimeTypeInfo(t2));
      if ($arguments == null)
        t4 = null;
      else {
        $.assertHelper($.isJsArray($arguments));
        t4 = $arguments[0];
      }
      t3 = $.propertyTypeCheck($.assertSubtypeOfRuntimeType(t3, t4), "$is_GameLoopTouchEvent");
      switch (t3.type) {
        case 3:
          this._touchSet._liblib3$_start$1(t3.event);
          break;
        case 2:
          this._touchSet._liblib3$_end$1(t3.event);
          break;
        case 1:
          this._touchSet._move$1(t3.event);
          break;
        default:
          throw $.wrapException(new $.StateError("Invalid _GameLoopTouchEven type."));
      }
    }
    $.JSArray_methods.clear$0(t1);
  },
  _requestAnimationFrame$1: function(_, _0) {
    var t1, t2, timeDelta;
    $.numTypeCheck(_0);
    if (this._previousFrameTime == null) {
      this._frameTime = $.doubleTypeCheck(this.get$time());
      this._previousFrameTime = $.doubleTypeCheck(this._frameTime);
      this._processInputEvents$0();
      this._rafId = $.Window_methods.requestAnimationFrame$1($.window(), this.get$_requestAnimationFrame(this));
      return;
    }
    if (this._interrupt) {
      this._rafId = null;
      return;
    }
    this._rafId = $.Window_methods.requestAnimationFrame$1($.window(), this.get$_requestAnimationFrame(this));
    this._frameCounter = this._frameCounter + 1;
    this._previousFrameTime = $.doubleTypeCheck(this._frameTime);
    this._frameTime = $.doubleTypeCheck(this.get$time());
    t1 = this._frameTime;
    t2 = this._previousFrameTime;
    if (t2 == null)
      return this._requestAnimationFrame$1$bailout(1, t1, t2);
    timeDelta = t1 - t2;
    $.doubleTypeCheck(timeDelta);
    if (timeDelta == null)
      return this._requestAnimationFrame$1$bailout(2, 0, 0, timeDelta);
    this._accumulatedTime = this._accumulatedTime + timeDelta;
    t1 = this.maxAccumulatedTime;
    if (this._accumulatedTime > t1)
      this._accumulatedTime = t1;
    this._processInputEvents$0();
    for (t1 = this.updateTimeStep; this._accumulatedTime >= t1;) {
      this.processTimers$0();
      this._gameTime = $.doubleTypeCheck(this._gameTime + t1);
      if (this.onUpdate != null)
        this.onUpdate$1(this);
      this._accumulatedTime = $.doubleTypeCheck(this._accumulatedTime - t1);
    }
    if (this._resizePending && false) {
      this.onResize$1(this, this);
      this._nextResize = $.doubleTypeCheck(this._frameTime + this.resizeLimit);
      this._resizePending = false;
    }
    if (this.onRender != null) {
      this._renderInterpolationFactor = $.doubleTypeCheck(this._accumulatedTime / t1);
      this.onRender$1(this);
    }
  },
  _requestAnimationFrame$1$bailout: function(state0, t1, t2, timeDelta) {
    switch (state0) {
      case 0:
        $.numTypeCheck(_0);
        if (this._previousFrameTime == null) {
          this._frameTime = $.doubleTypeCheck(this.get$time());
          this._previousFrameTime = $.doubleTypeCheck(this._frameTime);
          this._processInputEvents$0();
          this._rafId = $.Window_methods.requestAnimationFrame$1($.window(), this.get$_requestAnimationFrame(this));
          return;
        }
        if (this._interrupt) {
          this._rafId = null;
          return;
        }
        this._rafId = $.Window_methods.requestAnimationFrame$1($.window(), this.get$_requestAnimationFrame(this));
        this._frameCounter = this._frameCounter + 1;
        this._previousFrameTime = $.doubleTypeCheck(this._frameTime);
        this._frameTime = $.doubleTypeCheck(this.get$time());
        t1 = this._frameTime;
        t2 = this._previousFrameTime;
      case 1:
        state0 = 0;
        timeDelta = $.JSNumber_methods.$sub(t1, t2);
        $.doubleTypeCheck(timeDelta);
      case 2:
        state0 = 0;
        this._accumulatedTime = $.JSNumber_methods.$add(this._accumulatedTime, timeDelta);
        t1 = this.maxAccumulatedTime;
        if (this._accumulatedTime > t1)
          this._accumulatedTime = t1;
        this._processInputEvents$0();
        for (t1 = this.updateTimeStep; this._accumulatedTime >= t1;) {
          this.processTimers$0();
          this._gameTime = $.doubleTypeCheck(this._gameTime + t1);
          if (this.onUpdate != null)
            this.onUpdate$1(this);
          this._accumulatedTime = $.doubleTypeCheck(this._accumulatedTime - t1);
        }
        if (this._resizePending && false) {
          this.onResize$1(this, this);
          this._nextResize = $.doubleTypeCheck(this._frameTime + this.resizeLimit);
          this._resizePending = false;
        }
        if (this.onRender != null) {
          this._renderInterpolationFactor = $.doubleTypeCheck(this._accumulatedTime / t1);
          this.onRender$1(this);
        }
    }
  },
  get$_requestAnimationFrame: function(_receiver) {
    return new $.Bound__requestAnimationFrame_GameLoopHtml(this, "_requestAnimationFrame$1", _receiver);
  },
  _fullscreenChange$1: function(_) {
    $.interceptedTypeCheck(_, "$isEvent");
    return;
    this.onFullscreenChange$1(this, this);
  },
  get$_fullscreenChange: function() {
    return new $.Bound__fullscreenChange_GameLoopHtml(this, "_fullscreenChange$1", null);
  },
  _fullscreenError$1: function(_) {
    $.interceptedTypeCheck(_, "$isEvent");
    return;
    this.onFullscreenChange$1(this, this);
  },
  get$_fullscreenError: function() {
    return new $.Bound__fullscreenError_GameLoopHtml(this, "_fullscreenError$1", null);
  },
  _touchStartEvent$1: function($event) {
    $.interceptedTypeCheck($event, "$isTouchEvent");
    $.JSArray_methods.add$1(this._touchEvents, $._GameLoopTouchEvent$($event, 3));
    $event.preventDefault();
  },
  get$_touchStartEvent: function() {
    return new $.Bound__touchStartEvent_GameLoopHtml(this, "_touchStartEvent$1", null);
  },
  _touchMoveEvent$1: function($event) {
    $.interceptedTypeCheck($event, "$isTouchEvent");
    $.JSArray_methods.add$1(this._touchEvents, $._GameLoopTouchEvent$($event, 1));
    $event.preventDefault();
  },
  get$_touchMoveEvent: function() {
    return new $.Bound__touchMoveEvent_GameLoopHtml(this, "_touchMoveEvent$1", null);
  },
  _touchEndEvent$1: function($event) {
    $.interceptedTypeCheck($event, "$isTouchEvent");
    $.JSArray_methods.add$1(this._touchEvents, $._GameLoopTouchEvent$($event, 2));
    $event.preventDefault();
  },
  get$_touchEndEvent: function() {
    return new $.Bound__touchEndEvent_GameLoopHtml(this, "_touchEndEvent$1", null);
  },
  _keyDown$1: function($event) {
    $.JSArray_methods.add$1(this._keyboardEvents, $.interceptedTypeCheck($event, "$isKeyboardEvent"));
  },
  get$_keyDown: function() {
    return new $.Bound__keyDown_GameLoopHtml(this, "_keyDown$1", null);
  },
  _keyUp$1: function($event) {
    $.JSArray_methods.add$1(this._keyboardEvents, $.interceptedTypeCheck($event, "$isKeyboardEvent"));
  },
  get$_keyUp: function() {
    return new $.Bound__keyUp_GameLoopHtml(this, "_keyUp$1", null);
  },
  _mouseDown$1: function($event) {
    $.JSArray_methods.add$1(this._mouseEvents, $.interceptedTypeCheck($event, "$isMouseEvent"));
  },
  get$_mouseDown: function() {
    return new $.Bound__mouseDown_GameLoopHtml(this, "_mouseDown$1", null);
  },
  _mouseUp$1: function($event) {
    $.JSArray_methods.add$1(this._mouseEvents, $.interceptedTypeCheck($event, "$isMouseEvent"));
  },
  get$_mouseUp: function() {
    return new $.Bound__mouseUp_GameLoopHtml(this, "_mouseUp$1", null);
  },
  _mouseMove$1: function($event) {
    $.JSArray_methods.add$1(this._mouseEvents, $.interceptedTypeCheck($event, "$isMouseEvent"));
  },
  get$_mouseMove: function() {
    return new $.Bound__mouseMove_GameLoopHtml(this, "_mouseMove$1", null);
  },
  _mouseWheel$1: function($event) {
    $.interceptedTypeCheck($event, "$isMouseEvent");
    $.JSArray_methods.add$1(this._mouseEvents, $event);
    $event.preventDefault();
  },
  get$_mouseWheel: function() {
    return new $.Bound__mouseWheel_GameLoopHtml(this, "_mouseWheel$1", null);
  },
  _resize$1: function(_) {
    $.interceptedTypeCheck(_, "$isEvent");
    if (!this._resizePending)
      this._resizePending = true;
  },
  get$_resize: function() {
    return new $.Bound__resize_GameLoopHtml(this, "_resize$1", null);
  },
  start$0: function(_) {
    var t1, t2;
    if (!this._initialized) {
      $.HtmlDocument_methods.get$onFullscreenError($.document()).listen$1(this.get$_fullscreenError());
      $.HtmlDocument_methods.get$onFullscreenChange($.document()).listen$1(this.get$_fullscreenChange());
      t1 = this.element;
      t2 = $.getInterceptor$x(t1);
      t2.get$onTouchStart(t1).listen$1(this.get$_touchStartEvent());
      t2.get$onTouchEnd(t1).listen$1(this.get$_touchEndEvent());
      t2.get$onTouchCancel(t1).listen$1(this.get$_touchEndEvent());
      t2.get$onTouchMove(t1).listen$1(this.get$_touchMoveEvent());
      $.Window_methods.get$onKeyDown($.window()).listen$1(this.get$_keyDown());
      $.Window_methods.get$onKeyUp($.window()).listen$1(this.get$_keyUp());
      $.Window_methods.get$onResize($.window()).listen$1(this.get$_resize());
      t2.get$onMouseMove(t1).listen$1(this.get$_mouseMove());
      t2.get$onMouseDown(t1).listen$1(this.get$_mouseDown());
      t2.get$onMouseUp(t1).listen$1(this.get$_mouseUp());
      t2.get$onMouseWheel(t1).listen$1(this.get$_mouseWheel());
      this._initialized = true;
    }
    this._interrupt = false;
    this._rafId = $.Window_methods.requestAnimationFrame$1($.window(), this.get$_requestAnimationFrame(this));
  },
  stop$0: function(_) {
    var t1 = this._rafId;
    if (t1 != null) {
      $.Window_methods.cancelAnimationFrame$1($.window(), t1);
      this._rafId = null;
    }
    this._interrupt = true;
  },
  onRender$1: function(arg0) {
    return this.onRender.call$1(arg0);
  },
  onResize$1: function($receiver, arg0) {
    return this.onResize.call$1(arg0);
  },
  onFullscreenChange$1: function($receiver, arg0) {
    return this.onFullscreenChange.call$1(arg0);
  },
  GameLoopHtml$1: function(element) {
    this._keyboard = $.Keyboard$(this);
    this._mouse = $.Mouse$(this);
    this._gamepad0 = $.GameLoopGamepad$(this);
    this._pointerLock = $.PointerLock$(this);
    this._touchSet = $.GameLoopTouchSet$(this);
  },
  $isGameLoopHtml: true
},

Keyboard: {"": "DigitalInput;gameLoop,buttons,interceptor", $isKeyboard: true},

GameLoopMouseEvent: {"": "Object;x,y,dx,dy,clampX,clampY,time,withinCanvas,frame", $isGameLoopMouseEvent: true},

Mouse: {"": "DigitalInput;_dx,_dy,_x,_y,_clampX,_clampY,_wheelDx,_wheelDy,_withinCanvas,_time,_frame,gameLoop,buttons,interceptor",
  get$x: function(_) {
    return this._x;
  },
  get$y: function(_) {
    return this._y;
  },
  get$withinCanvas: function() {
    return this._withinCanvas;
  },
  gameLoopMouseEvent$1: function($event) {
    var t1, t2;
    this._x = $event.x;
    this._y = $event.y;
    this._time = $.doubleTypeCheck($event.time);
    this._frame = $event.frame;
    t1 = this._dx;
    t2 = $event.dx;
    if (t2 == null)
      return this.gameLoopMouseEvent$1$bailout(1, $event, t1, t2);
    this._dx = t1 + t2;
    t2 = this._dy;
    t1 = $event.dy;
    if (t1 == null)
      return this.gameLoopMouseEvent$1$bailout(2, $event, t1, t2);
    this._dy = t2 + t1;
    this._clampX = $event.clampX;
    this._clampY = $event.clampY;
    this._withinCanvas = $event.withinCanvas;
  },
  gameLoopMouseEvent$1$bailout: function(state0, $event, t1, t2) {
    switch (state0) {
      case 0:
        this._x = $event.x;
        this._y = $event.y;
        this._time = $.doubleTypeCheck($event.time);
        this._frame = $event.frame;
        t1 = this._dx;
        t2 = $event.dx;
      case 1:
        state0 = 0;
        this._dx = $.JSInt_methods.$add(t1, t2);
        t2 = this._dy;
        t1 = $event.dy;
      case 2:
        state0 = 0;
        this._dy = $.JSInt_methods.$add(t2, t1);
        this._clampX = $event.clampX;
        this._clampY = $event.clampY;
        this._withinCanvas = $event.withinCanvas;
    }
  },
  _resetAccumulators$0: function() {
    this._wheelDx = 0;
    this._wheelDy = 0;
    this._dx = 0;
    this._dy = 0;
  },
  $isMouse: true,
  $asObject: null
},

PointerLock: {"": "Object;gameLoop<,lockOnClick",
  requestLock$0: function() {
    this.gameLoop.element.webkitRequestPointerLock();
  },
  _onClick$1: function($event) {
    $.interceptedTypeCheck($event, "$isEvent");
    if (this.lockOnClick)
      this.requestLock$0();
  },
  get$_onClick: function() {
    return new $.Bound__onClick_PointerLock(this, "_onClick$1", null);
  },
  _onPointerLockChange$1: function($event) {
    $.interceptedTypeCheck($event, "$isEvent");
  },
  get$_onPointerLockChange: function() {
    return new $.Bound__onPointerLockChange_PointerLock(this, "_onPointerLockChange$1", null);
  },
  PointerLock$1: function(gameLoop) {
    $.get$onClick$x(this.gameLoop.element).listen$1(this.get$_onClick());
    $.HtmlDocument_methods.get$onPointerLockChange($.document()).listen$1(this.get$_onPointerLockChange());
  },
  $isPointerLock: true
},

_GameLoopTouchEvent: {"": "Object;event,type", $is_GameLoopTouchEvent: true},

GameLoopTouchPosition: {"": "Object;x,y,dx,dy,time,frame", $isGameLoopTouchPosition: true, $asObject: null},

GameLoopTouch: {"": "Object;id,positions", $isGameLoopTouch: true},

GameLoopTouchSet: {"": "Object;activeTouches<,gameLoop<",
  _addPosition$2: function(glTouch, touch) {
    var t1, t2, position;
    $.propertyTypeCheck(glTouch, "$isGameLoopTouch");
    t1 = $.getInterceptor$x(touch);
    t2 = this.gameLoop;
    position = $.GameLoopTouchPosition$(t1.get$page(touch).x, t1.get$page(touch).y, 0, 0, t2.get$gameTime(), t2.get$frame());
    $.JSArray_methods.add$1(glTouch.positions, position);
  },
  _liblib3$_start$1: function($event) {
    $.forEach$1$ax($event.changedTouches, new $.GameLoopTouchSet__start_closure(this));
    this._verifyTouchList$1($event.touches);
  },
  _liblib3$_end$1: function($event) {
    $.forEach$1$ax($event.changedTouches, new $.GameLoopTouchSet__end_closure(this));
    this._verifyTouchList$1($event.touches);
  },
  _move$1: function($event) {
    $.forEach$1$ax($event.changedTouches, new $.GameLoopTouchSet__move_closure(this));
    this._verifyTouchList$1($event.touches);
  },
  _inTouchList$2: function(touches, identifier) {
    var i, t1;
    $.interceptedTypeCheck(touches, "$isList");
    if (typeof touches !== "string" && (typeof touches !== "object" || touches === null || touches.constructor !== Array && !$.isJsIndexable(touches, touches[$.dispatchPropertyName])))
      return this._inTouchList$2$bailout(1, touches, identifier);
    for (i = 0; i < touches.length; ++i) {
      t1 = $.get$identifier$x(touches[i]);
      if (t1 == null ? identifier == null : t1 === identifier)
        return true;
    }
    return false;
  },
  _inTouchList$2$bailout: function(state0, touches, identifier) {
    var t1, i, t2;
    for (t1 = $.getInterceptor$asx(touches), i = 0; $.JSInt_methods.$lt(i, t1.get$length(touches)); ++i) {
      t2 = $.get$identifier$x(t1.$index(touches, i));
      if (t2 == null ? identifier == null : t2 === identifier)
        return true;
    }
    return false;
  },
  _verifyTouchList$1: function(touches) {
    var t1, t2;
    $.interceptedTypeCheck(touches, "$isList");
    t1 = $.getInterceptor$asx(touches);
    t2 = this.activeTouches;
    if (t1.get$length(touches) !== t2.get$length(t2))
      $.print($.S(t1.get$length(touches)) + " " + t2.get$length(t2));
    t2.forEach$1(t2, new $.GameLoopTouchSet__verifyTouchList_closure(this, touches));
  },
  $isGameLoopTouchSet: true
},

GameLoopTouchSet__start_closure: {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, glTouch, t2, t3;
    $.interceptedTypeCheck(touch, "$isTouch");
    t1 = touch.identifier;
    glTouch = $.GameLoopTouch$(t1);
    t2 = this.this_0;
    t3 = t2.get$activeTouches();
    if (t3.$index(t3, t1) != null)
      return;
    t1 = t2.get$activeTouches();
    $.assertHelper(t1.$index(t1, touch.identifier) == null);
    t1 = t2.get$activeTouches();
    t1.$indexSet(t1, touch.identifier, glTouch);
    t2._addPosition$2(glTouch, touch);
    t1 = t2.get$gameLoop();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Touch", args: [$.Touch]}; }
},

GameLoopTouchSet__end_closure: {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, glTouch;
    $.interceptedTypeCheck(touch, "$isTouch");
    t1 = this.this_0;
    t2 = t1.get$activeTouches();
    glTouch = t2.$index(t2, touch.identifier);
    t2 = glTouch == null;
    if (t2)
      return;
    $.assertHelper(!t2);
    t2 = t1.get$activeTouches();
    t2.remove$1(t2, touch.identifier);
    t1._addPosition$2(glTouch, touch);
    t1 = t1.get$gameLoop();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Touch", args: [$.Touch]}; }
},

GameLoopTouchSet__move_closure: {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2;
    $.interceptedTypeCheck(touch, "$isTouch");
    t1 = this.this_0;
    t2 = t1.get$activeTouches();
    t1._addPosition$2(t2.$index(t2, touch.identifier), touch);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Touch", args: [$.Touch]}; }
},

GameLoopTouchSet__verifyTouchList_closure: {"": "Closure;this_0,touches_1",
  call$2: function(identifier, touch) {
    if (!this.this_0._inTouchList$2(this.touches_1, identifier))
      $.print("Did not find " + $.S(identifier));
  },
  $isFunction: true,
  $asObject: null,
  $is_void__K_V: true,
  $is_dynamic__int_dynamic: true,
  $is_bool__DigitalButtonEvent_bool: true,
  $is_void__GameLoop_GameLoopTouch: true,
  $is_void__int_String: true,
  $is_void__dynamic_SendPort: true,
  $is_dynamic__dynamic_dynamic: true,
  $is_void__K_V0: true,
  $is_void__RenderingContext_GameLoopHtml: true,
  $is_void__String_String: true
},

GameLoopGamepad$: function(gameLoop) {
  return new $.GameLoopGamepad(gameLoop, null, null);
},

GameLoopHtml$: function(element) {
  var t1, t2, t3, t4, t5;
  t1 = $.Point$(0, 0);
  t2 = $.List_List(null, $._GameLoopTouchEvent);
  $.setRuntimeTypeInfo(t2, [$._GameLoopTouchEvent]);
  t3 = $.List_List(null, $.KeyboardEvent);
  $.setRuntimeTypeInfo(t3, [$.KeyboardEvent]);
  t4 = $.List_List(null, $.MouseEvent);
  $.setRuntimeTypeInfo(t4, [$.MouseEvent]);
  t5 = $.List_List(null, $.GameLoopTimer);
  $.setRuntimeTypeInfo(t5, [$.GameLoopTimer]);
  $.doubleTypeCheck(0);
  $.interceptedTypeCheck(t2, "$isList");
  $.interceptedTypeCheck(t3, "$isList");
  $.interceptedTypeCheck(t4, "$isList");
  $.assertFunctionSubtype(null, "void__GameLoop");
  $.assertFunctionSubtype(null, "void__GameLoop_GameLoopTouch");
  t5 = new $.GameLoopHtml(element, 0, false, false, null, 0, false, 0, 0.03, 0, 0, 0, 0.05, null, null, null, null, t1, null, null, t2, t3, t4, null, null, null, null, null, null, 0.015, 0.03, $.interceptedTypeCheck(t5, "$isList"), null);
  t5.GameLoopHtml$1(element);
  return t5;
},

Keyboard$: function(gameLoop) {
  var t1 = new $.Keyboard(gameLoop, $.interceptedTypeCheck($.Map_Map($.JSInt, $.DigitalButton), "$isMap"), $.assertFunctionSubtype(null, "bool__DigitalButtonEvent_bool"));
  t1.DigitalInput$2(gameLoop, $.get$Keyboard__buttonIds());
  return t1;
},

Mouse$: function(gameLoop) {
  var t1, t2;
  t1 = $.get$Mouse__buttonIds();
  t2 = $.Map_Map($.JSInt, $.DigitalButton);
  t2 = new $.Mouse(0, 0, 0, 0, 0, 0, 0, 0, false, $.doubleTypeCheck(0), 0, gameLoop, $.interceptedTypeCheck(t2, "$isMap"), $.assertFunctionSubtype(null, "bool__DigitalButtonEvent_bool"));
  t2.DigitalInput$2(gameLoop, t1);
  return t2;
},

PointerLock$: function(gameLoop) {
  var t1 = new $.PointerLock(gameLoop, true);
  t1.PointerLock$1(gameLoop);
  return t1;
},

_GameLoopTouchEvent$: function($event, type) {
  return new $._GameLoopTouchEvent($event, type);
},

GameLoopTouchPosition$: function(x, y, dx, dy, time, frame) {
  return new $.GameLoopTouchPosition($.intTypeCheck(x), $.intTypeCheck(y), dx, dy, $.doubleTypeCheck(time), frame);
},

GameLoopTouch$: function(id) {
  var t1 = $.List_List(null, $.GameLoopTouchPosition);
  $.setRuntimeTypeInfo(t1, [$.GameLoopTouchPosition]);
  return new $.GameLoopTouch(id, $.interceptedTypeCheck(t1, "$isList"));
},

GameLoopTouchSet$: function(gameLoop) {
  return new $.GameLoopTouchSet($.interceptedTypeCheck($.Map_Map($.JSInt, $.GameLoopTouch), "$isMap"), gameLoop);
}}],
["html_common", "dart:html_common", , {
convertDartToNative_Dictionary_closure: {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[$.stringTypeCheck(key)] = value;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__String_dynamic", args: [$.JSString, null]}; }
},

convertNativeToDart_AcceptStructuredClone_findSlot: {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    $.JSArray_methods.add$1(t1, value);
    $.JSArray_methods.add$1(this.copies_1, null);
    return $length;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "int__dynamic", ret: $.JSInt, args: [null]}; }
},

convertNativeToDart_AcceptStructuredClone_readSlot: {"": "Closure;copies_2",
  call$1: function(i) {
    return $.JSArray_methods.$index(this.copies_2, $.intTypeCheck(i));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__int", args: [$.JSInt]}; }
},

convertNativeToDart_AcceptStructuredClone_writeSlot: {"": "Closure;copies_3",
  call$2: function(i, x) {
    $.JSArray_methods.$indexSet(this.copies_3, $.intTypeCheck(i), x);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__int_dynamic", args: [$.JSInt, null]}; }
},

convertNativeToDart_AcceptStructuredClone_walk: {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, $arguments, t3, $length, i;
    if (typeof e !== "object" || e === null || e.constructor !== Array || !!e.fixed$length)
      return this.call$1$bailout(1, e);
    if ($.isJavaScriptDate(e))
      return $.convertNativeToDart_DateTime(e);
    if ($.isJavaScriptRegExp(e))
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if ($.isJavaScriptSimpleObject(e)) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        t2 = t1._current;
        $arguments = $.substitute($.getField(t1, "$asListIterator"), $.getRuntimeTypeInfo(t1));
        if ($arguments == null)
          t3 = null;
        else {
          $.assertHelper($.isJsArray($arguments));
          t3 = $arguments[0];
        }
        $.assertSubtypeOfRuntimeType(t2, t3);
        copy.$indexSet(copy, t2, this.call$1(e[t2]));
      }
      return copy;
    }
    if ($.isJavaScriptArray(e)) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, t1, $length, slot) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if ($.isJavaScriptDate(e))
          return $.convertNativeToDart_DateTime(e);
        if ($.isJavaScriptRegExp(e))
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if ($.isJavaScriptSimpleObject(e)) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            t2 = t1._current;
            $arguments = $.substitute($.getField(t1, "$asListIterator"), $.getRuntimeTypeInfo(t1));
            if ($arguments == null)
              t3 = null;
            else {
              $.assertHelper($.isJsArray($arguments));
              t3 = $arguments[0];
            }
            $.assertSubtypeOfRuntimeType(t2, t3);
            copy.$indexSet(copy, t2, this.call$1(e[t2]));
          }
          return copy;
        }
      case 2:
        var copy, t2, $arguments, t3, i;
        if (state0 === 2 || state0 === 0 && $.isJavaScriptArray(e))
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              t1 = $.getInterceptor$asx(e);
              $length = t1.get$length(e);
              $.intTypeCheck($length);
            case 2:
              state0 = 0;
              copy = this.mustCopy_4 ? new Array($length) : e;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$ax(copy), i = 0; $.JSInt_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

FilteredElementList: {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.interceptedTypeCheck($.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true, $.Element), "$isList");
  },
  forEach$1: function(_, f) {
    $.assertFunctionSubtype(f, "void__Element");
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isElement");
    $.replaceWith$1$x($.interceptedTypeCheck($.JSArray_methods.$index(this.get$_filtered(), index), "$isElement"), value);
  },
  set$length: function(_, newLength) {
    var len;
    $.intTypeCheck(newLength);
    if (newLength == null)
      return this.set$length$bailout(1, newLength);
    len = this.get$_filtered().length;
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len = this.get$_filtered().length;
    if (newLength == null)
      throw newLength.$ge();
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException(new $.ArgumentError("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    $.append$1$x(this._childNodes._this, $.interceptedTypeCheck(value, "$isElement"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    $.intTypeCheck(end);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    throw $.wrapException(new $.UnsupportedError("Cannot setRange on filtered list"));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  removeRange$2: function(_, start, end) {
    $.JSArray_methods.forEach$1($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return $.interceptedTypeCheck(result, "$isElement");
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    $.intTypeCheck(index);
    return $.interceptedTypeCheck($.JSArray_methods.$index(this.get$_filtered(), index), "$isElement");
  },
  get$iterator: function(_) {
    return $.assertSubtype($.JSArray_methods.get$iterator(this.get$_filtered()), "$isIterator", [$.Element], "$asIterator");
  },
  $asListBase: null,
  $asObject: null,
  $asListMixin: null,
  $asList: null,
  $asIterable: null
},

FilteredElementList__filtered_closure: {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

FilteredElementList_removeRange_closure: {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

convertNativeToDart_Dictionary: function(object) {
  var dict, t1, t2, $arguments, t3;
  if (object == null)
    return;
  dict = $.makeLiteralMap([]);
  for (t1 = $.JSArray_methods.get$iterator(Object.getOwnPropertyNames(object)); t1.moveNext$0();) {
    t2 = t1._current;
    $arguments = $.substitute($.getField(t1, "$asListIterator"), $.getRuntimeTypeInfo(t1));
    if ($arguments == null)
      t3 = null;
    else {
      $.assertHelper($.isJsArray($arguments));
      t3 = $arguments[0];
    }
    $.assertSubtypeOfRuntimeType(t2, t3);
    dict.$indexSet(dict, t2, object[t2]);
  }
  return dict;
},

convertDartToNative_Dictionary: function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.forEach$1$ax(dict, new $.convertDartToNative_Dictionary_closure(object));
  return object;
},

convertNativeToDart_DateTime: function(date) {
  return $.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
},

convertNativeToDart_SerializedScriptValue: function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, true);
},

convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
},

isJavaScriptDate: function(value) {
  return value instanceof Date;
},

isJavaScriptRegExp: function(value) {
  return value instanceof RegExp;
},

isJavaScriptArray: function(value) {
  return value instanceof Array;
},

isJavaScriptSimpleObject: function(value) {
  return Object.getPrototypeOf(value) === Object.prototype;
},

JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ $.JSInt_methods.$shr(hash, 6)) >>> 0;
},

JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ $.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

JenkinsSmiHash_hash2: function(a, b) {
  return $.JenkinsSmiHash_finish($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine(0, a), b));
},

JenkinsSmiHash_hash4: function(a, b, c, d) {
  return $.JenkinsSmiHash_finish($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine($.JenkinsSmiHash_combine(0, a), b), c), d));
}}],
["lost_context", "lost_context.dart", , {
initDebugLostContext_onContextLost: {"": "Closure;gameLoop_0",
  call$1: function(e) {
    var t1;
    $.interceptedTypeCheck(e, "$isEvent").preventDefault();
    t1 = this.gameLoop_0;
    t1.stop$0(t1);
    $.print("webgl context: lost");
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
},

initDebugLostContext_onContextRestored: {"": "Closure;gl_1,gameLoop_2,initContextCall_3",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    this.initContextCall_3.call$2(this.gl_1, this.gameLoop_2);
    $.print("webgl context: restored");
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
},

initDebugLostContext_closure: {"": "Closure;ext_4",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    this.ext_4.loseContext();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Event", args: [$.Event]}; }
},

initDebugLostContext_closure0: {"": "Closure;ext_5",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    this.ext_5.restoreContext();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Event", args: [$.Event]}; }
},

initDebugLostContext: function(gl, canvas, gameLoop, initContextCall) {
  var t1, ext, control, loseContextButton, restoreContextButton;
  $.assertFunctionSubtype(initContextCall, "void__RenderingContext_GameLoopHtml");
  t1 = $.getInterceptor$x(canvas);
  t1.get$onWebGlContextLost(canvas).listen$1(new $.initDebugLostContext_onContextLost(gameLoop));
  t1.get$onWebGlContextRestored(canvas).listen$1(new $.initDebugLostContext_onContextRestored(gl, gameLoop, initContextCall));
  ext = $.interceptedTypeCheck($.getExtension$1$x(gl, "WEBGL_lose_context"), "$isLoseContext");
  if (ext == null) {
    $.print("WEBGL_lose_context: NOT AVAILABLE");
    return;
  }
  control = $.interceptedTypeCheck($.query("#control"), "$isDivElement");
  $.assertHelper(control != null);
  loseContextButton = $.InputElement_InputElement(null);
  loseContextButton.type = "button";
  loseContextButton.value = "lose context";
  $.get$onClick$x(loseContextButton).listen$1(new $.initDebugLostContext_closure(ext));
  t1 = $.getInterceptor$x(control);
  t1.append$1(control, loseContextButton);
  restoreContextButton = $.InputElement_InputElement(null);
  restoreContextButton.type = "button";
  restoreContextButton.value = "restore context";
  $.get$onClick$x(restoreContextButton).listen$1(new $.initDebugLostContext_closure0(ext));
  t1.append$1(control, restoreContextButton);
}}],
["negentropia_home.dart", "negentropia_home.dart", , {
initShowPicking_closure: {"": "Closure;showPickingCheck_0",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.showPicking = this.showPickingCheck_0.checked;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Event", args: [$.Event]}; }
},

boot_dispatch: {"": "Closure;gl_0",
  call$2: function(code, data) {
    $.dispatcher(this.gl_0, $.intTypeCheck(code), $.stringTypeCheck(data));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__int_String", void: true, args: [$.JSInt, $.JSString]}; }
},

initSquares_closure: {"": "Closure;squareProgram2_0",
  call$0: function() {
    this.squareProgram2_0.fetch$3($.shaderCache, $.get$asset().get$shader() + "/clip_vs.txt", $.get$asset().get$shader() + "/clip2_fs.txt");
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

initContext_closure: {"": "Closure;gl_0",
  call$1: function(p) {
    return $.propertyTypeCheck(p, "$isShaderProgram").initContext$2(this.gl_0, $.textureTable);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__ShaderProgram", args: [$.ShaderProgram]}; }
},

draw_closure: {"": "Closure;gameLoop_0",
  call$1: function(p) {
    return p.drawModels$3(this.gameLoop_0, $.get$cam(), $.get$pMatrix());
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

update_closure: {"": "Closure;gameLoop_0",
  call$1: function(p) {
    $.propertyTypeCheck(p, "$isShaderProgram");
    return p.update$1(p, this.gameLoop_0);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__ShaderProgram", args: [$.ShaderProgram]}; }
},

main_closure: {"": "Closure;gl_0",
  call$1: function(gameLoop) {
    $.update(this.gl_0, $.propertyTypeCheck(gameLoop, "$isGameLoopHtml"));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__GameLoopHtml", args: [$.GameLoopHtml]}; }
},

main_closure0: {"": "Closure;gl_1",
  call$1: function(gameLoop) {
    $.render(this.gl_1, $.propertyTypeCheck(gameLoop, "$isGameLoopHtml"));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__GameLoopHtml", args: [$.GameLoopHtml]}; }
},

initGL: function(canvas) {
  var gl;
  $.print("initGL: FIXME: ERASEME: preserveDrawingBuffer: true");
  gl = $.getContext3d$1$preserveDrawingBuffer$x(canvas, true);
  if (gl != null)
    return gl;
  $.print("WebGL: initialization failure");
  return;
},

initStats: function() {
  var div, t1;
  div = $.interceptedTypeCheck($.query("#framerate"), "$isDivElement");
  $.assertHelper(div != null);
  $.stats = $.Stats$();
  t1 = $.get$children$x(div);
  t1.add$1(t1, $.stats.container);
},

initShowPicking: function() {
  var control, showPickingCheck, t1, label;
  control = $.interceptedTypeCheck($.query("#control"), "$isDivElement");
  $.assertHelper(control != null);
  showPickingCheck = $.InputElement_InputElement(null);
  showPickingCheck.type = "checkbox";
  showPickingCheck.id = "show_picking";
  showPickingCheck.checked = $.showPicking;
  $.get$onClick$x(showPickingCheck).listen$1(new $.initShowPicking_closure(showPickingCheck));
  t1 = $.getInterceptor$x(control);
  t1.append$1(control, showPickingCheck);
  label = $.LabelElement_LabelElement();
  label.htmlFor = showPickingCheck.id;
  $.appendText$1$x(label, "show picking");
  t1.append$1(control, label);
},

loadDemo: function(gl) {
  $.initSquares(gl);
  $.initShips(gl);
  $.initSkybox(gl);
  $.initPicker(gl);
},

dispatcher: function(gl, code, data) {
  var m;
  switch (code) {
    case 1:
      $.print("dispatcher: server sent info: " + data);
      if ($.startsWith$1$s(data, "welcome")) {
        m = $.Map_Map(null, null);
        m.$indexSet(m, "Code", 3);
        m.$indexSet(m, "Data", "hi there");
        $.wsSend($.stringify(m));
      }
      break;
    case 6:
      $.print("dispatcher: zoneInfo=" + data);
      if (data === "demo") {
        $.loadDemo(gl);
        return;
      }
      $.print("dispatcher: FIXME WRITEME load non-demo zone: zoneInfo=" + data);
      break;
    default:
      $.print("dispatcher: unknown code=" + $.S(code));
  }
},

boot: function() {
  var t1, canvasbox, gl, p, a, sid, wsUri, statusElem;
  $.canvas = $.CanvasElement_CanvasElement(null, null);
  $.assertHelper($.canvas != null);
  t1 = $.canvas;
  t1.id = "main_canvas";
  t1.width = 780;
  t1.height = 500;
  canvasbox = $.interceptedTypeCheck($.query("#canvasbox"), "$isDivElement");
  $.assertHelper(canvasbox != null);
  t1 = $.getInterceptor$x(canvasbox);
  t1.append$1(canvasbox, $.canvas);
  gl = $.initGL($.canvas);
  if (gl == null) {
    $.remove$0$ax($.canvas);
    p = $.ParagraphElement_ParagraphElement();
    p.textContent = "WebGL is currently not available on this system.";
    t1.append$1(canvasbox, p);
    a = $.AnchorElement_AnchorElement(null);
    a.href = "http://get.webgl.org/";
    a.textContent = "Get more information";
    t1.append$1(canvasbox, a);
    $.set$backgroundColor$x(canvasbox.style, "lightblue");
    return;
  }
  $.initShowPicking();
  sid = $.Cookie_getCookie("sid");
  $.assertHelper(sid != null);
  wsUri = $.query("#wsUri").textContent;
  $.assertHelper(wsUri != null);
  statusElem = $.query("#ws_status");
  $.assertHelper(statusElem != null);
  $.initWebSocket(wsUri, sid, 1, statusElem, new $.boot_dispatch(gl));
  $.initStats();
  return gl;
},

initSquares: function(gl) {
  var squareProgram, squareModel, squareProgram2, squareModel2, squareProgram3, squareModel3;
  squareProgram = $.ShaderProgram$(gl);
  $.add$1$ax($.programList, squareProgram);
  squareProgram.fetch$3($.shaderCache, $.get$asset().get$shader() + "/clip_vs.txt", $.get$asset().get$shader() + "/clip_fs.txt");
  squareModel = $.Model$fromJson(gl, $.get$asset().get$mesh() + "/square.json");
  squareProgram.addModel$1(squareModel);
  squareModel.addInstance$1($.Instance$(squareModel, $.Vector3$(0, 0, 0), 1, null));
  squareProgram2 = $.ShaderProgram$(gl);
  $.add$1$ax($.programList, squareProgram2);
  $.Timer_Timer($.Duration$(0, 0, 0, 0, 0, 2), new $.initSquares_closure(squareProgram2));
  squareModel2 = $.Model$fromJson(gl, $.get$asset().get$mesh() + "/square2.json");
  squareProgram2.addModel$1(squareModel2);
  squareModel2.addInstance$1($.Instance$(squareModel2, $.Vector3$(0, 0, 0), 1, null));
  squareProgram3 = $.ShaderProgram$(gl);
  $.add$1$ax($.programList, squareProgram3);
  squareProgram3.fetch$3($.shaderCache, $.get$asset().get$shader() + "/clip_vs.txt", $.get$asset().get$shader() + "/clip3_fs.txt");
  squareModel3 = $.Model$fromJson(gl, $.get$asset().get$mesh() + "/square3.json");
  squareProgram3.addModel$1(squareModel3);
  squareModel3.addInstance$1($.Instance$(squareModel3, $.Vector3$(0, 0, 0), 1, null));
},

initSkybox: function(gl) {
  var skyboxProgram, skyboxModel;
  skyboxProgram = $.SkyboxProgram$(gl);
  $.add$1$ax($.programList, skyboxProgram);
  skyboxProgram.fetch$3($.shaderCache, $.get$asset().get$shader() + "/skybox_vs.txt", $.get$asset().get$shader() + "/skybox_fs.txt");
  skyboxModel = $.SkyboxModel$fromJson(gl, "/mesh/cube.json", true, 0);
  skyboxModel.addCubemapFace$3(gl, 34069, "/texture/space_rt.jpg");
  skyboxModel.addCubemapFace$3(gl, 34070, "/texture/space_lf.jpg");
  skyboxModel.addCubemapFace$3(gl, 34071, "/texture/space_up.jpg");
  skyboxModel.addCubemapFace$3(gl, 34072, "/texture/space_dn.jpg");
  skyboxModel.addCubemapFace$3(gl, 34073, "/texture/space_fr.jpg");
  skyboxModel.addCubemapFace$3(gl, 34074, "/texture/space_bk.jpg");
  skyboxProgram.addModel$1(skyboxModel);
  skyboxModel.addInstance$1($.SkyboxInstance$(skyboxModel, $.Vector3$(0, 0, 0), 1));
},

initAirship: function(gl) {
  var prog, airshipModel;
  prog = $.ShaderProgram$(gl);
  $.add$1$ax($.programList, prog);
  prog.fetch$3($.shaderCache, $.get$asset().get$shader() + "/simple_vs.txt", $.get$asset().get$shader() + "/simple_fs.txt");
  airshipModel = $.Model$fromOBJ(gl, $.get$asset().get$obj() + "/airship.obj");
  prog.addModel$1(airshipModel);
  airshipModel.addInstance$1($.Instance$(airshipModel, $.Vector3$(-8, 0, 0), 1, $.generatePickColor()));
},

initAirshipTex: function(gl) {
  var prog, objURL, airshipModel, airshipModel2, colonyShipModel, coneModel;
  prog = $.TexShaderProgram$(gl);
  $.add$1$ax($.programList, prog);
  prog.fetch$3($.shaderCache, $.get$asset().get$shader() + "/simpleTex_vs.txt", $.get$asset().get$shader() + "/simpleTex_fs.txt");
  objURL = $.get$asset().get$obj() + "/airship.obj";
  airshipModel = $.TexModel$fromOBJ(gl, objURL, $.textureTable, $.get$asset());
  prog.addModel$1(airshipModel);
  airshipModel.addInstance$1($.TexInstance$(airshipModel, $.Vector3$(0, 0, 0), 1, $.generatePickColor()));
  airshipModel2 = $.TexModel$fromOBJ(gl, objURL, $.textureTable, $.get$asset());
  prog.addModel$1(airshipModel2);
  airshipModel2.addInstance$1($.TexInstance$(airshipModel2, $.Vector3$(8, 0, 0), 1, $.generatePickColor()));
  colonyShipModel = $.TexModel$fromOBJ(gl, $.get$asset().get$obj() + "/Colony Ship Ogame Fleet.obj", $.textureTable, $.get$asset());
  prog.addModel$1(colonyShipModel);
  colonyShipModel.addInstance$1($.TexInstance$(colonyShipModel, $.Vector3$(0, -5, -50), 1, $.generatePickColor()));
  coneModel = $.TexModel$fromOBJ(gl, $.get$asset().get$obj() + "/cone.obj", $.textureTable, $.get$asset());
  prog.addModel$1(coneModel);
  coneModel.addInstance$1($.TexInstance$(coneModel, $.Vector3$(0, 2, -10), 1, $.generatePickColor()));
},

initShips: function(gl) {
  $.initAirship(gl);
  $.initAirshipTex(gl);
},

initPicker: function(gl) {
  var t1, t2;
  t1 = $.programList;
  t2 = $.canvas;
  $.picker = $.PickerShader$(gl, t1, t2.width, t2.height);
  $.add$1$ax($.programList, $.picker);
  $.picker.fetch$3($.shaderCache, $.get$asset().get$shader() + "/picker_vs.txt", $.get$asset().get$shader() + "/picker_fs.txt");
},

initContext: function(gl, gameLoop) {
  var t1, t2, t3, before, i, duration;
  $.interceptedTypeCheck(gl, "$isRenderingContext");
  $.propertyTypeCheck(gameLoop, "$isGameLoopHtml");
  t1 = $.List_List(null, $.ShaderProgram);
  $.setRuntimeTypeInfo(t1, [$.ShaderProgram]);
  $.programList = $.interceptedTypeCheck(t1, "$isList");
  $.shaderCache = $.interceptedTypeCheck($.Map_Map($.JSString, $.Shader), "$isMap");
  $.textureTable = $.interceptedTypeCheck($.Map_Map($.JSString, $.Texture), "$isMap");
  $.forEach$1$ax($.programList, new $.initContext_closure(gl));
  $.requestZone();
  t1 = $.getInterceptor$x(gl);
  t1.clearColor$4(gl, 0.5, 0.5, 0.5, 1);
  t1.enable$1(gl, 2929);
  t1.depthFunc$1(gl, 513);
  t1.depthRange$2(gl, 0, 1);
  t2 = $.canvas;
  t1.viewport$4(gl, 0, 0, t2.width, t2.height);
  t2 = $.canvas;
  t3 = t2.width;
  t2 = t2.height;
  if (t3 == null)
    throw t3.$div();
  $.canvasAspect = $.JSInt_methods.$div(t3, t2);
  if ($.backfaceCulling) {
    t1.frontFace$1(gl, 2305);
    t1.cullFace$1(gl, 1029);
    t1.enable$1(gl, 2884);
  }
  t1 = $.fullRateFrames;
  if (t1 > 0) {
    $.print("firing " + t1 + " frames at full rate");
    before = $.DateTime_DateTime$now();
    for (i = 0; i < $.fullRateFrames; ++i) {
      t1 = $.stats;
      t1.begin$0;
      t1 = t1._timer;
      t1.start$0(t1);
      $.draw(gl, gameLoop);
      t1 = $.stats;
      t1.end$0(t1);
    }
    duration = $.DateTime_DateTime$now().difference$1(before);
    t1 = $.fullRateFrames;
    t2 = duration.get$inSeconds();
    $.print("duration = " + $.S(duration) + " framerate = " + t1 / t2 + " fps");
  }
  gameLoop.start$0(gameLoop);
},

draw: function(gl, gameLoop) {
  var t1, t2;
  $.setPerspectiveMatrix($.get$pMatrix(), $.fieldOfViewYRadians, $.canvasAspect, 1, 1000);
  $.get$cam().render$1(gameLoop);
  t1 = $.getInterceptor$x(gl);
  t1.bindFramebuffer$2(gl, 36160, $.picker.framebuffer);
  t1.clear$1(gl, 16640);
  t1.bindFramebuffer$2(gl, 36160, null);
  t1.clear$1(gl, 16640);
  t1 = $.boolConversionCheck($.showPicking);
  t2 = $.picker;
  if (t1) {
    t2.offscreen = true;
    t2.drawModels$3(gameLoop, $.get$cam(), $.get$pMatrix());
    t1 = $.picker;
    t1.offscreen = false;
    t1.drawModels$3(gameLoop, $.get$cam(), $.get$pMatrix());
  } else {
    t2.offscreen = true;
    t1 = $.programList;
    t2 = new $.draw_closure(gameLoop);
    t1.forEach$1;
    $.assertFunctionSubtype(t2, "void__E", "JSArray", t1);
    $.voidTypeCheck($.IterableMixinWorkaround_forEach(t1, t2));
  }
},

render: function(gl, gameLoop) {
  var t1;
  $.stats.begin$0();
  $.draw(gl, gameLoop);
  t1 = $.stats;
  t1.end$0(t1);
},

readColor: function(label, gl, x, y, framebuffer, color) {
  var t1 = $.getInterceptor$x(gl);
  t1.bindFramebuffer$2(gl, 36160, framebuffer);
  t1.readPixels$7(gl, x, y, 1, 1, 6408, 5121, color);
  $.print(label + ": readPixels: x=" + x + " y=" + y + " color=" + $.S(color));
},

update: function(gl, gameLoop) {
  var m, t1, t2, y, color;
  m = gameLoop.get$mouse();
  if (m.pressed$1(0)) {
    $.print("Mouse.LEFT pressed: withinCanvas=" + m.get$withinCanvas());
    t1 = $.canvas.height;
    t2 = m.get$y(m);
    if (t1 == null)
      throw t1.$sub();
    y = t1 - t2;
    color = $.Uint8List_Uint8List(4);
    $.readColor("canvas-framebuffer", gl, m.get$x(m), y, null, color);
    $.readColor("offscreen-framebuffer", gl, m.get$x(m), y, $.picker.framebuffer, color);
    $.print("mouse hit: " + $.S($.mouseClickHit($.picker.instanceList, color)));
  }
  t1 = $.get$cam();
  t1.update$1(t1, gameLoop);
  $.forEach$1$ax($.programList, new $.update_closure(gameLoop));
},

main: function() {
  var gl, gameLoop;
  gl = $.boot();
  if (gl == null) {
    $.print("WebGL: not available");
    return;
  }
  gameLoop = $.GameLoopHtml$($.canvas);
  gameLoop.get$pointerLock().lockOnClick = false;
  if ($.debugLostContext)
    $.initDebugLostContext(gl, $.canvas, gameLoop, $.initContext$closure);
  gameLoop.onUpdate = $.assertFunctionSubtype(new $.main_closure(gl), "void__GameLoop");
  gameLoop.onRender = $.assertFunctionSubtype(new $.main_closure0(gl), "void__GameLoop");
  $.initContext(gl, gameLoop);
}}],
["obj", "obj.dart", , {
Part: {"": "Object;name,smooth,usemtl,indexFirst,indexListSize<", $isPart: true},

Obj: {"": "Object;_partTable<,vertCoord<,textCoord<,normCoord,indices<,mtllib<",
  set$mtllib: function(v) {
    this.mtllib = $.stringTypeCheck(v);
  },
  get$partList: function() {
    var t1 = this._partTable;
    return $.listSuperNativeTypeCheck(t1.get$values(t1), "$isIterable");
  },
  trimTable$1: function(url) {
    var emptyList, t1;
    emptyList = $.List_List(null, $.JSString);
    $.setRuntimeTypeInfo(emptyList, [$.JSString]);
    $.interceptedTypeCheck(emptyList, "$isList");
    t1 = this._partTable;
    t1 = t1.get$keys(t1);
    t1.forEach$1(t1, new $.Obj_trimTable_closure(this, url, emptyList));
    $.forEach$1$ax(emptyList, new $.Obj_trimTable_closure0(this));
  },
  Obj$fromString$2: function(url, str, box_0) {
    var indexTable, _vertCoord, _textCoord, t1, t2, i;
    indexTable = $.interceptedTypeCheck($.Map_Map($.JSString, $.JSInt), "$isMap");
    _vertCoord = $.List_List(null, $.JSDouble);
    $.setRuntimeTypeInfo(_vertCoord, [$.JSDouble]);
    $.interceptedTypeCheck(_vertCoord, "$isList");
    _textCoord = $.List_List(null, $.JSDouble);
    $.setRuntimeTypeInfo(_textCoord, [$.JSDouble]);
    $.interceptedTypeCheck(_textCoord, "$isList");
    box_0.indexCounter_0 = 0;
    box_0.lineNum_1 = 0;
    box_0.currObj_2 = null;
    $.forEach$1$ax($.interceptedTypeCheck(str.split("\n"), "$isList"), new $.Obj$fromString_closure(new $.Obj$fromString_parseLine(box_0, this, url, indexTable, _vertCoord, _textCoord)));
    this.trimTable$1(url);
    t1 = this.textCoord;
    if (t1.length === 0) {
      t2 = this.indices;
      $.print("OBJ: FIXME: adding " + t2.length + " virtual texture coordinates");
      for (i = 0; i < t2.length; ++i) {
        $.JSArray_methods.add$1(t1, 0);
        $.JSArray_methods.add$1(t1, 0);
      }
    }
  },
  $isObj: true
},

Obj_trimTable_closure: {"": "Closure;this_0,url_1,emptyList_2",
  call$1: function($name) {
    var t1;
    $.stringTypeCheck($name);
    t1 = this.this_0.get$_partTable();
    if (t1.$index(t1, $name).get$indexListSize() < 1) {
      $.JSArray_methods.add$1(this.emptyList_2, $name);
      $.print("OBJ: deleting empty object=" + $name + " loaded from url=" + this.url_1);
    }
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__String", args: [$.JSString]}; }
},

Obj_trimTable_closure0: {"": "Closure;this_3",
  call$1: function($name) {
    var t1;
    $.stringTypeCheck($name);
    t1 = this.this_3.get$_partTable();
    return t1.remove$1(t1, $name);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__String", args: [$.JSString]}; }
},

Obj$fromString_parseLine: {"": "Closure;box_0,this_1,url_2,indexTable_3,_vertCoord_4,_textCoord_5",
  call$1: function(rawLine) {
    var t1, line, new_mtllib, t2, objName, t3, smooth, v, w, t, f, t4, t5, i, ind, index, t6, vi, t7, vOffset, t8, ti, tOffset, ni, new_usemtl;
    $.stringTypeCheck(rawLine);
    t1 = this.box_0;
    t1.lineNum_1 = t1.lineNum_1 + 1;
    line = $.trim$0$s(rawLine);
    if ($.JSString_methods.get$isEmpty(line))
      return;
    if (0 >= line.length)
      throw $.ioore(0);
    if (line[0] === "#")
      return;
    if ($.JSString_methods.startsWith$1(line, "mtllib ")) {
      new_mtllib = $.JSString_methods.substring$1(line, $.get$Obj_prefix_mtllib_len());
      t1 = this.this_1;
      t2 = t1.get$mtllib();
      if (t2 != null)
        $.print("OBJ: mtllib redefinition: from mtllib=" + t2 + " to mtllib=" + new_mtllib);
      t1.set$mtllib(new_mtllib);
      return;
    }
    if ($.JSString_methods.startsWith$1(line, "o ")) {
      objName = $.JSString_methods.substring$1(line, 2);
      t2 = this.this_1;
      t3 = t2.get$_partTable();
      t1.currObj_2 = $.propertyTypeCheck(t3.$index(t3, objName), "$isPart");
      if (t1.currObj_2 == null) {
        t1.currObj_2 = $.Part$(objName, t2.get$indices().length);
        t2 = t2.get$_partTable();
        t2.$indexSet(t2, objName, t1.currObj_2);
      } else
        $.print("OBJ: redefining object " + objName + " at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
      return;
    }
    if (t1.currObj_2 == null) {
      $.print("OBJ: non-object pattern at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
      return;
    }
    if ($.JSString_methods.startsWith$1(line, "s ")) {
      smooth = $.JSString_methods.substring$1(line, 2);
      t2 = smooth === "0" || $.JSString_methods.startsWith$1($.JSString_methods.toLowerCase$0(smooth), "f");
      t1 = t1.currObj_2;
      if (t2)
        t1.smooth = false;
      else
        t1.smooth = true;
      return;
    }
    if ($.JSString_methods.startsWith$1(line, "v ")) {
      v = $.interceptedTypeCheck(line.split(" "), "$isList");
      t2 = $.getInterceptor$asx(v);
      if (t2.get$length(v) === 4) {
        t1 = this._vertCoord_4;
        $.JSArray_methods.add$1(t1, $.double_parse(t2.$index(v, 1), null));
        $.JSArray_methods.add$1(t1, $.double_parse(t2.$index(v, 2), null));
        $.JSArray_methods.add$1(t1, $.double_parse(t2.$index(v, 3), null));
        return;
      }
      if (t2.get$length(v) === 5) {
        w = $.double_parse(t2.$index(v, 4), null);
        t1 = this._vertCoord_4;
        t3 = $.double_parse(t2.$index(v, 1), null);
        if (t3 == null)
          throw t3.$div();
        $.JSArray_methods.add$1(t1, $.JSDouble_methods.$div(t3, w));
        t3 = $.double_parse(t2.$index(v, 2), null);
        if (t3 == null)
          throw t3.$div();
        $.JSArray_methods.add$1(t1, $.JSDouble_methods.$div(t3, w));
        t2 = $.double_parse(t2.$index(v, 3), null);
        if (t2 == null)
          throw t2.$div();
        $.JSArray_methods.add$1(t1, $.JSDouble_methods.$div(t2, w));
        return;
      }
      t2 = t2.get$length(v);
      if (t2 == null)
        throw t2.$sub();
      $.print("OBJ: wrong number of vertex coordinates: " + (t2 - 1) + " at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
      return;
    }
    if ($.JSString_methods.startsWith$1(line, "vt ")) {
      t = $.interceptedTypeCheck(line.split(" "), "$isList");
      t2 = $.getInterceptor$asx(t);
      if (t2.get$length(t) !== 3) {
        t2 = t2.get$length(t);
        if (t2 == null)
          throw t2.$sub();
        $.print("OBJ: wrong number of texture coordinates (" + (t2 - 1) + " != 2) at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
        return;
      }
      t1 = this._textCoord_5;
      $.JSArray_methods.add$1(t1, $.double_parse(t2.$index(t, 1), null));
      $.JSArray_methods.add$1(t1, $.double_parse(t2.$index(t, 2), null));
      return;
    }
    if ($.JSString_methods.startsWith$1(line, "vn "))
      return;
    if ($.JSString_methods.startsWith$1(line, "f ")) {
      f = line.split(" ");
      $.interceptedTypeCheck(f, "$isList");
      if (typeof f !== "string" && (typeof f !== "object" || f === null || f.constructor !== Array && !$.isJsIndexable(f, f[$.dispatchPropertyName])))
        return this.call$1$bailout(1, f, line, t1);
      t2 = f.length;
      if (t2 !== 4) {
        $.print("OBJ: wrong number of face indices (" + (t2 - 1) + " != 3) at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
        return;
      }
      for (t2 = this.this_1, t3 = this.indexTable_3, t4 = this._textCoord_5, t5 = this._vertCoord_4, i = 1; i < f.length; ++i) {
        ind = $.stringTypeCheck(f[i]);
        index = $.intTypeCheck(t3.$index(t3, ind));
        if (index != null) {
          $.JSArray_methods.add$1(t2.get$indices(), index);
          t6 = t1.currObj_2;
          t6.indexListSize = t6.indexListSize + 1;
          continue;
        }
        v = $.interceptedTypeCheck(ind.split("/"), "$isList");
        t6 = $.getInterceptor$asx(v);
        vi = $.stringTypeCheck(t6.$index(v, 0));
        $.assertFunctionSubtype(null, "int__String");
        t7 = $.Primitives_parseInt(vi, null, null);
        if (t7 == null)
          throw t7.$sub();
        vOffset = 3 * (t7 - 1);
        t7 = t2.get$vertCoord();
        t8 = vOffset + 0;
        if (t8 < 0 || t8 >= t5.length)
          throw $.ioore(t8);
        $.JSArray_methods.add$1(t7, t5[t8]);
        t8 = t2.get$vertCoord();
        t7 = vOffset + 1;
        if (t7 < 0 || t7 >= t5.length)
          throw $.ioore(t7);
        $.JSArray_methods.add$1(t8, t5[t7]);
        t7 = t2.get$vertCoord();
        t8 = vOffset + 2;
        if (t8 < 0 || t8 >= t5.length)
          throw $.ioore(t8);
        $.JSArray_methods.add$1(t7, t5[t8]);
        t7 = t6.get$length(v);
        if (t7 == null)
          throw t7.$gt();
        if (t7 > 1) {
          ti = $.stringTypeCheck(t6.$index(v, 1));
          if (ti != null && !$.get$isEmpty$asx(ti)) {
            t7 = $.Primitives_parseInt(ti, null, null);
            if (t7 == null)
              throw t7.$sub();
            tOffset = 2 * (t7 - 1);
            t7 = t2.get$textCoord();
            t8 = tOffset + 0;
            if (t8 < 0 || t8 >= t4.length)
              throw $.ioore(t8);
            $.JSArray_methods.add$1(t7, t4[t8]);
            t8 = t2.get$textCoord();
            t7 = tOffset + 1;
            if (t7 < 0 || t7 >= t4.length)
              throw $.ioore(t7);
            $.JSArray_methods.add$1(t8, t4[t7]);
          }
        }
        t7 = t6.get$length(v);
        if (t7 == null)
          throw t7.$gt();
        if (t7 > 2) {
          ni = $.stringTypeCheck(t6.$index(v, 2));
          if (ni != null && !$.get$isEmpty$asx(ni)) {
            t6 = $.Primitives_parseInt(ni, null, null);
            if (t6 == null)
              throw t6.$sub();
          }
        }
        $.JSArray_methods.add$1(t2.get$indices(), t1.indexCounter_0);
        t6 = t1.currObj_2;
        t6.indexListSize = t6.indexListSize + 1;
        t3.$indexSet(t3, ind, t1.indexCounter_0);
        t1.indexCounter_0 = t1.indexCounter_0 + 1;
      }
      return;
    }
    if ($.JSString_methods.startsWith$1(line, "usemtl ")) {
      new_usemtl = $.JSString_methods.substring$1(line, $.get$Obj_prefix_usemtl_len());
      t2 = t1.currObj_2;
      t3 = t2.usemtl;
      if (t3 != null)
        $.print("OBJ: object=" + t2.name + " usemtl redefinition: from usemtl=" + t3 + " to usemtl=" + new_usemtl);
      t1.currObj_2.usemtl = new_usemtl;
      return;
    }
    $.print("OBJ: unknown pattern at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
  },
  call$1$bailout: function(state0, f, line, t1) {
    switch (state0) {
      case 0:
        $.stringTypeCheck(rawLine);
        t1 = this.box_0;
        t1.lineNum_1 = t1.lineNum_1 + 1;
        line = $.trim$0$s(rawLine);
        if ($.JSString_methods.get$isEmpty(line))
          return;
        if (0 >= line.length)
          throw $.ioore(0);
        if (line[0] === "#")
          return;
        if ($.JSString_methods.startsWith$1(line, "mtllib ")) {
          new_mtllib = $.JSString_methods.substring$1(line, $.get$Obj_prefix_mtllib_len());
          t1 = this.this_1;
          t2 = t1.get$mtllib();
          if (t2 != null)
            $.print("OBJ: mtllib redefinition: from mtllib=" + t2 + " to mtllib=" + new_mtllib);
          t1.set$mtllib(new_mtllib);
          return;
        }
        if ($.JSString_methods.startsWith$1(line, "o ")) {
          objName = $.JSString_methods.substring$1(line, 2);
          t2 = this.this_1;
          t3 = t2.get$_partTable();
          t1.currObj_2 = $.propertyTypeCheck(t3.$index(t3, objName), "$isPart");
          if (t1.currObj_2 == null) {
            t1.currObj_2 = $.Part$(objName, t2.get$indices().length);
            t2 = t2.get$_partTable();
            t2.$indexSet(t2, objName, t1.currObj_2);
          } else
            $.print("OBJ: redefining object " + objName + " at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
          return;
        }
        if (t1.currObj_2 == null) {
          $.print("OBJ: non-object pattern at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
          return;
        }
        if ($.JSString_methods.startsWith$1(line, "s ")) {
          smooth = $.JSString_methods.substring$1(line, 2);
          t2 = smooth === "0" || $.JSString_methods.startsWith$1($.JSString_methods.toLowerCase$0(smooth), "f");
          t1 = t1.currObj_2;
          if (t2)
            t1.smooth = false;
          else
            t1.smooth = true;
          return;
        }
        if ($.JSString_methods.startsWith$1(line, "v ")) {
          v = $.interceptedTypeCheck(line.split(" "), "$isList");
          t2 = $.getInterceptor$asx(v);
          if (t2.get$length(v) === 4) {
            t1 = this._vertCoord_4;
            $.JSArray_methods.add$1(t1, $.double_parse(t2.$index(v, 1), null));
            $.JSArray_methods.add$1(t1, $.double_parse(t2.$index(v, 2), null));
            $.JSArray_methods.add$1(t1, $.double_parse(t2.$index(v, 3), null));
            return;
          }
          if (t2.get$length(v) === 5) {
            w = $.double_parse(t2.$index(v, 4), null);
            t1 = this._vertCoord_4;
            t3 = $.double_parse(t2.$index(v, 1), null);
            if (t3 == null)
              throw t3.$div();
            $.JSArray_methods.add$1(t1, $.JSDouble_methods.$div(t3, w));
            t3 = $.double_parse(t2.$index(v, 2), null);
            if (t3 == null)
              throw t3.$div();
            $.JSArray_methods.add$1(t1, $.JSDouble_methods.$div(t3, w));
            t2 = $.double_parse(t2.$index(v, 3), null);
            if (t2 == null)
              throw t2.$div();
            $.JSArray_methods.add$1(t1, $.JSDouble_methods.$div(t2, w));
            return;
          }
          t2 = t2.get$length(v);
          if (t2 == null)
            throw t2.$sub();
          $.print("OBJ: wrong number of vertex coordinates: " + (t2 - 1) + " at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
          return;
        }
        if ($.JSString_methods.startsWith$1(line, "vt ")) {
          t = $.interceptedTypeCheck(line.split(" "), "$isList");
          t2 = $.getInterceptor$asx(t);
          if (t2.get$length(t) !== 3) {
            t2 = t2.get$length(t);
            if (t2 == null)
              throw t2.$sub();
            $.print("OBJ: wrong number of texture coordinates (" + (t2 - 1) + " != 2) at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
            return;
          }
          t1 = this._textCoord_5;
          $.JSArray_methods.add$1(t1, $.double_parse(t2.$index(t, 1), null));
          $.JSArray_methods.add$1(t1, $.double_parse(t2.$index(t, 2), null));
          return;
        }
        if ($.JSString_methods.startsWith$1(line, "vn "))
          return;
      case 1:
        var new_mtllib, t2, objName, t3, smooth, v, w, t, t4, t5, t6, i, ind, index, t7, vi, t8, vOffset, t9, ti, tOffset, ni, new_usemtl;
        if (state0 === 1 || state0 === 0 && $.JSString_methods.startsWith$1(line, "f "))
          switch (state0) {
            case 0:
              f = line.split(" ");
              $.interceptedTypeCheck(f, "$isList");
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$asx(f);
              if (t2.get$length(f) !== 4) {
                t2 = t2.get$length(f);
                if (t2 == null)
                  throw t2.$sub();
                $.print("OBJ: wrong number of face indices (" + (t2 - 1) + " != 3) at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
                return;
              }
              for (t3 = this.this_1, t4 = this.indexTable_3, t5 = this._textCoord_5, t6 = this._vertCoord_4, i = 1; $.JSInt_methods.$lt(i, t2.get$length(f)); ++i) {
                ind = $.stringTypeCheck(t2.$index(f, i));
                index = $.intTypeCheck(t4.$index(t4, ind));
                if (index != null) {
                  $.JSArray_methods.add$1(t3.get$indices(), index);
                  t7 = t1.currObj_2;
                  t7.indexListSize = t7.indexListSize + 1;
                  continue;
                }
                v = $.interceptedTypeCheck(ind.split("/"), "$isList");
                t7 = $.getInterceptor$asx(v);
                vi = $.stringTypeCheck(t7.$index(v, 0));
                $.assertFunctionSubtype(null, "int__String");
                t8 = $.Primitives_parseInt(vi, null, null);
                if (t8 == null)
                  throw t8.$sub();
                vOffset = 3 * (t8 - 1);
                t8 = t3.get$vertCoord();
                t9 = vOffset + 0;
                if (t9 < 0 || t9 >= t6.length)
                  throw $.ioore(t9);
                $.JSArray_methods.add$1(t8, t6[t9]);
                t9 = t3.get$vertCoord();
                t8 = vOffset + 1;
                if (t8 < 0 || t8 >= t6.length)
                  throw $.ioore(t8);
                $.JSArray_methods.add$1(t9, t6[t8]);
                t8 = t3.get$vertCoord();
                t9 = vOffset + 2;
                if (t9 < 0 || t9 >= t6.length)
                  throw $.ioore(t9);
                $.JSArray_methods.add$1(t8, t6[t9]);
                t8 = t7.get$length(v);
                if (t8 == null)
                  throw t8.$gt();
                if (t8 > 1) {
                  ti = $.stringTypeCheck(t7.$index(v, 1));
                  if (ti != null && !$.get$isEmpty$asx(ti)) {
                    t8 = $.Primitives_parseInt(ti, null, null);
                    if (t8 == null)
                      throw t8.$sub();
                    tOffset = 2 * (t8 - 1);
                    t8 = t3.get$textCoord();
                    t9 = tOffset + 0;
                    if (t9 < 0 || t9 >= t5.length)
                      throw $.ioore(t9);
                    $.JSArray_methods.add$1(t8, t5[t9]);
                    t9 = t3.get$textCoord();
                    t8 = tOffset + 1;
                    if (t8 < 0 || t8 >= t5.length)
                      throw $.ioore(t8);
                    $.JSArray_methods.add$1(t9, t5[t8]);
                  }
                }
                t8 = t7.get$length(v);
                if (t8 == null)
                  throw t8.$gt();
                if (t8 > 2) {
                  ni = $.stringTypeCheck(t7.$index(v, 2));
                  if (ni != null && !$.get$isEmpty$asx(ni)) {
                    t7 = $.Primitives_parseInt(ni, null, null);
                    if (t7 == null)
                      throw t7.$sub();
                  }
                }
                $.JSArray_methods.add$1(t3.get$indices(), t1.indexCounter_0);
                t7 = t1.currObj_2;
                t7.indexListSize = t7.indexListSize + 1;
                t4.$indexSet(t4, ind, t1.indexCounter_0);
                t1.indexCounter_0 = t1.indexCounter_0 + 1;
              }
              return;
          }
        if ($.JSString_methods.startsWith$1(line, "usemtl ")) {
          new_usemtl = $.JSString_methods.substring$1(line, $.get$Obj_prefix_usemtl_len());
          t2 = t1.currObj_2;
          t3 = t2.usemtl;
          if (t3 != null)
            $.print("OBJ: object=" + t2.name + " usemtl redefinition: from usemtl=" + t3 + " to usemtl=" + new_usemtl);
          t1.currObj_2.usemtl = new_usemtl;
          return;
        }
        $.print("OBJ: unknown pattern at line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
    }
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__String", void: true, args: [$.JSString]}; }
},

Obj$fromString_closure: {"": "Closure;parseLine_6",
  call$1: function(line) {
    return this.parseLine_6.call$1($.stringTypeCheck(line));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__String", args: [$.JSString]}; }
},

Material: {"": "Object;name,map_Kd,Kd", $isMaterial: true},

mtllib_parse__parse_newmtl: {"": "Closure;box_0,lib_1",
  call$5: function(field, param, line, lineNum, url) {
    var t1, t2;
    $.stringTypeCheck(field);
    $.stringTypeCheck(param);
    $.stringTypeCheck(line);
    $.intTypeCheck(lineNum);
    $.stringTypeCheck(url);
    t1 = this.lib_1;
    t2 = this.box_0;
    t2.currMaterial_0 = $.propertyTypeCheck(t1.$index(t1, param), "$isMaterial");
    if (t2.currMaterial_0 == null) {
      t2.currMaterial_0 = $.Material$(param);
      t1.$indexSet(t1, param, t2.currMaterial_0);
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_void__String_String_String_int_String: true
},

mtllib_parse__parse_map_Kd: {"": "Closure;box_0",
  call$5: function(field, param, line, lineNum, url) {
    var t1;
    $.stringTypeCheck(field);
    $.stringTypeCheck(param);
    $.stringTypeCheck(line);
    $.intTypeCheck(lineNum);
    $.stringTypeCheck(url);
    t1 = this.box_0.currMaterial_0;
    if (t1 == null) {
      $.print("mtllib_parse: url=" + url + ": line=" + $.S(lineNum) + ": map_Kd=" + param + " found for undefined material: [" + line + "]");
      return;
    }
    t1.map_Kd = param;
  },
  $isFunction: true,
  $asObject: null,
  $is_void__String_String_String_int_String: true
},

mtllib_parse__parse_Kd: {"": "Closure;box_0",
  call$5: function(field, param, line, lineNum, url) {
    var t1, rgb, t2, t3, t4;
    $.stringTypeCheck(field);
    $.stringTypeCheck(param);
    $.stringTypeCheck(line);
    $.intTypeCheck(lineNum);
    $.stringTypeCheck(url);
    t1 = this.box_0;
    if (t1.currMaterial_0 == null) {
      $.print("mtllib_parse: url=" + url + ": line=" + $.S(lineNum) + ": Kd=" + param + " found for undefined material: [" + line + "]");
      return;
    }
    rgb = $.interceptedTypeCheck(param.split(" "), "$isList");
    t2 = t1.currMaterial_0.Kd;
    t3 = $.getInterceptor$asx(rgb);
    t4 = $.double_parse(t3.$index(rgb, 0), null);
    if (0 >= t2.length)
      throw $.ioore(0);
    t2[0] = t4;
    t4 = t1.currMaterial_0.Kd;
    t2 = $.double_parse(t3.$index(rgb, 1), null);
    if (1 >= t4.length)
      throw $.ioore(1);
    t4[1] = t2;
    t1 = t1.currMaterial_0.Kd;
    t3 = $.double_parse(t3.$index(rgb, 2), null);
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2] = t3;
  },
  $isFunction: true,
  $asObject: null,
  $is_void__String_String_String_int_String: true
},

mtllib_parse__parse_noop: {"": "Closure;",
  call$5: function(field, param, line, lineNum, url) {
    $.stringTypeCheck(field);
    $.stringTypeCheck(param);
    $.stringTypeCheck(line);
    $.intTypeCheck(lineNum);
    $.stringTypeCheck(url);
  },
  $isFunction: true,
  $asObject: null,
  $is_void__String_String_String_int_String: true
},

mtllib_parse_parseLine: {"": "Closure;box_0,url_2,parserTable_3",
  call$1: function(rawLine) {
    var t1, line, paramIndex, field, param, t2, parser;
    $.stringTypeCheck(rawLine);
    t1 = this.box_0;
    t1.lineNum_1 = t1.lineNum_1 + 1;
    line = $.trim$0$s(rawLine);
    if ($.JSString_methods.get$isEmpty(line))
      return;
    if (0 >= line.length)
      throw $.ioore(0);
    if (line[0] === "#")
      return;
    paramIndex = $.JSString_methods.indexOf$1(line, " ");
    if (paramIndex == null)
      throw paramIndex.$lt();
    if (paramIndex < 1) {
      $.print("mtllib_parse: space separator not found on line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
      return;
    }
    field = $.JSString_methods.substring$2(line, 0, paramIndex);
    param = $.JSString_methods.trim$0($.JSString_methods.substring$1(line, paramIndex));
    t2 = this.parserTable_3;
    parser = $.assertFunctionSubtype(t2.$index(t2, field), "void__String_String_String_int_String");
    if (parser == null) {
      $.print("mtllib_parse: unknown field=[" + field + "] on line=" + t1.lineNum_1 + " from url=" + this.url_2 + ": [" + line + "]");
      return;
    }
    parser.call$5(field, param, line, t1.lineNum_1, this.url_2);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__String", void: true, args: [$.JSString]}; }
},

mtllib_parse_closure: {"": "Closure;parseLine_4",
  call$1: function(line) {
    return this.parseLine_4.call$1($.stringTypeCheck(line));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__String", args: [$.JSString]}; }
},

Part$: function($name, indexFirst) {
  return new $.Part($name, null, null, indexFirst, 0);
},

Obj$fromString: function(url, str) {
  var t1, t2, t3, t4, t5;
  t1 = $.Map_Map($.JSString, $.Part);
  t2 = $.List_List(null, $.JSDouble);
  $.setRuntimeTypeInfo(t2, [$.JSDouble]);
  t3 = $.List_List(null, $.JSDouble);
  $.setRuntimeTypeInfo(t3, [$.JSDouble]);
  t4 = $.List_List(null, $.JSDouble);
  $.setRuntimeTypeInfo(t4, [$.JSDouble]);
  t5 = $.List_List(null, $.JSInt);
  $.setRuntimeTypeInfo(t5, [$.JSInt]);
  t5 = new $.Obj($.interceptedTypeCheck(t1, "$isMap"), $.interceptedTypeCheck(t2, "$isList"), $.interceptedTypeCheck(t3, "$isList"), $.interceptedTypeCheck(t4, "$isList"), $.interceptedTypeCheck(t5, "$isList"), null);
  t5.Obj$fromString$2(url, str, {});
  return t5;
},

Material$: function($name) {
  var t1 = $.List_List(3, $.JSDouble);
  $.setRuntimeTypeInfo(t1, [$.JSDouble]);
  return new $.Material($name, null, $.interceptedTypeCheck(t1, "$isList"));
},

mtllib_parse: function(str, url) {
  var t1, lib, t2, parserTable;
  t1 = {};
  lib = $.interceptedTypeCheck($.Map_Map($.JSString, $.Material), "$isMap");
  t1.currMaterial_0 = null;
  t2 = new $.mtllib_parse__parse_noop();
  parserTable = $.interceptedTypeCheck($.makeLiteralMap(["newmtl", new $.mtllib_parse__parse_newmtl(t1, lib), "map_Kd", new $.mtllib_parse__parse_map_Kd(t1), "Kd", new $.mtllib_parse__parse_Kd(t1), "Ns", t2, "Ka", t2, "Ks", t2, "Ni", t2, "d", t2, "illum", t2]), "$isMap");
  t1.lineNum_1 = 0;
  $.forEach$1$ax($.interceptedTypeCheck(str.split("\n"), "$isList"), new $.mtllib_parse_closure(new $.mtllib_parse_parseLine(t1, url, parserTable)));
  $.print("mtllib_parse: url=" + url + ": materials: " + $.S($.get$length$asx(lib)));
  return $.interceptedTypeCheck(lib, "$isMap");
}}],
["shader", "shader.dart", , {
Instance: {"": "Object;model>,center,scale,pickColor<,MV",
  update$1: function(_, gameLoop) {
  },
  draw$3: function(gameLoop, prog, cam) {
    var t1, t2, gl;
    t1 = this.MV;
    $.setViewMatrix(t1, cam.eye, cam.center, cam.up);
    t2 = this.center;
    t1.translate$3(t1, t2.$index(t2, 0), t2.$index(t2, 1), t2.$index(t2, 2));
    t2 = this.scale;
    t1.scale$3(t1, t2, t2, t2);
    gl = prog.gl;
    t2 = $.getInterceptor$x(gl);
    t2.uniformMatrix4fv$3(gl, prog.u_MV, false, t1.storage);
    t1 = this.model;
    t2.bindBuffer$2(gl, 34962, t1.vertexPositionBuffer);
    t2.vertexAttribPointer$6(gl, prog.a_Position, t1.vertexPositionBufferItemSize, 5126, false, 0, 0);
    t2.bindBuffer$2(gl, 34963, t1.vertexIndexBuffer);
    $.JSArray_methods.forEach$1(t1.pieceList, new $.Instance_draw_closure(this, gl));
  },
  $isInstance: true
},

Instance_draw_closure: {"": "Closure;this_0,gl_1",
  call$1: function(piece) {
    $.propertyTypeCheck(piece, "$isPiece");
    $.drawElements$4$x(this.gl_1, 4, piece.vertexIndexLength, 5123, piece.vertexIndexOffset * $.get$model$x(this.this_0).get$vertexIndexBufferItemSize());
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Piece", args: [$.Piece]}; }
},

Piece: {"": "Object;vertexIndexOffset,vertexIndexLength", $isPiece: true},

Model: {"": "Object;vertexPositionBuffer,vertexIndexBuffer,vertexPositionBufferItemSize,vertexIndexBufferItemSize<,pieceList<,instanceList<",
  _createBuffers$5: function(gl, indices, vertCoord, textCoord, normCoord) {
    var t1;
    $.interceptedTypeCheck(indices, "$isList");
    $.interceptedTypeCheck(vertCoord, "$isList");
    $.interceptedTypeCheck(textCoord, "$isList");
    $.interceptedTypeCheck(normCoord, "$isList");
    this.vertexPositionBuffer = gl.createBuffer();
    t1 = $.getInterceptor$x(gl);
    t1.bindBuffer$2(gl, 34962, this.vertexPositionBuffer);
    t1.bufferDataTyped$3(gl, 34962, $.Float32List_Float32List$fromList(vertCoord), 35044);
    this.vertexIndexBuffer = gl.createBuffer();
    t1.bindBuffer$2(gl, 34963, this.vertexIndexBuffer);
    t1.bufferDataTyped$3(gl, 34963, $.Uint16List_Uint16List$fromList(indices), 35044);
    t1.bindBuffer$2(gl, 34962, null);
    t1.bindBuffer$2(gl, 34963, null);
  },
  addPiece$2: function(offset, $length) {
    var pi = $.Piece$(offset, $length);
    $.JSArray_methods.add$1(this.pieceList, pi);
    return pi;
  },
  loadObj$2: function(gl, o) {
    var t1 = o.get$partList();
    t1.forEach$1(t1, new $.Model_loadObj_closure(this));
  },
  addInstance$1: function(i) {
    $.JSArray_methods.add$1(this.instanceList, i);
  },
  drawInstances$3: function(gameLoop, program, cam) {
    $.JSArray_methods.forEach$1(this.instanceList, new $.Model_drawInstances_closure(gameLoop, program, cam));
  },
  update$1: function(_, gameLoop) {
    $.JSArray_methods.forEach$1(this.instanceList, new $.Model_update_closure(gameLoop));
  },
  Model$fromOBJ$2: function(gl, URL) {
    $.HttpRequest_getString(URL, null, null).then$1(new $.Model$fromOBJ_handleResponse(this, gl, URL)).catchError$1(new $.Model$fromOBJ_handleError(URL));
  },
  Model$fromJson$2: function(gl, URL) {
    $.HttpRequest_getString(URL, null, null).then$1(new $.Model$fromJson_handleResponse(this, gl)).catchError$1(new $.Model$fromJson_handleError(URL));
  },
  $isModel: true
},

Model$fromJson_handleResponse: {"": "Closure;this_0,gl_1",
  call$1: function(response) {
    var m, e, exception, t1, indices, vertCoord;
    $.stringTypeCheck(response);
    m = null;
    try {
      m = $.interceptedTypeCheck($.parse(response, null), "$isMap");
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      $.print("Model.fromJson: failure parsing JSON: " + $.S(e));
      return;
    }

    indices = $.interceptedTypeCheck($.$index$asx(m, "vertInd"), "$isList");
    vertCoord = $.interceptedTypeCheck($.$index$asx(m, "vertCoord"), "$isList");
    t1 = this.this_0;
    t1.addPiece$2(0, $.get$length$asx(indices));
    $.assertHelper(t1.get$pieceList().length === 1);
    t1._createBuffers$5(this.gl_1, indices, vertCoord, null, null);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__String", void: true, args: [$.JSString]}; }
},

Model$fromJson_handleError: {"": "Closure;URL_2",
  call$1: function(err) {
    $.print("Model.fromJson: failure fetching JSON from URL: " + this.URL_2 + ": " + $.S(err));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__Object", void: true, args: [$.Object]}; }
},

Model_loadObj_closure: {"": "Closure;this_0",
  call$1: function(pa) {
    var pi;
    $.propertyTypeCheck(pa, "$isPart");
    pi = this.this_0.addPiece$2(pa.indexFirst, pa.indexListSize);
    $.print("Model.fromOBJ: added part " + pa.name + " into piece: offset=" + pi.vertexIndexOffset + " length=" + $.S(pi.vertexIndexLength));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Part", args: [$.Part]}; }
},

Model$fromOBJ_handleResponse: {"": "Closure;this_0,gl_1,URL_2",
  call$1: function(response) {
    var t1, obj, t2;
    $.stringTypeCheck(response);
    t1 = this.URL_2;
    $.print("Model.fromOBJ: fetched OBJ from URL: " + t1);
    obj = $.Obj$fromString(t1, response);
    t1 = this.this_0;
    t2 = this.gl_1;
    t1.loadObj$2(t2, obj);
    t1._createBuffers$5(t2, obj.indices, obj.vertCoord, obj.textCoord, obj.normCoord);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__String", void: true, args: [$.JSString]}; }
},

Model$fromOBJ_handleError: {"": "Closure;URL_3",
  call$1: function(err) {
    $.print("Model.fromOBJ: failure fetching OBJ from URL: " + this.URL_3 + ": " + $.S(err));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__Object", void: true, args: [$.Object]}; }
},

Model_drawInstances_closure: {"": "Closure;gameLoop_0,program_1,cam_2",
  call$1: function(i) {
    return $.propertyTypeCheck(i, "$isInstance").draw$3(this.gameLoop_0, this.program_1, this.cam_2);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Instance", args: [$.Instance]}; }
},

Model_update_closure: {"": "Closure;gameLoop_0",
  call$1: function(i) {
    $.propertyTypeCheck(i, "$isInstance");
    return i.update$1(i, this.gameLoop_0);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Instance", args: [$.Instance]}; }
},

mouseClickHit_match: {"": "Closure;color_0",
  call$1: function(i) {
    return $.matchColor(this.color_0, $.propertyTypeCheck(i, "$isInstance").pickColor);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "bool__Instance", ret: $.JSBool, args: [$.Instance]}; }
},

PickerInstance: {"": "Instance;model,center,scale,pickColor,MV",
  draw$3: function(gameLoop, prog, cam) {
    $.uniform4fv$2$x(prog.gl, $.propertyTypeCast(prog, "$isPickerShader").u_Color, this.pickColor);
    $.Instance.prototype.draw$3.call(this, gameLoop, prog, cam);
  },
  $isPickerInstance: true
},

PickerShader: {"": "ShaderProgram;u_Color,programList,instanceList<,framebuffer,offscreen,program,gl,a_Position,u_MV,u_P,shaderReady,modelList",
  _createRenderbuffer$3: function(gl, width, height) {
    var e, texture, exception, t1, renderbuffer;
    texture = $.createTexture$0$x(gl);
    $.bindTexture$2$x(gl, 3553, texture);
    try {
      $.texImage2DTyped$9$x(gl, 3553, 0, 6408, width, height, 0, 6408, 5121, null);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      $.print("FIXME DEBUG work-around: PickerShader: gl.texImage2D: exception: " + $.S(e));
    }

    renderbuffer = $.createRenderbuffer$0$x(gl);
    $.bindRenderbuffer$2$x(gl, 36161, renderbuffer);
    $.renderbufferStorage$4$x(gl, 36161, 33189, width, height);
    this.framebuffer = $.createFramebuffer$0$x(gl);
    $.bindFramebuffer$2$x(gl, 36160, this.framebuffer);
    $.framebufferTexture2D$5$x(gl, 36160, 36064, 3553, texture, 0);
    $.framebufferRenderbuffer$4$x(gl, 36160, 36096, 36161, renderbuffer);
    $.bindTexture$2$x(gl, 3553, null);
    $.bindRenderbuffer$2$x(gl, 36161, null);
    $.bindFramebuffer$2$x(gl, 36160, null);
  },
  getLocations$0: function() {
    $.ShaderProgram.prototype.getLocations$0.call(this);
    this.u_Color = $.getUniformLocation$2$x(this.gl, this.program, "u_Color");
  },
  drawModels$3: function(gameLoop, cam, pMatrix) {
    var t1, t2;
    if ($.boolConversionCheck(this.offscreen))
      $.bindFramebuffer$2$x(this.gl, 36160, this.framebuffer);
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    t2.useProgram$1(t1, this.program);
    t2.enableVertexAttribArray$1(t1, this.a_Position);
    t2.uniformMatrix4fv$3(t1, this.u_P, false, pMatrix.storage);
    $.JSArray_methods.forEach$1(this.instanceList, new $.PickerShader_drawModels_closure(this, gameLoop, cam));
    t2.bindBuffer$2(t1, 34962, null);
    t2.bindBuffer$2(t1, 34963, null);
    t2.bindFramebuffer$2(t1, 36160, null);
  },
  PickerShader$4: function(gl, programList, width, height) {
    $.interceptedTypeCheck(programList, "$isList");
    $.forEach$1$ax(this.programList, new $.PickerShader_closure(this));
    this._createRenderbuffer$3(gl, width, height);
  },
  $isPickerShader: true
},

PickerShader_closure: {"": "Closure;this_0",
  call$1: function(p) {
    $.JSArray_methods.forEach$1(p.get$modelList(), new $.PickerShader__closure(this.this_0));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

PickerShader__closure: {"": "Closure;this_1",
  call$1: function(m) {
    var t1 = $.JSArray_methods.where$1(m.get$instanceList(), new $.PickerShader___closure());
    t1.forEach$1(t1, new $.PickerShader___closure0(this.this_1));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

PickerShader___closure: {"": "Closure;",
  call$1: function(i) {
    return i.get$pickColor() != null;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

PickerShader___closure0: {"": "Closure;this_2",
  call$1: function(ii) {
    var pi = $.PickerInstance$(ii);
    $.JSArray_methods.add$1(this.this_2.get$instanceList(), pi);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

PickerShader_drawModels_closure: {"": "Closure;this_0,gameLoop_1,cam_2",
  call$1: function(i) {
    return i.draw$3(this.gameLoop_1, this.this_0, this.cam_2);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

ShaderProgram: {"": "Object;program,gl<,a_Position,u_MV,u_P,shaderReady,modelList<",
  set$program: function(v) {
    this.program = $.interceptedTypeCheck(v, "$isProgram");
  },
  set$shaderReady: function(v) {
    this.shaderReady = $.boolTypeCheck(v);
  },
  initContext$2: function(gl, textureTable) {
    $.interceptedTypeCheck(textureTable, "$isMap");
  },
  getLocations$0: function() {
    var t1, t2;
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    this.a_Position = t2.getAttribLocation$2(t1, this.program, "a_Position");
    this.u_MV = t2.getUniformLocation$2(t1, this.program, "u_MV");
    this.u_P = t2.getUniformLocation$2(t1, this.program, "u_P");
  },
  fetch$3: function(shaderCache, vertexShaderURL, fragmentShaderURL) {
    var t1, t2, t3, t4;
    t1 = {};
    $.interceptedTypeCheck(shaderCache, "$isMap");
    t2 = new $.ShaderProgram_fetch_compileShader(this, shaderCache);
    t1.vertexShader_0 = null;
    t1.fragmentShader_1 = null;
    t3 = new $.ShaderProgram_fetch_tryLink(t1, this);
    t4 = $.getInterceptor$asx(shaderCache);
    t1.vertexShader_0 = $.interceptedTypeCheck(t4.$index(shaderCache, vertexShaderURL), "$isShader");
    if (t1.vertexShader_0 == null)
      new $.ShaderProgram_fetch_fetchVertexShader(t1, vertexShaderURL, t2, t3).call$0();
    t1.fragmentShader_1 = $.interceptedTypeCheck(t4.$index(shaderCache, fragmentShaderURL), "$isShader");
    if (t1.fragmentShader_1 == null)
      new $.ShaderProgram_fetch_fetchFragmentShader(t1, fragmentShaderURL, t2, t3).call$0();
    t3.call$0();
  },
  addModel$1: function(m) {
    $.JSArray_methods.add$1(this.modelList, m);
  },
  drawModels$3: function(gameLoop, cam, pMatrix) {
    var t1, t2;
    if (!this.shaderReady)
      return;
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    t2.useProgram$1(t1, this.program);
    t2.enableVertexAttribArray$1(t1, this.a_Position);
    t2.uniformMatrix4fv$3(t1, this.u_P, false, pMatrix.storage);
    $.JSArray_methods.forEach$1(this.modelList, new $.ShaderProgram_drawModels_closure(this, gameLoop, cam));
    t2.bindBuffer$2(t1, 34962, null);
    t2.bindBuffer$2(t1, 34963, null);
  },
  update$1: function(_, gameLoop) {
    $.JSArray_methods.forEach$1(this.modelList, new $.ShaderProgram_update_closure(gameLoop));
  },
  $isShaderProgram: true
},

ShaderProgram_fetch_compileShader: {"": "Closure;this_1,shaderCache_2",
  call$3: function(shaderURL, shaderSource, shaderType) {
    var t1, shader, infoLog;
    $.stringTypeCheck(shaderURL);
    $.stringTypeCheck(shaderSource);
    $.intTypeCheck(shaderType);
    t1 = this.this_1;
    shader = $.createShader$1$x(t1.get$gl(), shaderType);
    $.shaderSource$2$x(t1.get$gl(), shader, shaderSource);
    $.compileShader$1$x(t1.get$gl(), shader);
    if (!$.boolTypeCheck($.getShaderParameter$2$x(t1.get$gl(), shader, 35713))) {
      infoLog = $.getShaderInfoLog$1$x(t1.get$gl(), shader);
      $.print("compileShader: compilation FAILURE: " + shaderURL + ": info=" + infoLog);
      if ($.boolConversionCheck(t1.get$gl().isContextLost()))
        $.print("compileShader: compilation FAILURE: " + shaderURL + ": info=" + infoLog + ": context is lost");
      return;
    }
    t1 = this.shaderCache_2;
    if (t1.$index(t1, shaderURL) != null)
      $.print($.JSString_methods.$add($.JSString_methods.$add("compileShader: ", shaderURL), ": FIXME: overwriting shader cache"));
    t1.$indexSet(t1, shaderURL, shader);
    return shader;
  },
  $isFunction: true,
  $asObject: null,
  $is_Shader__String_String_int: true
},

ShaderProgram_fetch_tryLink: {"": "Closure;box_0,this_3",
  call$0: function() {
    var t1, t2, p, infoLog;
    t1 = this.box_0;
    if (t1.vertexShader_0 == null || t1.fragmentShader_1 == null)
      return;
    t2 = this.this_3;
    p = t2.get$gl().createProgram();
    $.attachShader$2$x(t2.get$gl(), p, t1.vertexShader_0);
    $.attachShader$2$x(t2.get$gl(), p, t1.fragmentShader_1);
    $.linkProgram$1$x(t2.get$gl(), p);
    if (!$.boolTypeCheck($.getProgramParameter$2$x(t2.get$gl(), p, 35714))) {
      infoLog = $.getProgramInfoLog$1$x(t2.get$gl(), p);
      $.print("tryLink: shader program link FAILURE: " + infoLog);
      if ($.boolConversionCheck(t2.get$gl().isContextLost()))
        $.print("tryLink: shader program link FAILURE: " + infoLog + ": context is lost");
      return;
    }
    t2.set$program(p);
    t2.getLocations$0();
    t2.set$shaderReady(true);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

ShaderProgram_fetch_fetchVertexShader: {"": "Closure;box_0,vertexShaderURL_4,compileShader_5,tryLink_6",
  call$0: function() {
    var url, requestVert;
    url = this.vertexShaderURL_4;
    requestVert = $.HttpRequest_HttpRequest();
    $.HttpRequest_methods.open$2(requestVert, "GET", url);
    $.HttpRequest_methods.get$onLoad(requestVert).listen$1(new $.ShaderProgram_fetch_fetchVertexShader_closure(this.box_0, this.compileShader_5, this.tryLink_6, url, requestVert));
    $.HttpRequest_methods.get$onError(requestVert).listen$1(new $.ShaderProgram_fetch_fetchVertexShader_closure0(url));
    requestVert.send();
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

ShaderProgram_fetch_fetchVertexShader_closure: {"": "Closure;box_0,compileShader_7,tryLink_8,url_9,requestVert_10",
  call$1: function(e) {
    var t1, response;
    $.interceptedTypeCheck(e, "$isProgressEvent");
    t1 = this.requestVert_10;
    response = t1.responseText;
    if (t1.status !== 200) {
      $.print("vertexShader: url=" + this.url_9 + ": error: [" + response + "]");
      return;
    }
    this.box_0.vertexShader_0 = $.interceptedTypeCheck(this.compileShader_7.call$3(this.url_9, response, 35633), "$isShader");
    this.tryLink_8.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__ProgressEvent", args: [$.ProgressEvent]}; }
},

ShaderProgram_fetch_fetchVertexShader_closure0: {"": "Closure;url_11",
  call$1: function(e) {
    $.print("vertexShader: url=" + this.url_11 + ": error: [" + $.S(e) + "]");
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

ShaderProgram_fetch_fetchFragmentShader: {"": "Closure;box_0,fragmentShaderURL_12,compileShader_13,tryLink_14",
  call$0: function() {
    var url, requestFrag;
    url = this.fragmentShaderURL_12;
    requestFrag = $.HttpRequest_HttpRequest();
    $.HttpRequest_methods.open$2(requestFrag, "GET", url);
    $.HttpRequest_methods.get$onLoad(requestFrag).listen$1(new $.ShaderProgram_fetch_fetchFragmentShader_closure(this.box_0, this.compileShader_13, this.tryLink_14, url, requestFrag));
    $.HttpRequest_methods.get$onError(requestFrag).listen$1(new $.ShaderProgram_fetch_fetchFragmentShader_closure0(url));
    requestFrag.send();
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

ShaderProgram_fetch_fetchFragmentShader_closure: {"": "Closure;box_0,compileShader_15,tryLink_16,url_17,requestFrag_18",
  call$1: function(e) {
    var t1, response;
    $.interceptedTypeCheck(e, "$isProgressEvent");
    t1 = this.requestFrag_18;
    response = t1.responseText;
    if (t1.status !== 200) {
      $.print("fragmentShader: url=" + this.url_17 + ": error: [" + response + "]");
      return;
    }
    this.box_0.fragmentShader_1 = $.interceptedTypeCheck(this.compileShader_15.call$3(this.url_17, response, 35632), "$isShader");
    this.tryLink_16.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__ProgressEvent", args: [$.ProgressEvent]}; }
},

ShaderProgram_fetch_fetchFragmentShader_closure0: {"": "Closure;url_19",
  call$1: function(e) {
    $.print("fragmentShader: url=" + this.url_19 + ": error: [" + $.S(e) + "]");
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

ShaderProgram_drawModels_closure: {"": "Closure;this_0,gameLoop_1,cam_2",
  call$1: function(m) {
    return $.propertyTypeCheck(m, "$isModel").drawInstances$3(this.gameLoop_1, this.this_0, this.cam_2);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Model", args: [$.Model]}; }
},

ShaderProgram_update_closure: {"": "Closure;gameLoop_0",
  call$1: function(m) {
    $.propertyTypeCheck(m, "$isModel");
    return m.update$1(m, this.gameLoop_0);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Model", args: [$.Model]}; }
},

TexShaderProgram: {"": "ShaderProgram;a_TextureCoord,u_Sampler,program,gl,a_Position,u_MV,u_P,shaderReady,modelList",
  initContext$2: function(gl, textureTable) {
    $.JSArray_methods.forEach$1(this.modelList, new $.TexShaderProgram_initContext_closure(gl, $.interceptedTypeCheck(textureTable, "$isMap")));
  },
  getLocations$0: function() {
    var t1, t2;
    $.ShaderProgram.prototype.getLocations$0.call(this);
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    this.a_TextureCoord = t2.getAttribLocation$2(t1, this.program, "a_TextureCoord");
    this.u_Sampler = t2.getUniformLocation$2(t1, this.program, "u_Sampler");
  },
  drawModels$3: function(gameLoop, cam, pMatrix) {
    var t1, t2;
    if (!this.shaderReady)
      return;
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    t2.useProgram$1(t1, this.program);
    t2.enableVertexAttribArray$1(t1, this.a_Position);
    t2.enableVertexAttribArray$1(t1, this.a_TextureCoord);
    t2.uniformMatrix4fv$3(t1, this.u_P, false, pMatrix.storage);
    $.JSArray_methods.forEach$1(this.modelList, new $.TexShaderProgram_drawModels_closure(this, gameLoop, cam));
    t2.bindBuffer$2(t1, 34962, null);
    t2.bindBuffer$2(t1, 34963, null);
    t2.bindTexture$2(t1, 3553, null);
  },
  $isTexShaderProgram: true
},

TexShaderProgram_initContext_closure: {"": "Closure;gl_0,textureTable_1",
  call$1: function(m) {
    return $.propertyTypeCheck(m, "$isTexModel").initContext$2(this.gl_0, this.textureTable_1);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__TexModel", args: [$.TexModel]}; }
},

TexShaderProgram_drawModels_closure: {"": "Closure;this_0,gameLoop_1,cam_2",
  call$1: function(m) {
    return $.propertyTypeCheck(m, "$isTexModel").drawInstances$3(this.gameLoop_1, this.this_0, this.cam_2);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__TexModel", args: [$.TexModel]}; }
},

TexPiece: {"": "Piece;texInfo,vertexIndexOffset,vertexIndexLength", $isTexPiece: true},

TexModel: {"": "Model;textureCoordBuffer,textureCoordBufferItemSize,asset<,textureTable<,vertexPositionBuffer,vertexIndexBuffer,vertexPositionBufferItemSize,vertexIndexBufferItemSize,pieceList,instanceList",
  initContext$2: function(gl, textureTable) {
    $.JSArray_methods.forEach$1(this.pieceList, new $.TexModel_initContext_closure(gl, $.interceptedTypeCheck(textureTable, "$isMap")));
  },
  _createBuffers$5: function(gl, indices, vertCoord, textCoord, normCoord) {
    var t1;
    $.interceptedTypeCheck(indices, "$isList");
    $.interceptedTypeCheck(vertCoord, "$isList");
    $.interceptedTypeCheck(textCoord, "$isList");
    $.interceptedTypeCheck(normCoord, "$isList");
    this.textureCoordBuffer = gl.createBuffer();
    t1 = $.getInterceptor$x(gl);
    t1.bindBuffer$2(gl, 34962, this.textureCoordBuffer);
    t1.bufferDataTyped$3(gl, 34962, $.Float32List_Float32List$fromList(textCoord), 35044);
    $.Model.prototype._createBuffers$5.call(this, gl, indices, vertCoord, textCoord, normCoord);
  },
  loadObj$2: function(gl, obj) {
    var mtlURL = this.asset.get$mtl() + "/" + obj.mtllib;
    $.HttpRequest_getString(mtlURL, null, null).then$1(new $.TexModel_loadObj_onMtlLibLoaded(this, gl, obj, mtlURL)).catchError$1(new $.TexModel_loadObj_closure(mtlURL));
  },
  addPiece$2: function(offset, $length) {
    var pi = $.TexPiece$(offset, $length);
    $.JSArray_methods.add$1(this.pieceList, pi);
    return pi;
  },
  addTexture$3: function(indexOffset, indexLength, tex) {
    this.addPiece$2(indexOffset, indexLength).texInfo = tex;
  },
  drawInstances$3: function(gameLoop, program, cam) {
    var gl, t1;
    gl = program.gl;
    t1 = $.getInterceptor$x(gl);
    t1.bindBuffer$2(gl, 34962, this.vertexPositionBuffer);
    t1.vertexAttribPointer$6(gl, program.a_Position, this.vertexPositionBufferItemSize, 5126, false, 0, 0);
    t1.bindBuffer$2(gl, 34962, this.textureCoordBuffer);
    t1.vertexAttribPointer$6(gl, $.propertyTypeCast(program, "$isTexShaderProgram").a_TextureCoord, this.textureCoordBufferItemSize, 5126, false, 0, 0);
    t1.bindBuffer$2(gl, 34963, this.vertexIndexBuffer);
    $.JSArray_methods.forEach$1(this.instanceList, new $.TexModel_drawInstances_closure(gameLoop, program, cam));
  },
  $isTexModel: true
},

TexModel_initContext_closure: {"": "Closure;gl_0,textureTable_1",
  call$1: function(pi) {
    return $.propertyTypeCheck(pi, "$isTexPiece").texInfo.loadTexture$2(this.gl_0, this.textureTable_1);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__TexPiece", args: [$.TexPiece]}; }
},

TexModel_loadObj_onMtlLibLoaded: {"": "Closure;this_1,gl_2,obj_3,mtlURL_4",
  call$1: function(materialResponse) {
    var t1, t2, lib, t3, t4, t5;
    t1 = {};
    t2 = this.mtlURL_4;
    lib = $.interceptedTypeCheck($.mtllib_parse($.stringTypeCheck(materialResponse), t2), "$isMap");
    $.assertHelper(lib != null);
    t1.i_0 = 0;
    t3 = this.obj_3;
    t4 = t3.get$partList();
    t5 = this.this_1;
    t4.forEach$1(t4, new $.TexModel_loadObj_onMtlLibLoaded_closure(t1, t5, this.gl_2, t2, lib));
    t3 = t3.get$partList();
    $.print("loadObj: " + $.S(t3.get$length(t3)) + " parts fed into " + t5.get$pieceList().length + " pieces");
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__String", void: true, args: [$.JSString]}; }
},

TexModel_loadObj_onMtlLibLoaded_closure: {"": "Closure;box_0,this_5,gl_6,mtlURL_7,lib_8",
  call$1: function(pa) {
    var usemtl, t1, mtl, t2, t3, r, g, temporaryColor, texFile, textureURL, texInfo;
    $.propertyTypeCheck(pa, "$isPart");
    usemtl = pa.usemtl;
    t1 = this.lib_8;
    mtl = $.propertyTypeCheck(t1.$index(t1, usemtl), "$isMaterial");
    if (mtl == null) {
      $.print("loadObj " + this.box_0.i_0 + ": material usemtl=" + usemtl + " NOT FOUND on mtllib=" + this.mtlURL_7);
      return;
    }
    t1 = mtl.Kd;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (t3 == null)
      throw t3.$mul();
    r = $.JSDouble_methods.round$0(t3 * 255);
    if (1 >= t2)
      throw $.ioore(1);
    t3 = t1[1];
    if (t3 == null)
      throw t3.$mul();
    g = $.JSDouble_methods.round$0(t3 * 255);
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    if (t1 == null)
      throw t1.$mul();
    temporaryColor = $.interceptedTypeCheck([r, g, $.JSDouble_methods.round$0(t1 * 255), 255], "$isList");
    texFile = mtl.map_Kd;
    textureURL = texFile != null ? this.this_5.get$asset().get$texture() + "/" + texFile : null;
    t1 = this.this_5;
    texInfo = $.TextureInfo$(this.gl_6, t1.get$textureTable(), textureURL, temporaryColor);
    t1.addTexture$3(pa.indexFirst, pa.indexListSize, texInfo);
    t1 = this.box_0;
    t1.i_0 = t1.i_0 + 1;
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Part", args: [$.Part]}; }
},

TexModel_loadObj_closure: {"": "Closure;mtlURL_9",
  call$1: function(err) {
    $.print("loadObj: failure fetching mtllib: " + this.mtlURL_9 + ": " + $.S(err));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

TexModel_drawInstances_closure: {"": "Closure;gameLoop_0,program_1,cam_2",
  call$1: function(i) {
    return $.propertyTypeCheck(i, "$isInstance").draw$3(this.gameLoop_0, this.program_1, this.cam_2);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Instance", args: [$.Instance]}; }
},

TexInstance: {"": "Instance;model,center,scale,pickColor,MV",
  draw$3: function(gameLoop, prog, cam) {
    var t1, t2, gl;
    t1 = this.MV;
    $.setViewMatrix(t1, cam.eye, cam.center, cam.up);
    t2 = this.center;
    t1.translate$3(t1, t2.$index(t2, 0), t2.$index(t2, 1), t2.$index(t2, 2));
    t2 = this.scale;
    t1.scale$3(t1, t2, t2, t2);
    gl = prog.gl;
    $.uniformMatrix4fv$3$x(gl, prog.u_MV, false, t1.storage);
    $.JSArray_methods.forEach$1($.propertyTypeCast(this.model, "$isTexModel").pieceList, new $.TexInstance_draw_closure(this, prog, gl));
  },
  $isTexInstance: true
},

TexInstance_draw_closure: {"": "Closure;this_0,prog_1,gl_2",
  call$1: function(pi) {
    var ti, t1, t2;
    pi = $.propertyTypeCast($.propertyTypeCheck(pi, "$isPiece"), "$isTexPiece");
    ti = pi.texInfo;
    t1 = this.gl_2;
    t2 = $.getInterceptor$x(t1);
    t2.activeTexture$1(t1, 33985);
    t2.bindTexture$2(t1, 3553, ti.texture);
    t2.uniform1i$2(t1, $.propertyTypeCast(this.prog_1, "$isTexShaderProgram").u_Sampler, 1);
    t2.drawElements$4(t1, 4, pi.vertexIndexLength, 5123, pi.vertexIndexOffset * $.get$model$x(this.this_0).get$vertexIndexBufferItemSize());
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Piece", args: [$.Piece]}; }
},

Instance$: function(model, center, scale, pickColor) {
  return new $.Instance(model, center, scale, pickColor, $.Matrix4$identity());
},

Piece$: function(vertexIndexOffset, vertexIndexLength) {
  return new $.Piece(vertexIndexOffset, vertexIndexLength);
},

Model$fromJson: function(gl, URL) {
  var t1, t2;
  t1 = $.List_List(null, $.Piece);
  $.setRuntimeTypeInfo(t1, [$.Piece]);
  t2 = $.List_List(null, $.Instance);
  $.setRuntimeTypeInfo(t2, [$.Instance]);
  t2 = new $.Model(null, null, 3, 2, $.interceptedTypeCheck(t1, "$isList"), $.interceptedTypeCheck(t2, "$isList"));
  t2.Model$fromJson$2(gl, URL);
  return t2;
},

Model$fromOBJ: function(gl, URL) {
  var t1, t2;
  t1 = $.List_List(null, $.Piece);
  $.setRuntimeTypeInfo(t1, [$.Piece]);
  t2 = $.List_List(null, $.Instance);
  $.setRuntimeTypeInfo(t2, [$.Instance]);
  t2 = new $.Model(null, null, 3, 2, $.interceptedTypeCheck(t1, "$isList"), $.interceptedTypeCheck(t2, "$isList"));
  t2.Model$fromOBJ$2(gl, URL);
  return t2;
},

generatePickColor: function() {
  var i, t1, t2;
  for (i = 0; i < 3; ++i) {
    t1 = $.get$_currentPickColor();
    if (i >= t1.length)
      throw $.ioore(i);
    t2 = $.$add$ns(t1[i], 0.0625);
    if (i >= t1.length)
      throw $.ioore(i);
    t1[i] = t2;
    t1 = $.get$_currentPickColor();
    if (i >= t1.length)
      throw $.ioore(i);
    if ($.$le$n(t1[i], 1))
      break;
    t1 = $.get$_currentPickColor();
    if (i >= t1.length)
      throw $.ioore(i);
    t1[i] = 0;
  }
  if (i === 3)
    $.print("generatePickColor: overflow");
  return $.Float32List_Float32List$fromList($.get$_currentPickColor());
},

matchColor: function(i, f) {
  var t1, d0, d1, d2;
  if (0 >= f.length)
    throw $.ioore(0);
  t1 = f[0];
  if (0 >= i.length)
    throw $.ioore(0);
  d0 = $.doubleTypeCheck($.JSNumber_methods.abs$0(255 * t1 - $.JSInt_methods.toDouble$0(i[0])));
  if (1 >= f.length)
    throw $.ioore(1);
  t1 = f[1];
  if (1 >= i.length)
    throw $.ioore(1);
  d1 = $.doubleTypeCheck($.JSNumber_methods.abs$0(255 * t1 - $.JSInt_methods.toDouble$0(i[1])));
  if (2 >= f.length)
    throw $.ioore(2);
  t1 = f[2];
  if (2 >= i.length)
    throw $.ioore(2);
  d2 = $.doubleTypeCheck($.JSNumber_methods.abs$0(255 * t1 - $.JSInt_methods.toDouble$0(i[2])));
  if (d0 == null)
    throw d0.$lt();
  if (d0 < 1) {
    if (d1 == null)
      throw d1.$lt();
    if (d1 < 1) {
      if (d2 == null)
        throw d2.$lt();
      t1 = d2 < 1;
    } else
      t1 = false;
  } else
    t1 = false;
  return t1;
},

mouseClickHit: function(list, color) {
  var match, pi, exception;
  $.listSuperNativeTypeCheck(list, "$isIterable");
  match = new $.mouseClickHit_match(color);
  pi = null;
  try {
    pi = $.propertyTypeCheck($.firstWhere$1$ax(list, match), "$isInstance");
  } catch (exception) {
    $.unwrapException(exception);
    return;
  }

  return $.propertyTypeCast(pi, "$isPickerInstance");
},

PickerInstance$: function(i) {
  $.propertyTypeCheck(i, "$isInstance");
  return new $.PickerInstance(i.model, i.center, i.scale, i.pickColor, $.Matrix4$identity());
},

PickerShader$: function(gl, programList, width, height) {
  var t1, t2;
  $.interceptedTypeCheck(programList, "$isList");
  t1 = $.List_List(null, $.PickerInstance);
  $.setRuntimeTypeInfo(t1, [$.PickerInstance]);
  t2 = $.List_List(null, $.Model);
  $.setRuntimeTypeInfo(t2, [$.Model]);
  t2 = new $.PickerShader(null, $.interceptedTypeCheck(programList, "$isList"), $.interceptedTypeCheck(t1, "$isList"), null, null, null, gl, null, null, null, false, $.interceptedTypeCheck(t2, "$isList"));
  t2.PickerShader$4(gl, programList, width, height);
  return t2;
},

ShaderProgram$: function(gl) {
  var t1 = $.List_List(null, $.Model);
  $.setRuntimeTypeInfo(t1, [$.Model]);
  return new $.ShaderProgram(null, gl, null, null, null, false, $.interceptedTypeCheck(t1, "$isList"));
},

TexShaderProgram$: function(gl) {
  var t1 = $.List_List(null, $.Model);
  $.setRuntimeTypeInfo(t1, [$.Model]);
  return new $.TexShaderProgram(null, null, null, gl, null, null, null, false, $.interceptedTypeCheck(t1, "$isList"));
},

TexPiece$: function(indexOffset, indexLength) {
  return new $.TexPiece(null, indexOffset, indexLength);
},

TexModel$fromOBJ: function(gl, URL, textureTable, asset) {
  var t1, t2;
  $.interceptedTypeCheck(textureTable, "$isMap");
  t1 = $.List_List(null, $.Piece);
  $.setRuntimeTypeInfo(t1, [$.Piece]);
  t2 = $.List_List(null, $.Instance);
  $.setRuntimeTypeInfo(t2, [$.Instance]);
  t2 = new $.TexModel(null, 2, asset, $.interceptedTypeCheck(textureTable, "$isMap"), null, null, 3, 2, $.interceptedTypeCheck(t1, "$isList"), $.interceptedTypeCheck(t2, "$isList"));
  t2.Model$fromOBJ$2(gl, URL);
  return t2;
},

TexInstance$: function(model, center, scale, pick) {
  return new $.TexInstance(model, center, scale, pick, $.Matrix4$identity());
}}],
["skybox", "skybox.dart", , {
SkyboxProgram: {"": "ShaderProgram;u_Skybox,program,gl,a_Position,u_MV,u_P,shaderReady,modelList",
  getLocations$0: function() {
    $.ShaderProgram.prototype.getLocations$0.call(this);
    this.u_Skybox = $.getUniformLocation$2$x(this.gl, this.program, "u_Skybox");
  },
  fetch$3: function(shaderCache, vertexShaderURL, fragmentShaderURL) {
    $.ShaderProgram.prototype.fetch$3.call(this, $.interceptedTypeCheck(shaderCache, "$isMap"), vertexShaderURL, fragmentShaderURL);
  },
  drawModels$3: function(gameLoop, cam, pMatrix) {
    var t1, t2;
    if (!this.shaderReady)
      return;
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    t2.useProgram$1(t1, this.program);
    t2.enableVertexAttribArray$1(t1, this.a_Position);
    t2.activeTexture$1(t1, 33984);
    t2.uniform1i$2(t1, this.u_Skybox, 0);
    t2.uniformMatrix4fv$3(t1, this.u_P, false, pMatrix.storage);
    $.JSArray_methods.forEach$1(this.modelList, new $.SkyboxProgram_drawModels_closure(this, gameLoop, cam));
    t2.bindBuffer$2(t1, 34962, null);
    t2.bindBuffer$2(t1, 34963, null);
  },
  $isSkyboxProgram: true
},

SkyboxProgram_drawModels_closure: {"": "Closure;this_0,gameLoop_1,cam_2",
  call$1: function(m) {
    return $.propertyTypeCheck(m, "$isModel").drawInstances$3(this.gameLoop_1, this.this_0, this.cam_2);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Model", args: [$.Model]}; }
},

SkyboxModel: {"": "Model;cubemapTexture<,vertexPositionBuffer,vertexIndexBuffer,vertexPositionBufferItemSize,vertexIndexBufferItemSize,pieceList,instanceList",
  addCubemapFace$3: function(gl, face, URL) {
    var image, t1;
    image = $.ImageElement_ImageElement(null, null, null);
    t1 = $.getInterceptor$x(image);
    t1.get$onLoad(image).listen$1(new $.SkyboxModel_addCubemapFace_handleDone(this, gl, face, image));
    t1.get$onError(image).listen$1(new $.SkyboxModel_addCubemapFace_handleError(URL));
    image.src = URL;
  },
  drawInstances$3: function(gameLoop, program, cam) {
    var gl, t1;
    gl = program.gl;
    t1 = $.getInterceptor$x(gl);
    t1.bindTexture$2(gl, 34067, this.cubemapTexture);
    $.JSArray_methods.forEach$1(this.instanceList, new $.SkyboxModel_drawInstances_closure(gameLoop, program, cam));
    t1.bindTexture$2(gl, 34067, null);
  },
  SkyboxModel$fromJson$4: function(gl, URL, reverse, rescale) {
    this.cubemapTexture = gl.createTexture();
  },
  $isSkyboxModel: true
},

SkyboxModel_addCubemapFace_handleDone: {"": "Closure;this_0,gl_1,face_2,image_3",
  call$1: function(e) {
    var t1, t2;
    $.interceptedTypeCheck(e, "$isEvent");
    t1 = this.gl_1;
    t2 = $.getInterceptor$x(t1);
    t2.bindTexture$2(t1, 34067, this.this_0.get$cubemapTexture());
    t2.texParameteri$3(t1, 34067, 10240, 9728);
    t2.texParameteri$3(t1, 34067, 10241, 9728);
    t2.texImage2DImage$6(t1, this.face_2, 0, 6408, 6408, 5121, this.image_3);
    t2.texParameteri$3(t1, 34067, 10242, 33071);
    t2.texParameteri$3(t1, 34067, 10243, 33071);
    t2.bindTexture$2(t1, 34067, null);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
},

SkyboxModel_addCubemapFace_handleError: {"": "Closure;URL_4",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.print("addCubemapFace: handleError: failure loading image from URL: " + this.URL_4 + ": " + $.S(e));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
},

SkyboxModel_drawInstances_closure: {"": "Closure;gameLoop_0,program_1,cam_2",
  call$1: function(i) {
    return $.propertyTypeCheck(i, "$isInstance").draw$3(this.gameLoop_0, this.program_1, this.cam_2);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Instance", args: [$.Instance]}; }
},

SkyboxInstance: {"": "Instance;model,center,scale,pickColor,MV",
  draw$3: function(gameLoop, prog, cam) {
    var size, t1, t2, gl;
    size = $.doubleTypeCheck(15 * $.JSDouble_methods.abs$0($.sin($.doubleTypeCheck(cam.getRad$1(gameLoop.get$renderInterpolationFactor())))) + 1);
    t1 = this.MV;
    $.setViewMatrix(t1, cam.eye, cam.center, cam.up);
    t2 = this.center;
    t1.translate$3(t1, t2.$index(t2, 0), t2.$index(t2, 1), t2.$index(t2, 2));
    t2 = this.scale;
    if (t2 == null)
      throw t2.$mul();
    t2 = $.JSDouble_methods.$mul(t2, size);
    t1.scale$3(t1, t2, t2, t2);
    gl = prog.gl;
    t2 = $.getInterceptor$x(gl);
    t2.uniformMatrix4fv$3(gl, prog.u_MV, false, t1.storage);
    t1 = this.model;
    t2.bindBuffer$2(gl, 34962, t1.vertexPositionBuffer);
    t2.vertexAttribPointer$6(gl, prog.a_Position, t1.vertexPositionBufferItemSize, 5126, false, 0, 0);
    t2.bindBuffer$2(gl, 34963, t1.vertexIndexBuffer);
    $.JSArray_methods.forEach$1(t1.pieceList, new $.SkyboxInstance_draw_closure(this, gl));
  },
  $isSkyboxInstance: true
},

SkyboxInstance_draw_closure: {"": "Closure;this_0,gl_1",
  call$1: function(piece) {
    $.propertyTypeCheck(piece, "$isPiece");
    $.drawElements$4$x(this.gl_1, 4, piece.vertexIndexLength, 5123, piece.vertexIndexOffset * $.get$model$x(this.this_0).get$vertexIndexBufferItemSize());
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Piece", args: [$.Piece]}; }
},

SkyboxProgram$: function(gl) {
  var t1 = $.List_List(null, $.Model);
  $.setRuntimeTypeInfo(t1, [$.Model]);
  return new $.SkyboxProgram(null, null, gl, null, null, null, false, $.interceptedTypeCheck(t1, "$isList"));
},

SkyboxModel$fromJson: function(gl, URL, reverse, rescale) {
  var t1, t2;
  t1 = $.List_List(null, $.Piece);
  $.setRuntimeTypeInfo(t1, [$.Piece]);
  t2 = $.List_List(null, $.Instance);
  $.setRuntimeTypeInfo(t2, [$.Instance]);
  t2 = new $.SkyboxModel(null, null, null, 3, 2, $.interceptedTypeCheck(t1, "$isList"), $.interceptedTypeCheck(t2, "$isList"));
  t2.Model$fromJson$2(gl, URL);
  t2.SkyboxModel$fromJson$4(gl, URL, reverse, rescale);
  return t2;
},

SkyboxInstance$: function(model, center, scale) {
  return new $.SkyboxInstance(model, center, scale, null, $.Matrix4$identity());
}}],
["texture", "texture.dart", , {
TextureInfo: {"": "Object;textureName<,texture<,temporaryColor",
  loadSolidColor$1: function(gl) {
    var t1 = $.getInterceptor$x(gl);
    t1.bindTexture$2(gl, 3553, this.texture);
    t1.texImage2DTyped$9(gl, 3553, 0, 6408, 1, 1, 0, 6408, 5121, $.Uint8List_Uint8List$fromList(this.temporaryColor));
    t1.texParameteri$3(gl, 3553, 10240, 9728);
    t1.texParameteri$3(gl, 3553, 10241, 9728);
    t1.texParameteri$3(gl, 3553, 10242, 33071);
    t1.texParameteri$3(gl, 3553, 10243, 33071);
    t1.bindTexture$2(gl, 3553, null);
  },
  _loadTexture2D$2: function(gl, textureTable) {
    var image, t1, t2;
    $.interceptedTypeCheck(textureTable, "$isMap");
    $.assertHelper(this.texture != null);
    image = $.ImageElement_ImageElement(null, null, null);
    t1 = this.textureName;
    if (t1 != null)
      $.$indexSet$ax(textureTable, t1, this.texture);
    this.loadSolidColor$1(gl);
    t2 = $.getInterceptor$x(image);
    t2.get$onLoad(image).listen$1(new $.TextureInfo__loadTexture2D_onDone(this, gl, image));
    t2.get$onError(image).listen$1(new $.TextureInfo__loadTexture2D_onError(this));
    image.src = t1;
  },
  createTexture$2: function(_, gl, textureTable) {
    $.interceptedTypeCheck(textureTable, "$isMap");
    this.texture = gl.createTexture();
    if (this.texture == null) {
      $.print("TextureInfo: " + ("could not create texture for: " + this.textureName));
      return;
    }
    if (this.textureName == null) {
      this.loadSolidColor$1(gl);
      return;
    }
    this._loadTexture2D$2(gl, textureTable);
  },
  loadTexture$2: function(gl, textureTable) {
    var t1;
    $.interceptedTypeCheck(textureTable, "$isMap");
    t1 = this.textureName;
    if (t1 != null) {
      this.texture = $.interceptedTypeCheck($.$index$asx(textureTable, t1), "$isTexture");
      if (this.texture != null)
        return;
    }
    this.createTexture$2(this, gl, textureTable);
  },
  TextureInfo$4: function(gl, textureTable, textureName, temporaryColor) {
    $.interceptedTypeCheck(textureTable, "$isMap");
    $.interceptedTypeCheck(temporaryColor, "$isList");
    this.loadTexture$2(gl, textureTable);
  },
  $isTextureInfo: true
},

TextureInfo__loadTexture2D_onDone: {"": "Closure;this_0,gl_1,image_2",
  call$1: function(e) {
    var t1, t2;
    $.interceptedTypeCheck(e, "$isEvent");
    t1 = this.gl_1;
    t2 = $.getInterceptor$x(t1);
    t2.bindTexture$2(t1, 3553, this.this_0.get$texture());
    t2.pixelStorei$2(t1, 37440, 1);
    t2.texImage2DImage$6(t1, 3553, 0, 6408, 6408, 5121, this.image_2);
    t2.texParameteri$3(t1, 3553, 10240, 9728);
    t2.texParameteri$3(t1, 3553, 10241, 9728);
    t2.texParameteri$3(t1, 3553, 10242, 33071);
    t2.texParameteri$3(t1, 3553, 10243, 33071);
    t2.bindTexture$2(t1, 3553, null);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
},

TextureInfo__loadTexture2D_onError: {"": "Closure;this_3",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.print("TextureInfo: handleError: failure loading image from URL: " + this.this_3.get$textureName() + ": " + $.S(e));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
},

TextureInfo_createTexture_handleDone: {"": "Closure;this_0",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.print("TextureInfo: handleDone: loaded image from URL: " + this.this_0.get$textureName());
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
},

TextureInfo_createTexture_handleError: {"": "Closure;this_1",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.print("TextureInfo: handleError: failure loading image from URL: " + this.this_1.get$textureName() + ": " + $.S(e));
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "void__Event", void: true, args: [$.Event]}; }
},

TextureInfo$: function(gl, textureTable, textureName, temporaryColor) {
  var t1;
  $.interceptedTypeCheck(textureTable, "$isMap");
  $.interceptedTypeCheck(temporaryColor, "$isList");
  t1 = new $.TextureInfo(textureName, null, $.interceptedTypeCheck(temporaryColor, "$isList"));
  t1.TextureInfo$4(gl, textureTable, textureName, temporaryColor);
  return t1;
}}],
["vector_math", "package:vector_math/vector_math.dart", , {
Matrix4: {"": "Object;storage",
  index$2: function(_, row, col) {
    if (col == null)
      throw col.$mul();
    return $.JSInt_methods.$add(col * 4, row);
  },
  setEntry$3: function(row, col, v) {
    var t1, t2;
    $.doubleTypeCheck(v);
    t1 = this.storage;
    t2 = this.index$2(this, row, col);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = v;
  },
  toString$0: function(_) {
    return "[0] " + $.S(this.getRow$1(0)) + "\n[1] " + $.S(this.getRow$1(1)) + "\n[2] " + $.S(this.getRow$1(2)) + "\n[3] " + $.S(this.getRow$1(3)) + "\n";
  },
  $index: function(_, i) {
    return $.doubleTypeCheck($.Float32List_methods.$index(this.storage, $.intTypeCheck(i)));
  },
  $indexSet: function(_, i, v) {
    var t1;
    $.doubleTypeCheck(v);
    t1 = this.storage;
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var r, t1, t2, t3, t4, t5;
    r = $.Vector4$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = this.index$2(this, row, 0);
    t4 = t2.length;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3;
    t3 = this.index$2(this, row, 1);
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t3;
    t3 = this.index$2(this, row, 2);
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (2 >= t5)
      throw $.ioore(2);
    t1[2] = t3;
    t3 = this.index$2(this, row, 3);
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (3 >= t5)
      throw $.ioore(3);
    t1[3] = t3;
    return r;
  },
  _mul_scale$1: function(arg) {
    var r, t1, t2, t3;
    r = $.Matrix4$zero();
    t1 = r.storage;
    t2 = this.storage;
    if (15 >= t2.length)
      throw $.ioore(15);
    t3 = t2[15];
    if (15 >= t1.length)
      throw $.ioore(15);
    t1[15] = t3 * arg;
    t1[14] = t2[14] * arg;
    t1[13] = t2[13] * arg;
    t1[12] = t2[12] * arg;
    t1[11] = t2[11] * arg;
    t1[10] = t2[10] * arg;
    t1[9] = t2[9] * arg;
    t1[8] = t2[8] * arg;
    t1[7] = t2[7] * arg;
    t1[6] = t2[6] * arg;
    t1[5] = t2[5] * arg;
    t1[4] = t2[4] * arg;
    t1[3] = t2[3] * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  _mul_vector3$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
    r = $.Vector3$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (4 >= t3)
      throw $.ioore(4);
    t8 = t2[4];
    if (1 >= t6)
      throw $.ioore(1);
    t9 = t5[1];
    if (8 >= t3)
      throw $.ioore(8);
    t10 = t2[8];
    if (2 >= t6)
      throw $.ioore(2);
    t6 = t5[2];
    if (12 >= t3)
      throw $.ioore(12);
    t11 = t2[12];
    t12 = t1.length;
    if (0 >= t12)
      throw $.ioore(0);
    t1[0] = t4 * t7 + t8 * t9 + t10 * t6 + t11;
    t11 = t2[1];
    t6 = t5[0];
    t10 = t2[5];
    t9 = t5[1];
    t8 = t2[9];
    t7 = t5[2];
    if (13 >= t3)
      throw $.ioore(13);
    t4 = t2[13];
    if (1 >= t12)
      throw $.ioore(1);
    t1[1] = t11 * t6 + t10 * t9 + t8 * t7 + t4;
    t4 = t2[2];
    t7 = t5[0];
    t8 = t2[6];
    t9 = t5[1];
    t10 = t2[10];
    t5 = t5[2];
    if (14 >= t3)
      throw $.ioore(14);
    t2 = t2[14];
    if (2 >= t12)
      throw $.ioore(2);
    t1[2] = t4 * t7 + t8 * t9 + t10 * t5 + t2;
    return r;
  },
  $mul: function(_, arg) {
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    if (typeof arg === "object" && arg !== null && !!$.getInterceptor(arg).$isVector3)
      return this._mul_vector3$1(arg);
    arg.get$dimension();
    throw $.wrapException($.ArgumentError$(arg));
  },
  $add: function(_, arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8;
    $.propertyTypeCheck(arg, "$isMatrix4");
    r = $.Matrix4$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    t8 = t1.length;
    if (0 >= t8)
      throw $.ioore(0);
    t1[0] = t4 + t7;
    if (1 >= t3)
      throw $.ioore(1);
    t7 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t4 = t5[1];
    if (1 >= t8)
      throw $.ioore(1);
    t1[1] = t7 + t4;
    if (2 >= t3)
      throw $.ioore(2);
    t4 = t2[2];
    if (2 >= t6)
      throw $.ioore(2);
    t7 = t5[2];
    if (2 >= t8)
      throw $.ioore(2);
    t1[2] = t4 + t7;
    if (3 >= t3)
      throw $.ioore(3);
    t7 = t2[3];
    if (3 >= t6)
      throw $.ioore(3);
    t4 = t5[3];
    if (3 >= t8)
      throw $.ioore(3);
    t1[3] = t7 + t4;
    if (4 >= t3)
      throw $.ioore(4);
    t4 = t2[4];
    if (4 >= t6)
      throw $.ioore(4);
    t7 = t5[4];
    if (4 >= t8)
      throw $.ioore(4);
    t1[4] = t4 + t7;
    if (5 >= t3)
      throw $.ioore(5);
    t7 = t2[5];
    if (5 >= t6)
      throw $.ioore(5);
    t4 = t5[5];
    if (5 >= t8)
      throw $.ioore(5);
    t1[5] = t7 + t4;
    if (6 >= t3)
      throw $.ioore(6);
    t4 = t2[6];
    if (6 >= t6)
      throw $.ioore(6);
    t7 = t5[6];
    if (6 >= t8)
      throw $.ioore(6);
    t1[6] = t4 + t7;
    if (7 >= t3)
      throw $.ioore(7);
    t7 = t2[7];
    if (7 >= t6)
      throw $.ioore(7);
    t4 = t5[7];
    if (7 >= t8)
      throw $.ioore(7);
    t1[7] = t7 + t4;
    if (8 >= t3)
      throw $.ioore(8);
    t4 = t2[8];
    if (8 >= t6)
      throw $.ioore(8);
    t7 = t5[8];
    if (8 >= t8)
      throw $.ioore(8);
    t1[8] = t4 + t7;
    if (9 >= t3)
      throw $.ioore(9);
    t7 = t2[9];
    if (9 >= t6)
      throw $.ioore(9);
    t4 = t5[9];
    if (9 >= t8)
      throw $.ioore(9);
    t1[9] = t7 + t4;
    if (10 >= t3)
      throw $.ioore(10);
    t4 = t2[10];
    if (10 >= t6)
      throw $.ioore(10);
    t7 = t5[10];
    if (10 >= t8)
      throw $.ioore(10);
    t1[10] = t4 + t7;
    if (11 >= t3)
      throw $.ioore(11);
    t7 = t2[11];
    if (11 >= t6)
      throw $.ioore(11);
    t4 = t5[11];
    if (11 >= t8)
      throw $.ioore(11);
    t1[11] = t7 + t4;
    if (12 >= t3)
      throw $.ioore(12);
    t4 = t2[12];
    if (12 >= t6)
      throw $.ioore(12);
    t7 = t5[12];
    if (12 >= t8)
      throw $.ioore(12);
    t1[12] = t4 + t7;
    if (13 >= t3)
      throw $.ioore(13);
    t7 = t2[13];
    if (13 >= t6)
      throw $.ioore(13);
    t4 = t5[13];
    if (13 >= t8)
      throw $.ioore(13);
    t1[13] = t7 + t4;
    if (14 >= t3)
      throw $.ioore(14);
    t4 = t2[14];
    if (14 >= t6)
      throw $.ioore(14);
    t7 = t5[14];
    if (14 >= t8)
      throw $.ioore(14);
    t1[14] = t4 + t7;
    if (15 >= t3)
      throw $.ioore(15);
    t2 = t2[15];
    if (15 >= t6)
      throw $.ioore(15);
    t5 = t5[15];
    if (15 >= t8)
      throw $.ioore(15);
    t1[15] = t2 + t5;
    return r;
  },
  translate$3: function(_, x, y, z) {
    var t1, tw, tx, ty, tz, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
    $.doubleTypeCheck(y);
    $.doubleTypeCheck(z);
    t1 = typeof x === "object" && x !== null && !!$.getInterceptor(x).$isVector4;
    tw = $.doubleTypeCheck(t1 ? x.get$w() : 1);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isVector3 || t1) {
      tx = $.JSNumber_methods.get$x(x);
      ty = $.JSNumber_methods.get$y(x);
      tz = $.JSNumber_methods.get$z(x);
    } else {
      $.doubleTypeCheck(x);
      tz = z;
      ty = y;
      tx = x;
    }
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = $.JSNumber_methods.$mul(t1[0], tx);
    if (4 >= t1.length)
      throw $.ioore(4);
    t3 = $.JSNumber_methods.$mul(t1[4], ty);
    if (8 >= t1.length)
      throw $.ioore(8);
    t4 = $.JSNumber_methods.$mul(t1[8], tz);
    if (12 >= t1.length)
      throw $.ioore(12);
    t5 = $.JSNumber_methods.$mul(t1[12], tw);
    if (1 >= t1.length)
      throw $.ioore(1);
    t6 = $.JSNumber_methods.$mul(t1[1], tx);
    if (5 >= t1.length)
      throw $.ioore(5);
    t7 = $.JSNumber_methods.$mul(t1[5], ty);
    if (9 >= t1.length)
      throw $.ioore(9);
    t8 = $.JSNumber_methods.$mul(t1[9], tz);
    if (13 >= t1.length)
      throw $.ioore(13);
    t9 = $.JSNumber_methods.$mul(t1[13], tw);
    if (2 >= t1.length)
      throw $.ioore(2);
    t10 = $.JSNumber_methods.$mul(t1[2], tx);
    if (6 >= t1.length)
      throw $.ioore(6);
    t11 = $.JSNumber_methods.$mul(t1[6], ty);
    if (10 >= t1.length)
      throw $.ioore(10);
    t12 = $.JSNumber_methods.$mul(t1[10], tz);
    if (14 >= t1.length)
      throw $.ioore(14);
    t13 = $.JSNumber_methods.$mul(t1[14], tw);
    if (3 >= t1.length)
      throw $.ioore(3);
    t14 = $.JSNumber_methods.$mul(t1[3], tx);
    if (7 >= t1.length)
      throw $.ioore(7);
    t15 = $.JSNumber_methods.$mul(t1[7], ty);
    if (11 >= t1.length)
      throw $.ioore(11);
    t16 = $.JSNumber_methods.$mul(t1[11], tz);
    if (15 >= t1.length)
      throw $.ioore(15);
    t17 = $.JSNumber_methods.$mul(t1[15], tw);
    t18 = t1.length;
    if (12 >= t18)
      throw $.ioore(12);
    t1[12] = t2 + t3 + t4 + t5;
    if (13 >= t18)
      throw $.ioore(13);
    t1[13] = t6 + t7 + t8 + t9;
    if (14 >= t18)
      throw $.ioore(14);
    t1[14] = t10 + t11 + t12 + t13;
    if (15 >= t18)
      throw $.ioore(15);
    t1[15] = t14 + t15 + t16 + t17;
    return this;
  },
  scale$3: function(_, x, y, z) {
    var sw, t1, sx, sy, sz, t2, t3;
    sw = $.doubleTypeCheck(1);
    if (false) {
      t1 = $.getInterceptor$x(x);
      sx = t1.get$x(x);
      sy = t1.get$y(x);
      sz = t1.get$z(x);
    } else {
      sy = $.doubleTypeCheck(y == null ? x : $.toDouble$0$n(y));
      sz = $.doubleTypeCheck(z == null ? x : $.toDouble$0$n(z));
      sx = x;
    }
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = $.JSNumber_methods.$mul(t1[0], sx);
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t2;
    if (1 >= t3)
      throw $.ioore(1);
    t3 = $.JSNumber_methods.$mul(t1[1], sx);
    t2 = t1.length;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t3;
    if (2 >= t2)
      throw $.ioore(2);
    t2 = $.JSNumber_methods.$mul(t1[2], sx);
    t3 = t1.length;
    if (2 >= t3)
      throw $.ioore(2);
    t1[2] = t2;
    if (3 >= t3)
      throw $.ioore(3);
    t3 = $.JSNumber_methods.$mul(t1[3], sx);
    t2 = t1.length;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = t3;
    if (4 >= t2)
      throw $.ioore(4);
    t2 = $.JSNumber_methods.$mul(t1[4], sy);
    t3 = t1.length;
    if (4 >= t3)
      throw $.ioore(4);
    t1[4] = t2;
    if (5 >= t3)
      throw $.ioore(5);
    t3 = $.JSNumber_methods.$mul(t1[5], sy);
    t2 = t1.length;
    if (5 >= t2)
      throw $.ioore(5);
    t1[5] = t3;
    if (6 >= t2)
      throw $.ioore(6);
    t2 = $.JSNumber_methods.$mul(t1[6], sy);
    t3 = t1.length;
    if (6 >= t3)
      throw $.ioore(6);
    t1[6] = t2;
    if (7 >= t3)
      throw $.ioore(7);
    t3 = $.JSNumber_methods.$mul(t1[7], sy);
    t2 = t1.length;
    if (7 >= t2)
      throw $.ioore(7);
    t1[7] = t3;
    if (8 >= t2)
      throw $.ioore(8);
    t2 = $.JSNumber_methods.$mul(t1[8], sz);
    t3 = t1.length;
    if (8 >= t3)
      throw $.ioore(8);
    t1[8] = t2;
    if (9 >= t3)
      throw $.ioore(9);
    t3 = $.JSNumber_methods.$mul(t1[9], sz);
    t2 = t1.length;
    if (9 >= t2)
      throw $.ioore(9);
    t1[9] = t3;
    if (10 >= t2)
      throw $.ioore(10);
    t2 = $.JSNumber_methods.$mul(t1[10], sz);
    t3 = t1.length;
    if (10 >= t3)
      throw $.ioore(10);
    t1[10] = t2;
    if (11 >= t3)
      throw $.ioore(11);
    t3 = $.JSNumber_methods.$mul(t1[11], sz);
    t2 = t1.length;
    if (11 >= t2)
      throw $.ioore(11);
    t1[11] = t3;
    if (12 >= t2)
      throw $.ioore(12);
    t2 = $.JSNumber_methods.$mul(t1[12], sw);
    t3 = t1.length;
    if (12 >= t3)
      throw $.ioore(12);
    t1[12] = t2;
    if (13 >= t3)
      throw $.ioore(13);
    t3 = $.JSNumber_methods.$mul(t1[13], sw);
    t2 = t1.length;
    if (13 >= t2)
      throw $.ioore(13);
    t1[13] = t3;
    if (14 >= t2)
      throw $.ioore(14);
    t2 = $.JSNumber_methods.$mul(t1[14], sw);
    t3 = t1.length;
    if (14 >= t3)
      throw $.ioore(14);
    t1[14] = t2;
    if (15 >= t3)
      throw $.ioore(15);
    t3 = $.JSNumber_methods.$mul(t1[15], sw);
    if (15 >= t1.length)
      throw $.ioore(15);
    t1[15] = t3;
    return this;
  },
  setZero$0: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = 0;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = 0;
    if (4 >= t2)
      throw $.ioore(4);
    t1[4] = 0;
    if (5 >= t2)
      throw $.ioore(5);
    t1[5] = 0;
    if (6 >= t2)
      throw $.ioore(6);
    t1[6] = 0;
    if (7 >= t2)
      throw $.ioore(7);
    t1[7] = 0;
    if (8 >= t2)
      throw $.ioore(8);
    t1[8] = 0;
    if (9 >= t2)
      throw $.ioore(9);
    t1[9] = 0;
    if (10 >= t2)
      throw $.ioore(10);
    t1[10] = 0;
    if (11 >= t2)
      throw $.ioore(11);
    t1[11] = 0;
    if (12 >= t2)
      throw $.ioore(12);
    t1[12] = 0;
    if (13 >= t2)
      throw $.ioore(13);
    t1[13] = 0;
    if (14 >= t2)
      throw $.ioore(14);
    t1[14] = 0;
    if (15 >= t2)
      throw $.ioore(15);
    t1[15] = 0;
    return this;
  },
  setIdentity$0: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 1;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = 0;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = 0;
    if (4 >= t2)
      throw $.ioore(4);
    t1[4] = 0;
    if (5 >= t2)
      throw $.ioore(5);
    t1[5] = 1;
    if (6 >= t2)
      throw $.ioore(6);
    t1[6] = 0;
    if (7 >= t2)
      throw $.ioore(7);
    t1[7] = 0;
    if (8 >= t2)
      throw $.ioore(8);
    t1[8] = 0;
    if (9 >= t2)
      throw $.ioore(9);
    t1[9] = 0;
    if (10 >= t2)
      throw $.ioore(10);
    t1[10] = 1;
    if (11 >= t2)
      throw $.ioore(11);
    t1[11] = 0;
    if (12 >= t2)
      throw $.ioore(12);
    t1[12] = 0;
    if (13 >= t2)
      throw $.ioore(13);
    t1[13] = 0;
    if (14 >= t2)
      throw $.ioore(14);
    t1[14] = 0;
    if (15 >= t2)
      throw $.ioore(15);
    t1[15] = 1;
    return this;
  },
  transpose$0: function() {
    var t1, t2, temp;
    t1 = this.storage;
    t2 = t1.length;
    if (4 >= t2)
      throw $.ioore(4);
    temp = $.doubleTypeCheck(t1[4]);
    t1[4] = t1[1];
    t1[1] = temp;
    if (8 >= t2)
      throw $.ioore(8);
    temp = $.doubleTypeCheck(t1[8]);
    t1[8] = t1[2];
    t1[2] = temp;
    if (12 >= t2)
      throw $.ioore(12);
    temp = $.doubleTypeCheck(t1[12]);
    t1[12] = t1[3];
    t1[3] = temp;
    temp = $.doubleTypeCheck(t1[9]);
    t1[9] = t1[6];
    t1[6] = temp;
    if (13 >= t2)
      throw $.ioore(13);
    temp = $.doubleTypeCheck(t1[13]);
    t1[13] = t1[7];
    t1[7] = temp;
    if (14 >= t2)
      throw $.ioore(14);
    temp = $.doubleTypeCheck(t1[14]);
    t1[14] = t1[11];
    t1[11] = temp;
    return this;
  },
  Matrix4$identity$0: function() {
    this.setIdentity$0();
  },
  $isMatrix4: true
},

Vector3: {"": "Object;storage",
  setValues$3: function(x_, y_, z_) {
    var t1, t2;
    $.doubleTypeCheck(x_);
    $.doubleTypeCheck(y_);
    $.doubleTypeCheck(z_);
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = x_;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = y_;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = z_;
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = "[" + $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t2 + $.S(t1[1]) + ",";
    if (2 >= t1.length)
      throw $.ioore(2);
    return t2 + $.S(t1[2]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    return $.Vector3$(-t3, -t4, -t1[2]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    $.propertyTypeCheck(other, "$isVector3");
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    return $.Vector3$(t3 - t6, t7 - t8, t1 - t4[2]);
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    $.propertyTypeCheck(other, "$isVector3");
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    return $.Vector3$(t3 + t6, t7 + t8, t1 + t4[2]);
  },
  $index: function(_, i) {
    return $.doubleTypeCheck($.Float32List_methods.$index(this.storage, $.intTypeCheck(i)));
  },
  $indexSet: function(_, i, v) {
    var t1;
    $.doubleTypeCheck(v);
    t1 = this.storage;
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, sum;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    sum = $.doubleTypeCheck(t3 * t3);
    if (1 >= t2)
      throw $.ioore(1);
    t3 = t1[1];
    if (sum == null)
      throw sum.$add();
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    return $.sqrt(sum + t3 * t3 + t1 * t1);
  },
  normalize$0: function(_) {
    var l, t1, t2;
    l = this.get$length(this);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = t1[0] * l;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t1[1] * l;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = t1[2] * l;
    return this;
  },
  cross$1: function(other) {
    var t1, t2, _x, _y, _z, ox, oy, oz, t3, t4, t5;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    _x = $.doubleTypeCheck(t1[0]);
    if (1 >= t2)
      throw $.ioore(1);
    _y = $.doubleTypeCheck(t1[1]);
    if (2 >= t2)
      throw $.ioore(2);
    _z = $.doubleTypeCheck(t1[2]);
    t1 = other.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    ox = $.doubleTypeCheck(t1[0]);
    if (1 >= t2)
      throw $.ioore(1);
    oy = $.doubleTypeCheck(t1[1]);
    if (2 >= t2)
      throw $.ioore(2);
    oz = $.doubleTypeCheck(t1[2]);
    t1 = $.getInterceptor$n(_y);
    if (_y == null)
      throw _y.$mul();
    t2 = t1.$mul(_y, oz);
    t3 = $.getInterceptor$n(_z);
    if (_z == null)
      throw _z.$mul();
    t4 = t3.$mul(_z, oy);
    t3 = t3.$mul(_z, ox);
    t5 = $.getInterceptor$n(_x);
    if (_x == null)
      throw _x.$mul();
    return $.Vector3$(t2 - t4, t3 - t5.$mul(_x, oz), t5.$mul(_x, oy) - t1.$mul(_y, ox));
  },
  get$x: function(_) {
    var t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    return $.doubleTypeCheck(t1[0]);
  },
  get$y: function(_) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    return $.doubleTypeCheck(t1[1]);
  },
  get$z: function(_) {
    var t1 = this.storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    return $.doubleTypeCheck(t1[2]);
  },
  Vector3$3: function(x_, y_, z_) {
    this.setValues$3($.doubleTypeCheck(x_), $.doubleTypeCheck(y_), $.doubleTypeCheck(z_));
  },
  $isVector3: true
},

Vector4: {"": "Object;storage",
  setValues$4: function(x_, y_, z_, w_) {
    var t1;
    $.doubleTypeCheck(x_);
    $.doubleTypeCheck(y_);
    $.doubleTypeCheck(z_);
    $.doubleTypeCheck(w_);
    t1 = this.storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = w_;
    t1[2] = z_;
    t1[1] = y_;
    t1[0] = x_;
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t2 + $.S(t1[1]) + ",";
    if (2 >= t1.length)
      throw $.ioore(2);
    t2 = t2 + $.S(t1[2]) + ",";
    if (3 >= t1.length)
      throw $.ioore(3);
    return t2 + $.S(t1[3]);
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    $.propertyTypeCheck(other, "$isVector4");
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t9 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t10 = t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    if (3 >= t5)
      throw $.ioore(3);
    return $.Vector4$(t3 + t6, t7 + t8, t9 + t10, t1 + t4[3]);
  },
  $index: function(_, i) {
    return $.doubleTypeCheck($.Float32List_methods.$index(this.storage, $.intTypeCheck(i)));
  },
  $indexSet: function(_, i, v) {
    var t1;
    $.doubleTypeCheck(v);
    t1 = this.storage;
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, sum, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    sum = $.doubleTypeCheck(t3 * t3);
    if (1 >= t2)
      throw $.ioore(1);
    t3 = t1[1];
    if (sum == null)
      throw sum.$add();
    if (2 >= t2)
      throw $.ioore(2);
    t4 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    return $.sqrt(sum + t3 * t3 + t4 * t4 + t1 * t1);
  },
  get$w: function() {
    var t1 = this.storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    return $.doubleTypeCheck(t1[3]);
  },
  Vector4$4: function(x_, y_, z_, w_) {
    this.setValues$4($.doubleTypeCheck(x_), $.doubleTypeCheck(y_), $.doubleTypeCheck(z_), $.doubleTypeCheck(w_));
  },
  $isVector4: true
},

Matrix4$zero: function() {
  return new $.Matrix4($.Float32List_Float32List(16));
},

Matrix4$identity: function() {
  var t1 = new $.Matrix4($.Float32List_Float32List(16));
  t1.Matrix4$identity$0();
  return t1;
},

setViewMatrix: function(viewMatrix, cameraPosition, cameraFocusPosition, upDirection) {
  var z, x, y, rotatedEye;
  z = cameraPosition.$sub(cameraPosition, cameraFocusPosition);
  z.normalize$0(z);
  x = upDirection.cross$1(z);
  x.normalize$0(x);
  y = z.cross$1(x);
  y.normalize$0(y);
  viewMatrix.setZero$0();
  viewMatrix.setEntry$3(3, 3, 1);
  viewMatrix.setEntry$3(0, 0, x.get$x(x));
  viewMatrix.setEntry$3(1, 0, x.get$y(x));
  viewMatrix.setEntry$3(2, 0, x.get$z(x));
  viewMatrix.setEntry$3(0, 1, y.get$x(y));
  viewMatrix.setEntry$3(1, 1, y.get$y(y));
  viewMatrix.setEntry$3(2, 1, y.get$z(y));
  viewMatrix.setEntry$3(0, 2, z.get$x(z));
  viewMatrix.setEntry$3(1, 2, z.get$y(z));
  viewMatrix.setEntry$3(2, 2, z.get$z(z));
  viewMatrix.transpose$0();
  rotatedEye = $.propertyTypeCheck(viewMatrix.$mul(viewMatrix, cameraPosition.$negate(cameraPosition)), "$isVector3");
  viewMatrix.setEntry$3(0, 3, rotatedEye.get$x(rotatedEye));
  viewMatrix.setEntry$3(1, 3, rotatedEye.get$y(rotatedEye));
  viewMatrix.setEntry$3(2, 3, rotatedEye.get$z(rotatedEye));
},

setPerspectiveMatrix: function(perspectiveMatrix, fovYRadians, aspectRatio, zNear, zFar) {
  var height, width;
  height = $.tan($.JSNumber_methods.toDouble$0(fovYRadians) * 0.5) * $.JSDouble_methods.toDouble$0(zNear);
  width = height * $.toDouble$0$n(aspectRatio);
  $.setFrustumMatrix(perspectiveMatrix, -width, width, -height, height, zNear, zFar);
},

setFrustumMatrix: function(perspectiveMatrix, left, right, bottom, $top, near, far) {
  var two_near, right_minus_left, top_minus_bottom, far_minus_near, view, t1;
  left = $.JSNumber_methods.toDouble$0(left);
  right = $.JSNumber_methods.toDouble$0(right);
  bottom = $.JSNumber_methods.toDouble$0(bottom);
  $top = $.JSNumber_methods.toDouble$0($top);
  near = $.JSDouble_methods.toDouble$0(near);
  far = $.JSDouble_methods.toDouble$0(far);
  two_near = $.doubleTypeCheck(2 * near);
  right_minus_left = $.doubleTypeCheck(right - left);
  top_minus_bottom = $.doubleTypeCheck($top - bottom);
  far_minus_near = $.doubleTypeCheck(far - near);
  view = perspectiveMatrix.setZero$0();
  t1 = $.getInterceptor$n(two_near);
  if (two_near == null)
    throw two_near.$div();
  view.setEntry$3(0, 0, t1.$div(two_near, right_minus_left));
  view.setEntry$3(1, 1, t1.$div(two_near, top_minus_bottom));
  view.setEntry$3(0, 2, $.JSNumber_methods.$div(right + left, right_minus_left));
  view.setEntry$3(1, 2, $.JSNumber_methods.$div($top + bottom, top_minus_bottom));
  view.setEntry$3(2, 2, $.JSNumber_methods.$div(-(far + near), far_minus_near));
  view.setEntry$3(3, 2, -1);
  view.setEntry$3(2, 3, $.JSDouble_methods.$div(-(two_near * far), far_minus_near));
},

Vector3$: function(x_, y_, z_) {
  var t1 = new $.Vector3($.Float32List_Float32List(3));
  t1.Vector3$3($.doubleTypeCheck(x_), $.doubleTypeCheck(y_), $.doubleTypeCheck(z_));
  return t1;
},

Vector3$zero: function() {
  return new $.Vector3($.Float32List_Float32List(3));
},

Vector4$: function(x_, y_, z_, w_) {
  var t1 = new $.Vector4($.Float32List_Float32List(4));
  t1.Vector4$4($.doubleTypeCheck(x_), $.doubleTypeCheck(y_), $.doubleTypeCheck(z_), $.doubleTypeCheck(w_));
  return t1;
},

Vector4$zero: function() {
  return new $.Vector4($.Float32List_Float32List(4));
}}],
["ws", "ws.dart", , {
initWebSocket_scheduleReconnect: {"": "Closure;box_0,wsUri_1,sid_2,status_3,dispatch_4",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.reconnectScheduled_5)
      return;
    $.print("websocket: retrying in " + t1.retrySeconds_0 + " seconds");
    $.Timer_Timer($.Duration$(0, 0, 0, 0, 0, t1.retrySeconds_0), new $.initWebSocket_scheduleReconnect_closure(t1, this.wsUri_1, this.sid_2, this.status_3, this.dispatch_4));
    t1.reconnectScheduled_5 = true;
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

initWebSocket_scheduleReconnect_closure: {"": "Closure;box_0,wsUri_5,sid_6,status_7,dispatch_8",
  call$0: function() {
    return $.initWebSocket(this.wsUri_5, this.sid_6, 2 * this.box_0.retrySeconds_0, this.status_7, this.dispatch_8);
  },
  $isFunction: true,
  $asObject: null,
  $is_void_: true,
  $is_dynamic_: true,
  $is_Object_: true
},

initWebSocket_closure: {"": "Closure;wsUri_9,sid_10,status_11,scheduleReconnect_12",
  call$1: function(e) {
    var jsonMsg, e0, t1, msg, exception;
    t1 = this.status_11;
    t1.textContent = "connected to " + this.wsUri_9;
    $.print("websocket: " + t1.textContent);
    msg = $.Map_Map(null, null);
    msg.$indexSet(msg, "Code", 2);
    msg.$indexSet(msg, "Data", this.sid_10);
    jsonMsg = $.stringify(msg);
    try {
      $._write(jsonMsg);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      $.print("websocket auth: send failure: " + $.S(e0));
      this.scheduleReconnect_12.call$0();
    }

  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__dynamic", args: [null]}; }
},

initWebSocket_closure0: {"": "Closure;wsUri_13,status_14,scheduleReconnect_15",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    this.status_14.textContent = "disconnected from " + this.wsUri_13;
    $.print("websocket: DISCONNECTED");
    this.scheduleReconnect_15.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Event", args: [$.Event]}; }
},

initWebSocket_closure1: {"": "Closure;scheduleReconnect_16",
  call$1: function(e) {
    $.print("websocket: error: [" + $.S($.interceptedTypeCheck(e, "$isEvent")) + "]");
    this.scheduleReconnect_16.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__Event", args: [$.Event]}; }
},

initWebSocket_closure2: {"": "Closure;box_0,status_17",
  call$1: function(e) {
    var msg, t1, code, data, m, t2;
    msg = $.interceptedTypeCheck($.parse($.get$data$x($.interceptedTypeCheck(e, "$isMessageEvent")), null), "$isMap");
    t1 = $.getInterceptor$asx(msg);
    code = $.intTypeCheck(t1.$index(msg, "Code"));
    data = $.stringTypeCheck(t1.$index(msg, "Data"));
    if (code === 4) {
      m = "server killed our session: " + data;
      $.print(m);
      this.status_17.textContent = m;
      t1 = this.box_0;
      t2 = t1.subOpen_1;
      t2.cancel$0(t2);
      t2 = t1.subClose_2;
      t2.cancel$0(t2);
      t2 = t1.subMessage_4;
      t2.cancel$0(t2);
      t1 = t1.subError_3;
      t1.cancel$0(t1);
      $._ws.close();
      $._ws = null;
      return;
    }
    $._dispatcher.call$2(code, data);
  },
  $isFunction: true,
  $asObject: null,
  $signature: function () { return {func: "dynamic__MessageEvent", args: [$.MessageEvent]}; }
},

requestZone: function() {
  var msg = $.Map_Map(null, null);
  msg.$indexSet(msg, "Code", 5);
  msg.$indexSet(msg, "Data", "");
  $.wsSend($.stringify(msg));
},

_write: function(msg) {
  $.stringTypeCheck(msg);
  $.send$1$x($._ws, msg);
},

wsSend: function(msg) {
  var t1 = $.get$_wsQueue();
  t1.add$1(t1, msg);
  $.wsFlush();
},

wsFlush: function() {
  var e, t1, t2, t3, $arguments, exception;
  while (true) {
    t1 = $._ws;
    if (t1 != null)
      if (t1.readyState === 1) {
        t1 = $.get$_wsQueue();
        t1 = t1._head !== t1._tail;
      } else
        t1 = false;
    else
      t1 = false;
    if (!t1)
      break;
    try {
      t1 = $.get$_wsQueue();
      t2 = t1._head;
      if (t2 === t1._tail)
        $.throwExpression(new $.StateError("No elements"));
      t3 = t1._table;
      if (t2 < 0 || t2 >= t3.length)
        throw $.ioore(t2);
      t2 = t3[t2];
      $arguments = $.substitute($.getField(t1, "$asListQueue"), $.getRuntimeTypeInfo(t1));
      t1 = $arguments == null;
      if (t1)
        t1 = null;
      else {
        $.assertHelper($.isJsArray($arguments));
        t1 = $arguments[0];
      }
      $.assertSubtypeOfRuntimeType(t2, t1);
      $.stringTypeCheck(t2);
      $.send$1$x($._ws, t2);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      $.Primitives_printString("websocket flush: send failure: " + $.S(e));
      return;
    }

    $.get$_wsQueue().removeFirst$0();
  }
},

initWebSocket: function(wsUri, sid, retrySeconds, $status, dispatch) {
  var t1, t2;
  t1 = {};
  t1.retrySeconds_0 = retrySeconds;
  $.intTypeCheck(retrySeconds);
  $.assertFunctionSubtype(dispatch, "void__int_String");
  $._dispatcher = dispatch;
  $status.textContent = "opening " + wsUri;
  t2 = t1.retrySeconds_0;
  if (t2 < 1)
    t1.retrySeconds_0 = 1;
  else if (t2 > 120)
    t1.retrySeconds_0 = 120;
  $.print("websocket: opening: " + wsUri + " (retry=" + t1.retrySeconds_0 + ")");
  $._ws = $.WebSocket_WebSocket(wsUri, null);
  t1.subOpen_1 = null;
  t1.subClose_2 = null;
  t1.subError_3 = null;
  t1.subMessage_4 = null;
  t1.reconnectScheduled_5 = false;
  t2 = new $.initWebSocket_scheduleReconnect(t1, wsUri, sid, $status, dispatch);
  t1.subOpen_1 = $.assertSubtype($.get$onOpen$x($._ws).listen$1(new $.initWebSocket_closure(wsUri, sid, $status, t2)), "$isStreamSubscription", [$.Event], "$asStreamSubscription");
  t1.subClose_2 = $.assertSubtype($.get$onClose$x($._ws).listen$1(new $.initWebSocket_closure0(wsUri, $status, t2)), "$isStreamSubscription", [$.Event], "$asStreamSubscription");
  t1.subError_3 = $.assertSubtype($.get$onError$x($._ws).listen$1(new $.initWebSocket_closure1(t2)), "$isStreamSubscription", [$.Event], "$asStreamSubscription");
  t1.subMessage_4 = $.assertSubtype($.get$onMessage$x($._ws).listen$1(new $.initWebSocket_closure2(t1, $status)), "$isStreamSubscription", [$.Event], "$asStreamSubscription");
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.Primitives__throwFormatException$closure = new $.Closure$_throwFormatException($.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.isAssignable$closure = new $.Closure$isAssignable($.isAssignable, "isAssignable$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$.Element__determineMouseWheelEventType$closure = new $.Closure$_determineMouseWheelEventType($.Element__determineMouseWheelEventType, "Element__determineMouseWheelEventType$closure");
$.decodeUtf8$closure = new $.Closure$decodeUtf8($.decodeUtf8, "decodeUtf8$closure");
$.initContext$closure = new $.Closure$initContext($.initContext, "initContext$closure");
$.main$closure = new $.Closure$main($.main, "main$closure");
$._EventSink.$is_EventSink = true;
$._EventSink.$isObject = true;
$.MessageEvent.$isMessageEvent = true;
$.MessageEvent.$isEvent = true;
$.MessageEvent.$isObject = true;
$.Matrix4.$isMatrix4 = true;
$.Matrix4.$isObject = true;
$.Vector3.$isVector3 = true;
$.Vector3.$isObject = true;
$.Vector4.$isVector4 = true;
$.Vector4.$isObject = true;
$.GameLoopHtml.$isGameLoopHtml = true;
$.GameLoopHtml.$isGameLoop = true;
$.GameLoopHtml.$isObject = true;
$.WheelEvent.$isMouseEvent = true;
$.WheelEvent.$isEvent = true;
$.WheelEvent.$isObject = true;
$.WheelEvent.$isWheelEvent = true;
$.MimeType.$isObject = true;
$._GameLoopTouchEvent.$is_GameLoopTouchEvent = true;
$._GameLoopTouchEvent.$isObject = true;
$.GameLoopTouchPosition.$isObject = true;
$.GameLoopTouchPosition.$isGameLoopTouchPosition = true;
$.GameLoopTouchPosition.$isObject = true;
$.MouseEvent.$isMouseEvent = true;
$.MouseEvent.$isEvent = true;
$.MouseEvent.$isObject = true;
$.GameLoopTouch.$isGameLoopTouch = true;
$.GameLoopTouch.$isObject = true;
$.GameLoop.$isGameLoop = true;
$.GameLoop.$isObject = true;
$.GameLoopTimer.$isGameLoopTimer = true;
$.GameLoopTimer.$isObject = true;
$.DigitalButton.$isDigitalButton = true;
$.DigitalButton.$isObject = true;
$._CSSValue.$isObject = true;
$.DigitalButtonEvent.$isDigitalButtonEvent = true;
$.DigitalButtonEvent.$isObject = true;
$.Node.$isEventTarget = true;
$.Node.$isObject = true;
$.Node.$isNode = true;
$.Duration.$isObject = true;
$.Duration.$isObject = true;
$.ShaderProgram.$isShaderProgram = true;
$.ShaderProgram.$isObject = true;
$.Element.$isEventTarget = true;
$.Element.$isObject = true;
$.Element.$isObject = true;
$.Element.$isElement = true;
$.Element.$isNode = true;
$.Transform.$isObject = true;
$.Model.$isModel = true;
$.Model.$isObject = true;
$.Instance.$isInstance = true;
$.Instance.$isObject = true;
$.Piece.$isPiece = true;
$.Piece.$isObject = true;
$.TexPiece.$isTexPiece = true;
$.TexPiece.$isPiece = true;
$.TexPiece.$isObject = true;
$.Entry.$isEntry = true;
$.Entry.$isObject = true;
$.PickerInstance.$isInstance = true;
$.PickerInstance.$isObject = true;
$.PickerInstance.$isPickerInstance = true;
$.TexModel.$isTexModel = true;
$.TexModel.$isModel = true;
$.TexModel.$isObject = true;
$._EntrySync.$isObject = true;
$.Event.$isEvent = true;
$.Event.$isObject = true;
$._IsolateContext.$is_IsolateContext = true;
$._IsolateContext.$isObject = true;
$._IsolateContext.$isObject = true;
$._IsolateEvent.$is_IsolateEvent = true;
$._IsolateEvent.$isObject = true;
$.File.$isFile = true;
$.File.$isObject = true;
$.EventTarget.$isObject = true;
$.EventTarget.$isEventTarget = true;
$.Material.$isMaterial = true;
$.Material.$isObject = true;
$.Part.$isPart = true;
$.Part.$isObject = true;
$.FileError.$isFileError = true;
$.FileError.$isObject = true;
$.Function.$isObject = true;
$.Function.$isFunction = true;
$.Plugin.$isObject = true;
$.Gamepad.$isObject = true;
$.ProgressEvent.$isProgressEvent = true;
$.ProgressEvent.$isEvent = true;
$.ProgressEvent.$isObject = true;
$.Map.$isObject = true;
$.Object.$isObject = true;
$.ElementInstance.$isElementInstance = true;
$.ElementInstance.$isEventTarget = true;
$.ElementInstance.$isObject = true;
$.SendPort.$isSendPort = true;
$.SendPort.$isObject = true;
$.ReceivePort.$isReceivePort = true;
$.ReceivePort.$isObject = true;
$.RtcStatsReport.$isObject = true;
$.RtcStatsReport.$isRtcStatsReport = true;
$.HttpRequest.$isHttpRequest = true;
$.HttpRequest.$isEventTarget = true;
$.HttpRequest.$isObject = true;
$.SourceBuffer.$isObject = true;
$.SpeechGrammar.$isObject = true;
$.Future.$isFuture = true;
$.Future.$isObject = true;
$.Rect.$isObject = true;
$.SpeechInputResult.$isSpeechInputResult = true;
$.SpeechInputResult.$isObject = true;
$.JSBool.$isbool = true;
$.JSBool.$isObject = true;
$.JSBool.$isObject = true;
$.SpeechRecognitionResult.$isSpeechRecognitionResult = true;
$.SpeechRecognitionResult.$isObject = true;
$.Length.$isObject = true;
$.JSArray.$isList = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.ContextEvent.$isObject = true;
$.ContextEvent.$isContextEvent = true;
$.ContextEvent.$isEvent = true;
$.CloseEvent.$isCloseEvent = true;
$.CloseEvent.$isEvent = true;
$.CloseEvent.$isObject = true;
$.JSNumber.$isnum = true;
$.JSNumber.$isObject = true;
$.JSNumber.$isObject = true;
$.JSNumber.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isint = true;
$.JSInt.$isnum = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSDouble.$isdouble = true;
$.JSDouble.$isnum = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSString.$isString = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.StyleSheet.$isStyleSheet = true;
$.StyleSheet.$isObject = true;
$.Number.$isObject = true;
$.Matrix.$isMatrix = true;
$.Matrix.$isObject = true;
$.PathSeg.$isObject = true;
$.KeyboardEvent.$isKeyboardEvent = true;
$.KeyboardEvent.$isEvent = true;
$.KeyboardEvent.$isObject = true;
$.RenderingContext.$isObject = true;
$.RenderingContext.$isRenderingContext = true;
$.CssMatrix.$isCssMatrix = true;
$.CssMatrix.$isObject = true;
$.TextTrack.$isEventTarget = true;
$.TextTrack.$isObject = true;
$.TextTrackCue.$isEventTarget = true;
$.TextTrackCue.$isObject = true;
$.Shader.$isObject = true;
$.Shader.$isShader = true;
$.CssRule.$isCssRule = true;
$.CssRule.$isObject = true;
$.Touch.$isTouch = true;
$.Touch.$isObject = true;
$.Texture.$isTexture = true;
$.Texture.$isObject = true;
$.TouchEvent.$isEvent = true;
$.TouchEvent.$isObject = true;
$.TouchEvent.$isTouchEvent = true;
$.$signature_void__String_String = {func: "void__String_String", void: true, args: [$.JSString, $.JSString]};
$.$signature_void__GameLoop = {func: "void__GameLoop", void: true, args: [$.GameLoop]};
$.$signature_void__FileError = {func: "void__FileError", void: true, args: [$.FileError]};
$.$signature_void__num = {func: "void__num", void: true, args: [$.JSNumber]};
$.$signature_dynamic__int_dynamic = {func: "dynamic__int_dynamic", args: [$.JSInt, null]};
$.$signature_void__dynamic_SendPort = {func: "void__dynamic_SendPort", void: true, args: [null, $.SendPort]};
$.$signature_int__dynamic = {func: "int__dynamic", ret: $.JSInt, args: [null]};
$.$signature_int__String = {func: "int__String", ret: $.JSInt, args: [$.JSString]};
$.$signature_dynamic__dynamic_dynamic = {func: "dynamic__dynamic_dynamic", args: [null, null]};
$.$signature_dynamic__dynamic = {func: "dynamic__dynamic", args: [null]};
$.$signature_void__dynamic = {func: "void__dynamic", void: true, args: [null]};
$.$signature_void__String = {func: "void__String", void: true, args: [$.JSString]};
$.$signature_void__Element = {func: "void__Element", void: true, args: [$.Element]};
$.$signature_double__String = {func: "double__String", ret: $.JSDouble, args: [$.JSString]};
$.$signature_void__RenderingContext_GameLoopHtml = {func: "void__RenderingContext_GameLoopHtml", void: true, args: [$.RenderingContext, $.GameLoopHtml]};
$.$signature_bool__dynamic = {func: "bool__dynamic", ret: $.JSBool, args: [null]};
$.$signature_dynamic__Event = {func: "dynamic__Event", args: [$.Event]};
$.$signature_dynamic__int = {func: "dynamic__int", args: [$.JSInt]};
$.$signature_void__int_String = {func: "void__int_String", void: true, args: [$.JSInt, $.JSString]};
$.$signature_void__ProgressEvent = {func: "void__ProgressEvent", void: true, args: [$.ProgressEvent]};
$.JSArray.$signature_void__E = function (E) { return {func: "void__E", void: true, args: [E]}; };
$.JSArray.$signature_bool__E0 = function (E) { return {func: "bool__E0", ret: $.JSBool, args: [E]}; };
$._SubscribeFuture.$signature_dynamic__S = function (S, T) { return {func: "dynamic__S", args: [S]}; };
$.Stream.$signature_bool__T = function (T) { return {func: "bool__T", ret: $.JSBool, args: [T]}; };
$.HashMap.$signature_void__K_V0 = function (K, V) { return {func: "void__K_V0", void: true, args: [K, V]}; };
$.ListMixin.$signature_void__E0 = function (E) { return {func: "void__E0", void: true, args: [E]}; };
$.ListMixin.$signature_bool__E = function (E) { return {func: "bool__E", ret: $.JSBool, args: [E]}; };
$.ListIterable.$signature_bool__E2 = function (E) { return {func: "bool__E2", ret: $.JSBool, args: [E]}; };
$.LinkedHashMap.$signature_void__K_V = function (K, V) { return {func: "void__K_V", void: true, args: [K, V]}; };
$._EventStream.$signature_void__T = function (T) { return {func: "void__T", void: true, args: [T]}; };
$.IterableBase.$signature_dynamic__E = function (E) { return {func: "dynamic__E", args: [E]}; };
$.IterableBase.$signature_void__E1 = function (E) { return {func: "void__E1", void: true, args: [E]}; };
$.IterableBase.$signature_bool__E1 = function (E) { return {func: "bool__E1", ret: $.JSBool, args: [E]}; };
$.HashMapKeyIterable.$signature_void__E2 = function (E) { return {func: "void__E2", void: true, args: [E]}; };
$._FutureImpl.$signature_dynamic__T = function (T) { return {func: "dynamic__T", args: [T]}; };
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof $.Object))
    return $.JSUnknown.prototype;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  return $.getNativeInterceptor(receiver);
};
$.Float32List_methods = $.Float32List.prototype;
$.EventStreamProvider_open = $.setRuntimeTypeInfo(new $.EventStreamProvider("open"), [$.Event]);
$._CustomEventStreamProvider__determineMouseWheelEventType = $.setRuntimeTypeInfo(new $._CustomEventStreamProvider($.Element__determineMouseWheelEventType$closure), [$.WheelEvent]);
$.Window_methods = $.Window.prototype;
$.HttpRequest_methods = $.HttpRequest.prototype;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.JSNull_methods = $.JSNull.prototype;
$.EventStreamProvider_message = $.setRuntimeTypeInfo(new $.EventStreamProvider("message"), [$.MessageEvent]);
$.JSInt_methods = $.JSInt.prototype;
$.EventStreamProvider_error0 = $.setRuntimeTypeInfo(new $.EventStreamProvider("error"), [$.ProgressEvent]);
$.EventStreamProvider_keydown = $.setRuntimeTypeInfo(new $.EventStreamProvider("keydown"), [$.KeyboardEvent]);
$.EventStreamProvider_error = $.setRuntimeTypeInfo(new $.EventStreamProvider("error"), [$.Event]);
$.EventStreamProvider_touchcancel = $.setRuntimeTypeInfo(new $.EventStreamProvider("touchcancel"), [$.TouchEvent]);
$.HtmlDocument_methods = $.HtmlDocument.prototype;
$.EventStreamProvider_mousedown = $.setRuntimeTypeInfo(new $.EventStreamProvider("mousedown"), [$.MouseEvent]);
$.EventStreamProvider_touchmove = $.setRuntimeTypeInfo(new $.EventStreamProvider("touchmove"), [$.TouchEvent]);
$.EventStreamProvider_touchend = $.setRuntimeTypeInfo(new $.EventStreamProvider("touchend"), [$.TouchEvent]);
$.Duration_0 = new $.Duration(0);
$.EventStreamProvider_keyup = $.setRuntimeTypeInfo(new $.EventStreamProvider("keyup"), [$.KeyboardEvent]);
$.NodeList_methods = $.NodeList.prototype;
$.EventStreamProvider_click = $.setRuntimeTypeInfo(new $.EventStreamProvider("click"), [$.MouseEvent]);
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.C_JSUnknown = new $.JSUnknown();
$.EventStreamProvider_webkitfullscreenchange = $.setRuntimeTypeInfo(new $.EventStreamProvider("webkitfullscreenchange"), [$.Event]);
$.EventStreamProvider_webkitfullscreenerror = $.setRuntimeTypeInfo(new $.EventStreamProvider("webkitfullscreenerror"), [$.Event]);
$.EventStreamProvider_load0 = $.setRuntimeTypeInfo(new $.EventStreamProvider("load"), [$.Event]);
$.EventStreamProvider_touchstart = $.setRuntimeTypeInfo(new $.EventStreamProvider("touchstart"), [$.TouchEvent]);
$.EventStreamProvider_webglcontextlost = $.setRuntimeTypeInfo(new $.EventStreamProvider("webglcontextlost"), [$.ContextEvent]);
$.EventStreamProvider_load = $.setRuntimeTypeInfo(new $.EventStreamProvider("load"), [$.ProgressEvent]);
$.EventStreamProvider_webkitpointerlockchange = $.setRuntimeTypeInfo(new $.EventStreamProvider("webkitpointerlockchange"), [$.Event]);
$.C_CloseToken = new $.CloseToken();
$.EventStreamProvider_close = $.setRuntimeTypeInfo(new $.EventStreamProvider("close"), [$.CloseEvent]);
$.EventStreamProvider_mouseup = $.setRuntimeTypeInfo(new $.EventStreamProvider("mouseup"), [$.MouseEvent]);
$.JSDouble_methods = $.JSDouble.prototype;
$.JSArray_methods = $.JSArray.prototype;
$.EventStreamProvider_mousemove = $.setRuntimeTypeInfo(new $.EventStreamProvider("mousemove"), [$.MouseEvent]);
$.EventStreamProvider_webglcontextrestored = $.setRuntimeTypeInfo(new $.EventStreamProvider("webglcontextrestored"), [$.ContextEvent]);
$.EventStreamProvider_resize = $.setRuntimeTypeInfo(new $.EventStreamProvider("resize"), [$.Event]);
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.Expando__keyCount = 0;
$.canvas = null;
$.canvasAspect = null;
$.debugLostContext = true;
$.programList = null;
$.shaderCache = null;
$.textureTable = null;
$.fieldOfViewYRadians = 0.7853981633974483;
$.backfaceCulling = false;
$.showPicking = false;
$.picker = null;
$.fullRateFrames = 0;
$.stats = null;
$._ws = null;
$._dispatcher = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeChild$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_removeChild$1(receiver, a0);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.append$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).append$1(receiver, a0);
};
$.appendText$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).appendText$1(receiver, a0);
};
$.attachShader$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).attachShader$2(receiver, a0, a1);
};
$.bindFramebuffer$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).bindFramebuffer$2(receiver, a0, a1);
};
$.bindRenderbuffer$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).bindRenderbuffer$2(receiver, a0, a1);
};
$.bindTexture$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).bindTexture$2(receiver, a0, a1);
};
$.compileShader$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).compileShader$1(receiver, a0);
};
$.createFramebuffer$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).createFramebuffer$0(receiver);
};
$.createRenderbuffer$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).createRenderbuffer$0(receiver);
};
$.createShader$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).createShader$1(receiver, a0);
};
$.createTexture$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).createTexture$0(receiver);
};
$.drawElements$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).drawElements$4(receiver, a0, a1, a2, a3);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.firstWhere$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).firstWhere$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.framebufferRenderbuffer$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).framebufferRenderbuffer$4(receiver, a0, a1, a2, a3);
};
$.framebufferTexture2D$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return $.getInterceptor$x(receiver).framebufferTexture2D$5(receiver, a0, a1, a2, a3, a4);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$data$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$data(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$identifier$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$identifier(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$model$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$model(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$onClose$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClose(receiver);
};
$.get$onError$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onError(receiver);
};
$.get$onMessage$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMessage(receiver);
};
$.get$onMouseDown$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMouseDown(receiver);
};
$.get$onOpen$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onOpen(receiver);
};
$.get$responseText$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$responseText(receiver);
};
$.get$values$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$values(receiver);
};
$.getContext3d$1$preserveDrawingBuffer$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getContext3d$1$preserveDrawingBuffer(receiver, a0);
};
$.getExtension$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getExtension$1(receiver, a0);
};
$.getProgramInfoLog$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getProgramInfoLog$1(receiver, a0);
};
$.getProgramParameter$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).getProgramParameter$2(receiver, a0, a1);
};
$.getShaderInfoLog$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getShaderInfoLog$1(receiver, a0);
};
$.getShaderParameter$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).getShaderParameter$2(receiver, a0, a1);
};
$.getUniformLocation$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
};
$.insertBefore$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).insertBefore$2(receiver, a0, a1);
};
$.linkProgram$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).linkProgram$1(receiver, a0);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.renderbufferStorage$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).renderbufferStorage$4(receiver, a0, a1, a2, a3);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.send$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).send$1(receiver, a0);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$backgroundColor$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$backgroundColor(receiver, value);
};
$.set$display$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$display(receiver, value);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$type$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$type(receiver, value);
};
$.setRange$3$ax = function(receiver, a0, a1, a2) {
  return $.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
};
$.shaderSource$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).shaderSource$2(receiver, a0, a1);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.startsWith$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
$.substring$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
$.texImage2DTyped$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return $.getInterceptor$x(receiver).texImage2DTyped$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
$.toDouble$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toDouble$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.uniform4fv$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).uniform4fv$2(receiver, a0, a1);
};
$.uniformMatrix4fv$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).uniformMatrix4fv$3(receiver, a0, a1, a2);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.boolTypeCheck($.get$globalThis().postMessage !== void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return $.assertSubtype($.Expando$(null, $.JSInt), "$isExpando", [$.JSInt], "$asExpando");
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error", null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return $.assertSubtype($.Queue_Queue({func: "void_", void: true}), "$isQueue", [{func: "void_", void: true}], "$asQueue");
});
Isolate.$lazy($, "_current", "_Zone__current", "get$_Zone__current", function() {
  return $._DefaultZone$();
});
Isolate.$lazy($, "mdvPackage", "TemplateElement_mdvPackage", "get$TemplateElement_mdvPackage", function() {
  return new $.closure();
});
Isolate.$lazy($, "_buttonIds", "Keyboard__buttonIds", "get$Keyboard__buttonIds", function() {
  return $.interceptedTypeCheck([65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 16, 17, 18, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 192, 13, 38, 40, 37, 39, 27], "$isList");
});
Isolate.$lazy($, "_buttonIds", "Mouse__buttonIds", "get$Mouse__buttonIds", function() {
  return $.interceptedTypeCheck([0, 1, 2], "$isList");
});
Isolate.$lazy($, "pMatrix", "pMatrix", "get$pMatrix", function() {
  return $.Matrix4$zero();
});
Isolate.$lazy($, "cam", "cam", "get$cam", function() {
  return $.Camera$($.Vector3$(0, 0, 15), $.Vector3$(0, 0, -1), $.Vector3$(0, 1, 0));
});
Isolate.$lazy($, "asset", "asset", "get$asset", function() {
  return $.Asset$("/");
});
Isolate.$lazy($, "prefix_mtllib_len", "Obj_prefix_mtllib_len", "get$Obj_prefix_mtllib_len", function() {
  return 7;
});
Isolate.$lazy($, "prefix_usemtl_len", "Obj_prefix_usemtl_len", "get$Obj_prefix_usemtl_len", function() {
  return 7;
});
Isolate.$lazy($, "_currentPickColor", "_currentPickColor", "get$_currentPickColor", function() {
  return $.interceptedTypeCheck([0, 0, 0, 1], "$isList");
});
Isolate.$lazy($, "_wsQueue", "_wsQueue", "get$_wsQueue", function() {
  return $.assertSubtype($.ListQueue$(null, $.JSString), "$isListQueue", [$.JSString], "$asListQueue");
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethodsNonleaf("AbstractWorker", $.AbstractWorker);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("ApplicationCache|DOMApplicationCache|OfflineResourceList", $.ApplicationCache);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("BarProp", $.BarProp);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("Canvas2DContextAttributes", $.Canvas2DContextAttributes);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("Composition", $.Composition);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("Coordinates", $.Coordinates);

$.defineNativeMethods("Crypto", $.Crypto);

$.defineNativeMethods("CSS", $.Css);

$.defineNativeMethods("CSSCharsetRule", $.CssCharsetRule);

$.defineNativeMethods("WebKitCSSFilterRule", $.CssFilterRule);

$.defineNativeMethods("WebKitCSSFilterValue", $.CssFilterValue);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSSFontFaceRule", $.CssFontFaceRule);

$.defineNativeMethods("CSSHostRule", $.CssHostRule);

$.defineNativeMethods("CSSImportRule", $.CssImportRule);

$.defineNativeMethods("CSSKeyframeRule|MozCSSKeyframeRule|WebKitCSSKeyframeRule", $.CssKeyframeRule);

$.defineNativeMethods("CSSKeyframesRule|MozCSSKeyframesRule|WebKitCSSKeyframesRule", $.CssKeyframesRule);

$.defineNativeMethods("WebKitCSSMatrix", $.CssMatrix);

$.defineNativeMethods("CSSMediaRule", $.CssMediaRule);

$.defineNativeMethods("WebKitCSSMixFunctionValue", $.CssMixFunctionValue);

$.defineNativeMethods("CSSPageRule", $.CssPageRule);

$.defineNativeMethods("WebKitCSSRegionRule", $.CssRegionRule);

$.defineNativeMethodsNonleaf("CSSRule", $.CssRule);

$.defineNativeMethods("CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties", $.CssStyleDeclaration);

$.defineNativeMethods("CSSStyleRule", $.CssStyleRule);

$.defineNativeMethods("CSSStyleSheet", $.CssStyleSheet);

$.defineNativeMethods("CSSSupportsRule", $.CssSupportsRule);

$.defineNativeMethods("WebKitCSSTransformValue", $.CssTransformValue);

$.defineNativeMethods("CSSUnknownRule", $.CssUnknownRule);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("Clipboard", $.DataTransfer);

$.defineNativeMethods("DataTransferItem", $.DataTransferItem);

$.defineNativeMethods("DataTransferItemList", $.DataTransferItemList);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceAcceleration", $.DeviceAcceleration);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("DeviceRotationRate", $.DeviceRotationRate);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("DirectoryEntry", $.DirectoryEntry);

$.defineNativeMethods("DirectoryReader", $.DirectoryReader);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethods("DOMImplementation", $.DomImplementation);

$.defineNativeMethods("DOMParser", $.DomParser);

$.defineNativeMethods("DOMSettableTokenList", $.DomSettableTokenList);

$.defineNativeMethods("DOMStringList", $.DomStringList);

$.defineNativeMethodsNonleaf("DOMTokenList", $.DomTokenList);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethodsNonleaf("Entry", $.Entry);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethods("EventSource", $.EventSource);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File);

$.defineNativeMethods("FileEntry", $.FileEntry);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FileList", $.FileList);

$.defineNativeMethods("FileReader", $.FileReader);

$.defineNativeMethods("DOMFileSystem", $.FileSystem);

$.defineNativeMethods("FileWriter", $.FileWriter);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("FontLoader", $.FontLoader);

$.defineNativeMethods("FormData", $.FormData);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("Gamepad", $.Gamepad);

$.defineNativeMethods("Geolocation", $.Geolocation);

$.defineNativeMethods("Geoposition", $.Geoposition);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethods("History", $.History);

$.defineNativeMethods("HTMLAllCollection", $.HtmlAllCollection);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequest", $.HttpRequest);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("XMLHttpRequestEventTarget|XMLHttpRequestUpload", $.HttpRequestUpload);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("ImageData", $.ImageData);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("InputMethodContext", $.InputMethodContext);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("Location", $.Location);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethods("MediaController", $.MediaController);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaKeyMessageEvent", $.MediaKeyMessageEvent);

$.defineNativeMethods("MediaKeyNeededEvent", $.MediaKeyNeededEvent);

$.defineNativeMethods("MediaKeySession", $.MediaKeySession);

$.defineNativeMethods("MediaKeys", $.MediaKeys);

$.defineNativeMethods("MediaList", $.MediaList);

$.defineNativeMethods("MediaQueryList", $.MediaQueryList);

$.defineNativeMethods("WebKitMediaSource", $.MediaSource);

$.defineNativeMethods("MediaStream", $.MediaStream);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrack", $.MediaStreamTrack);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("MemoryInfo", $.MemoryInfo);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageChannel", $.MessageChannel);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("MessagePort", $.MessagePort);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("Metadata", $.Metadata);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("MIDIAccess", $.MidiAccess);

$.defineNativeMethods("MIDIConnectionEvent", $.MidiConnectionEvent);

$.defineNativeMethods("MIDIInput", $.MidiInput);

$.defineNativeMethods("MIDIMessageEvent", $.MidiMessageEvent);

$.defineNativeMethods("MIDIOutput", $.MidiOutput);

$.defineNativeMethodsNonleaf("MIDIPort", $.MidiPort);

$.defineNativeMethods("MimeType", $.MimeType);

$.defineNativeMethods("MimeTypeArray", $.MimeTypeArray);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("DragEvent|MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("MutationObserver|WebKitMutationObserver", $.MutationObserver);

$.defineNativeMethods("MutationRecord", $.MutationRecord);

$.defineNativeMethods("WebKitNamedFlow", $.NamedFlow);

$.defineNativeMethods("WebKitNamedFlowCollection", $.NamedFlowCollection);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeFilter", $.NodeFilter);

$.defineNativeMethods("NodeIterator", $.NodeIterator);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("Notification", $.Notification);

$.defineNativeMethods("NotificationCenter", $.NotificationCenter);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("Path", $.Path);

$.defineNativeMethods("Performance", $.Performance);

$.defineNativeMethodsNonleaf("PerformanceEntry", $.PerformanceEntry);

$.defineNativeMethods("PerformanceMark", $.PerformanceMark);

$.defineNativeMethods("PerformanceMeasure", $.PerformanceMeasure);

$.defineNativeMethods("PerformanceNavigation", $.PerformanceNavigation);

$.defineNativeMethods("PerformanceResourceTiming", $.PerformanceResourceTiming);

$.defineNativeMethods("PerformanceTiming", $.PerformanceTiming);

$.defineNativeMethods("Plugin", $.Plugin);

$.defineNativeMethods("PluginArray", $.PluginArray);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("Range", $.Range);

$.defineNativeMethods("ResourceProgressEvent", $.ResourceProgressEvent);

$.defineNativeMethods("DataChannel|RTCDataChannel", $.RtcDataChannel);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFSender", $.RtcDtmfSender);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidate|mozRTCIceCandidate", $.RtcIceCandidate);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("RTCPeerConnection|mozRTCPeerConnection", $.RtcPeerConnection);

$.defineNativeMethods("RTCSessionDescription|mozRTCSessionDescription", $.RtcSessionDescription);

$.defineNativeMethods("RTCStatsReport", $.RtcStatsReport);

$.defineNativeMethods("RTCStatsResponse", $.RtcStatsResponse);

$.defineNativeMethods("Screen", $.Screen);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("SecurityPolicy", $.SecurityPolicy);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("Selection", $.Selection);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("WebKitSourceBuffer", $.SourceBuffer);

$.defineNativeMethods("WebKitSourceBufferList", $.SourceBufferList);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechGrammar", $.SpeechGrammar);

$.defineNativeMethods("SpeechGrammarList", $.SpeechGrammarList);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechInputResult", $.SpeechInputResult);

$.defineNativeMethods("SpeechRecognition", $.SpeechRecognition);

$.defineNativeMethods("SpeechRecognitionAlternative", $.SpeechRecognitionAlternative);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechRecognitionResult", $.SpeechRecognitionResult);

$.defineNativeMethods("SpeechSynthesis", $.SpeechSynthesis);

$.defineNativeMethods("SpeechSynthesisEvent", $.SpeechSynthesisEvent);

$.defineNativeMethods("SpeechSynthesisUtterance", $.SpeechSynthesisUtterance);

$.defineNativeMethods("SpeechSynthesisVoice", $.SpeechSynthesisVoice);

$.defineNativeMethods("Storage", $.Storage);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("StorageInfo", $.StorageInfo);

$.defineNativeMethods("StorageQuota", $.StorageQuota);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("StyleMedia", $.StyleMedia);

$.defineNativeMethodsNonleaf("StyleSheet", $.StyleSheet);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("TextMetrics", $.TextMetrics);

$.defineNativeMethods("TextTrack", $.TextTrack);

$.defineNativeMethods("TextTrackCue", $.TextTrackCue);

$.defineNativeMethods("TextTrackCueList", $.TextTrackCueList);

$.defineNativeMethods("TextTrackList", $.TextTrackList);

$.defineNativeMethods("TimeRanges", $.TimeRanges);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("Touch", $.Touch);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("TouchList", $.TouchList);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethods("TreeWalker", $.TreeWalker);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("URL", $.Url);

$.defineNativeMethods("ValidityState", $.ValidityState);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("WebSocket", $.WebSocket);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("Worker", $.Worker);

$.defineNativeMethods("XPathEvaluator", $.XPathEvaluator);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("XPathExpression", $.XPathExpression);

$.defineNativeMethods("XPathNSResolver", $.XPathNSResolver);

$.defineNativeMethods("XPathResult", $.XPathResult);

$.defineNativeMethods("XMLSerializer", $.XmlSerializer);

$.defineNativeMethods("XSLTProcessor", $.XsltProcessor);

$.defineNativeMethods("Attr", $._Attr);

$.defineNativeMethodsNonleaf("CSSValue", $._CSSValue);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("ClientRectList", $._ClientRectList);

$.defineNativeMethods("CSSRuleList", $._CssRuleList);

$.defineNativeMethodsNonleaf("CSSValueList", $._CssValueList);

$.defineNativeMethods("WebKitPoint", $._DomPoint);

$.defineNativeMethods("Entity", $._Entity);

$.defineNativeMethods("EntryArray", $._EntryArray);

$.defineNativeMethods("EntryArraySync", $._EntryArraySync);

$.defineNativeMethods("EntrySync", $._EntrySync);

$.defineNativeMethods("GamepadList", $._GamepadList);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("SpeechInputResultList", $._SpeechInputResultList);

$.defineNativeMethods("SpeechRecognitionResultList", $._SpeechRecognitionResultList);

$.defineNativeMethods("StyleSheetList", $._StyleSheetList);

$.defineNativeMethodsNonleaf("IDBCursor", $.Cursor);

$.defineNativeMethods("IDBCursorWithValue", $.CursorWithValue);

$.defineNativeMethods("IDBDatabase", $.Database);

$.defineNativeMethods("IDBFactory", $.IdbFactory);

$.defineNativeMethods("IDBIndex", $.Index);

$.defineNativeMethods("IDBKeyRange", $.KeyRange);

$.defineNativeMethods("IDBObjectStore", $.ObjectStore);

$.defineNativeMethods("IDBOpenDBRequest|IDBVersionChangeRequest", $.OpenDBRequest);

$.defineNativeMethodsNonleaf("IDBRequest", $.Request);

$.defineNativeMethods("IDBTransaction", $.Transaction);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAngle", $.Angle);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedAngle", $.AnimatedAngle);

$.defineNativeMethods("SVGAnimatedBoolean", $.AnimatedBoolean);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedInteger", $.AnimatedInteger);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedPreserveAspectRatio", $.AnimatedPreserveAspectRatio);

$.defineNativeMethods("SVGAnimatedRect", $.AnimatedRect);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethods("SVGAnimatedTransformList", $.AnimatedTransformList);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGElementInstance", $.ElementInstance);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLength", $.Length);

$.defineNativeMethods("SVGLengthList", $.LengthList);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMatrix", $.Matrix);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGNumber", $.Number);

$.defineNativeMethods("SVGNumberList", $.NumberList);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethodsNonleaf("SVGPathSeg", $.PathSeg);

$.defineNativeMethods("SVGPathSegArcAbs", $.PathSegArcAbs);

$.defineNativeMethods("SVGPathSegArcRel", $.PathSegArcRel);

$.defineNativeMethods("SVGPathSegClosePath", $.PathSegClosePath);

$.defineNativeMethods("SVGPathSegCurvetoCubicAbs", $.PathSegCurvetoCubicAbs);

$.defineNativeMethods("SVGPathSegCurvetoCubicRel", $.PathSegCurvetoCubicRel);

$.defineNativeMethods("SVGPathSegCurvetoCubicSmoothAbs", $.PathSegCurvetoCubicSmoothAbs);

$.defineNativeMethods("SVGPathSegCurvetoCubicSmoothRel", $.PathSegCurvetoCubicSmoothRel);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticAbs", $.PathSegCurvetoQuadraticAbs);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticRel", $.PathSegCurvetoQuadraticRel);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticSmoothAbs", $.PathSegCurvetoQuadraticSmoothAbs);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticSmoothRel", $.PathSegCurvetoQuadraticSmoothRel);

$.defineNativeMethods("SVGPathSegLinetoAbs", $.PathSegLinetoAbs);

$.defineNativeMethods("SVGPathSegLinetoHorizontalAbs", $.PathSegLinetoHorizontalAbs);

$.defineNativeMethods("SVGPathSegLinetoHorizontalRel", $.PathSegLinetoHorizontalRel);

$.defineNativeMethods("SVGPathSegLinetoRel", $.PathSegLinetoRel);

$.defineNativeMethods("SVGPathSegLinetoVerticalAbs", $.PathSegLinetoVerticalAbs);

$.defineNativeMethods("SVGPathSegLinetoVerticalRel", $.PathSegLinetoVerticalRel);

$.defineNativeMethods("SVGPathSegList", $.PathSegList);

$.defineNativeMethods("SVGPathSegMovetoAbs", $.PathSegMovetoAbs);

$.defineNativeMethods("SVGPathSegMovetoRel", $.PathSegMovetoRel);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPoint", $.Point0);

$.defineNativeMethods("SVGPointList", $.PointList);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGPreserveAspectRatio", $.PreserveAspectRatio);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRect", $.Rect0);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGRenderingIntent", $.RenderingIntent);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStringList", $.StringList);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGTransform", $.Transform);

$.defineNativeMethods("SVGTransformList", $.TransformList);

$.defineNativeMethods("SVGUnitTypes", $.UnitTypes);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGViewSpec", $.ViewSpec);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethods("SVGElementInstanceList", $._ElementInstanceList);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("AnalyserNode|RealtimeAnalyserNode", $.AnalyserNode);

$.defineNativeMethods("AudioBuffer", $.AudioBuffer);

$.defineNativeMethods("AudioBufferSourceNode", $.AudioBufferSourceNode);

$.defineNativeMethodsNonleaf("AudioContext", $.AudioContext);

$.defineNativeMethods("AudioDestinationNode", $.AudioDestinationNode);

$.defineNativeMethods("AudioListener", $.AudioListener);

$.defineNativeMethodsNonleaf("AudioNode", $.AudioNode);

$.defineNativeMethods("AudioParam", $.AudioParam);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethodsNonleaf("AudioSourceNode", $.AudioSourceNode);

$.defineNativeMethods("BiquadFilterNode", $.BiquadFilterNode);

$.defineNativeMethods("AudioChannelMerger|ChannelMergerNode", $.ChannelMergerNode);

$.defineNativeMethods("AudioChannelSplitter|ChannelSplitterNode", $.ChannelSplitterNode);

$.defineNativeMethods("ConvolverNode", $.ConvolverNode);

$.defineNativeMethods("DelayNode", $.DelayNode);

$.defineNativeMethods("DynamicsCompressorNode", $.DynamicsCompressorNode);

$.defineNativeMethods("AudioGainNode|GainNode", $.GainNode);

$.defineNativeMethods("MediaElementAudioSourceNode", $.MediaElementAudioSourceNode);

$.defineNativeMethods("MediaStreamAudioDestinationNode", $.MediaStreamAudioDestinationNode);

$.defineNativeMethods("MediaStreamAudioSourceNode", $.MediaStreamAudioSourceNode);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("OfflineAudioContext", $.OfflineAudioContext);

$.defineNativeMethods("Oscillator|OscillatorNode", $.OscillatorNode);

$.defineNativeMethods("AudioPannerNode|PannerNode", $.PannerNode);

$.defineNativeMethods("JavaScriptAudioNode|ScriptProcessorNode", $.ScriptProcessorNode);

$.defineNativeMethods("WaveShaperNode", $.WaveShaperNode);

$.defineNativeMethods("WaveTable", $.WaveTable);

$.defineNativeMethods("WebGLActiveInfo", $.ActiveInfo);

$.defineNativeMethods("WebGLBuffer", $.Buffer);

$.defineNativeMethods("WebGLCompressedTextureATC", $.CompressedTextureAtc);

$.defineNativeMethods("WebGLCompressedTexturePVRTC", $.CompressedTexturePvrtc);

$.defineNativeMethods("WebGLCompressedTextureS3TC", $.CompressedTextureS3TC);

$.defineNativeMethods("WebGLContextAttributes", $.ContextAttributes);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("WebGLDebugRendererInfo", $.DebugRendererInfo);

$.defineNativeMethods("WebGLDebugShaders", $.DebugShaders);

$.defineNativeMethods("WebGLDepthTexture", $.DepthTexture);

$.defineNativeMethods("EXTDrawBuffers", $.ExtDrawBuffers);

$.defineNativeMethods("EXTFragDepth", $.ExtFragDepth);

$.defineNativeMethods("EXTTextureFilterAnisotropic", $.ExtTextureFilterAnisotropic);

$.defineNativeMethods("WebGLFramebuffer", $.Framebuffer);

$.defineNativeMethods("WebGLLoseContext", $.LoseContext);

$.defineNativeMethods("OESElementIndexUint", $.OesElementIndexUint);

$.defineNativeMethods("OESStandardDerivatives", $.OesStandardDerivatives);

$.defineNativeMethods("OESTextureFloat", $.OesTextureFloat);

$.defineNativeMethods("OESTextureFloatLinear", $.OesTextureFloatLinear);

$.defineNativeMethods("OESTextureHalfFloat", $.OesTextureHalfFloat);

$.defineNativeMethods("OESTextureHalfFloatLinear", $.OesTextureHalfFloatLinear);

$.defineNativeMethods("OESVertexArrayObject", $.OesVertexArrayObject);

$.defineNativeMethods("WebGLProgram", $.Program);

$.defineNativeMethods("WebGLRenderbuffer", $.Renderbuffer);

$.defineNativeMethods("WebGLRenderingContext", $.RenderingContext);

$.defineNativeMethods("WebGLShader", $.Shader);

$.defineNativeMethods("WebGLShaderPrecisionFormat", $.ShaderPrecisionFormat);

$.defineNativeMethods("WebGLTexture", $.Texture);

$.defineNativeMethods("WebGLUniformLocation", $.UniformLocation);

$.defineNativeMethods("WebGLVertexArrayObjectOES", $.VertexArrayObject);

$.defineNativeMethods("Database", $.SqlDatabase);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

$.defineNativeMethods("SQLResultSet", $.SqlResultSet);

$.defineNativeMethods("SQLResultSetRowList", $.SqlResultSetRowList);

$.defineNativeMethods("SQLTransaction", $.SqlTransaction);

$.defineNativeMethods("ArrayBuffer", $.ByteBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("DataView", $.ByteData);

$.defineNativeMethods("Float32Array", $.Float32List);

$.defineNativeMethods("Float64Array", $.Float64List);

$.defineNativeMethods("Int16Array", $.Int16List);

$.defineNativeMethods("Int32Array", $.Int32List);

$.defineNativeMethods("Int8Array", $.Int8List);

$.defineNativeMethods("Uint16Array", $.Uint16List);

$.defineNativeMethods("Uint32Array", $.Uint32List);

$.defineNativeMethods("CanvasPixelArray|Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);


init.metadata = [];
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main$closure); });
      } else {
        $.startRootIsolate($.main$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        var constructor = defineClass(name, cls, fields, desc);
        isolateProperties[cls] = constructor;
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=negentropia_home.dart.js.map
