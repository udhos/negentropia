// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.ListIterator = {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib$_length;
    t2 = this._iterable;
    if (t1 !== t2.length)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = $.JSArray_methods.elementAt$1(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.WhereIterator$(t1.get$iterator(t1), this._f);
  },
  $asIterable: function() {
    return null;
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      $.write$1$x(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.write$1$x(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0)) {
      t2 = t1.sb_0;
      t2.write$1(t2, ", ");
    }
    t2 = t1.sb_0;
    t2.write$1(t2, key);
    t2 = t1.sb_0;
    t2.write$1(t2, ": ");
    t2 = t1.sb_0;
    t2.write$1(t2, $.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
};

$$.JSNull = {"": "Object;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.CloseToken = {"": "Object;", $isCloseToken: true};

$$.JsIsolateSink = {"": "StreamSink;_isClosed,_port<",
  add$1: function(_, message) {
    $.send$1$x(this._port, message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$isIsolateSink && $.$eq(this._port, other.get$_port()) === true;
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object;nextIsolateId@,currentManagerId,nextManagerId,currentContext<,rootContext,topEventLoop<,fromCommandLine,isWorker<,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = $.get$globalWorker() != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.$int, $._IsolateContext);
    this.managers = $.Map_Map($.$int, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id*,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(portId, port) {
    var t1 = this.ports;
    if (t1.containsKey$1(t1, portId))
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId(t2 + 1);
    this.id = t2;
    this.ports = $.Map_Map($.$int, $.ReceivePort);
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    var t1 = this.events;
    t1.addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null) {
      var t1 = $globalState.isolates;
      if (t1.containsKey$1(t1, $globalState.rootContext.id))
        if ($globalState.fromCommandLine === true) {
          t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function(_) {
    return 0;
  },
  set$id: function(_, i) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && true)
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$();
    port = $.ReceivePortImpl$();
    this.send$2(this, message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isSendPort: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  }
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  }
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) === true && $.$eq(this._isolateId, other._isolateId) === true && $.$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      t1 = $globalState.mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  }
};

$$.ReceivePortImpl = {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function(_) {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax($.get$values$x(map), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._isolateId, port._receivePort.get$_id()];
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.CONSTANT5;
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i;
    for ($length = $.get$length$asx(this.tagged), i = 0; i < $length; ++i)
      $.$index$asx(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.$isMap())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!x.$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._visited;
        copy = t1.$index(t1, list);
        if (copy != null)
          return copy;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var copy, t3, t2, i;
        state0 = 0;
        copy = $.List_List(len, null);
        t3 = this._visited;
        t3.$indexSet(t3, list, copy);
        for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
          t3 = this._dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = t3;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    $.forEach$1$ax(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$indexSet$ax(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = $.getInterceptor$x(map);
    return ["map", id, this._serializeList$1($.toList$0$ax(t1.get$keys(map))), this._serializeList$1($.toList$0$ax(t1.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var result, t2, i, t3;
        state0 = 0;
        result = $.List_List(len, null);
        for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
          t3 = this._dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          result[i] = t3;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$index$asx(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id, t1;
    id = $.$index$asx(x, 1);
    t1 = this._deserialized;
    return t1.$index(t1, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t2, len, i;
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    t2 = $.getInterceptor$asx(dartList);
    len = t2.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, keys, t1, x, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, t1, x, result, values, t3, len) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$asx(keys);
        len = t3.get$length(keys);
      case 3:
        var id, t2, i;
        state0 = 0;
        for (t1 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.activeTimerCount = t1.activeTimerCount + 1;
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  addAll$1: function(receiver, collection) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0();) {
      t2 = t1.get$current();
      $.checkGrowable(receiver, "add");
      receiver.push(t2);
    }
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  elementAt$1: function(receiver, index) {
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (typeof end !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    $.checkNull(start);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.$$throw($.RangeError$range(start, 0, receiver.length));
    if (!(typeof end === "number" && Math.floor(end) === end))
      throw $.$$throw($.ArgumentError$(end));
    if (end < start || end > receiver.length)
      throw $.$$throw($.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$2$bailout: function(state0, start, end, receiver) {
    $.checkNull(start);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.$$throw($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (!(typeof end === "number" && Math.floor(end) === end))
        throw $.$$throw($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.$$throw($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.$$throw($.StateError$("No elements"));
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    $.checkMutable(receiver, "set range");
    $.IterableMixinWorkaround_setRangeList(receiver, start, $length, from, startFrom);
  },
  setRange$3: function($receiver, start, length, from) {
    return this.setRange$4($receiver, start, length, from, 0);
  },
  indexOf$2: function(receiver, element, start) {
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, receiver["$asJSArray"], 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  }
};

$$.JSMutableArray = {"": "JSArray;",
  $asList: function() {
    return function () { return [null]; };
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function(_) {
    var t1 = this.stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
};

$$.Null = {"": "Object;"};

$$.JSNumber = {"": "Object;",
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.$$throw($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.$$throw($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    return this.toInt$0(receiver);
  },
  floor$0: function(receiver) {
    return this.toInt$0(Math.floor(receiver));
  },
  round$0: function(receiver) {
    return this.toInt$0(this.roundToDouble$0(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "JSNumber;", $is$int: true, $isnum: true};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true};

$$.JSString = {"": "Object;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  startsWith$1: function(receiver, other) {
    var otherLength;
    $.checkString(other);
    otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0))
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._convertJsonToDart_anon = {"": "Closure;",
  call$2: function(key, value) {
    return value;
  }
};

$$._convertJsonToDart_walk = {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i]=t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  }
};

$$.MetaInfo = {"": "Object;_tag<,_tags,_set<"};

$$.AsyncError = {"": "Object;error>,stackTrace<,cause<",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.write$1(buffer, "'");
    message = null;
    try {
      message = $.toString$0(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.write$1(buffer, message);
    buffer.write$1(buffer, "'\n");
    t1 = this.stackTrace;
    if (t1 != null) {
      buffer.write$1(buffer, "Stack trace:\n");
      buffer.writeln$1($.toString$0(t1));
    }
  },
  toString$0: function(_) {
    var buffer, cause;
    buffer = $.StringBuffer$("");
    buffer.write$1(buffer, "AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; cause != null;) {
      buffer.write$1(buffer, "Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0(buffer);
  },
  $isAsyncError: true
};

$$._CompleterImpl = {"": "Object;future,_isComplete",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._liblib0$_setValue$1(value);
  },
  complete$0: function($receiver) {
    return this.complete$1($receiver, null);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (!this.get$_isComplete()) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError()) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue())
      return $._FutureWrapper$(this);
    if (!this.get$_isComplete()) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _liblib0$_setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_liblib0$_setValue: function() {
    return new $.BoundClosure$1(this, "_liblib0$_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (!this.get$_isComplete())
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue())
      future._liblib0$_setValue$1(this._resultOrListeners);
    else {
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_liblib0$_setValue(), this.get$_setError());
        return;
      }
    else
      this._liblib0$_setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  _FutureImpl$immediateError$2: function(error, stackTrace) {
    this._setError$1(typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace));
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$2($.get$error$x(error), error.get$stackTrace());
    }
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    $.$indexSet$ax(t2, this.pos_1, value);
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  }
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  }
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, t2;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1.set$_state((t1.get$_state() & 4294967291) >>> 0);
      error = t1.get$_resultOrListeners();
      t1 = $.getInterceptor$x(error);
      $.Primitives_printString("Uncaught Error: " + $.S(t1.get$error(error)));
      t2 = error.get$stackTrace();
      if (t2 != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(t2) + "\n");
      throw $.$$throw(t1.get$error(error));
    }
  }
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1($.get$error$x(error));
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  get$length: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$first: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_first_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_first_anon0(future), t3, true);
    return future;
  }
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  }
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._liblib0$_setValue$1(this.box_0.count_0);
  }
};

$$.Stream_first_anon = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1;
    this.future_1._liblib0$_setValue$1(value);
    t1 = this.box_0.subscription_0;
    t1.cancel$0(t1);
    return;
  }
};

$$.Stream_first_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.AsyncError$($.StateError$("No elements"), null));
  }
};

$$.StreamSubscription = {"": "Object;"};

$$.StreamSink = {"": "EventSink;"};

$$.EventSink = {"": "Object;"};

$$.Timer_run_anon = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.addAll$1$ax($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.addAll$1$ax($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  }
};

$$._HashMapTable = {"": "_HashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 2;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 1));
    }
  },
  _setValue$2: function(offset, value) {
    $.$indexSet$ax(this._table, $.$add$ns(offset, 1), value);
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof fromTable !== "object" || fromTable === null || (fromTable.constructor !== Array || !!fromTable.immutable$list) && !fromTable.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, fromTable, fromOffset, toOffset, t1);
    t3 = toOffset + 1;
    t4 = fromOffset + 1;
    if (t4 < 0 || t4 >= fromTable.length)
      throw $.ioore(t4);
    t4 = fromTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, fromTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$indexSet$ax(t1, $.$add$ns(toOffset, 1), $.$index$asx(fromTable, fromOffset + 1));
    }
  }
};

$$.HashMap = {"": "Object;_hashTable<",
  containsKey$1: function(_, key) {
    return $.$ge$n(this._hashTable._get$1(key), 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if ($.$ge$n(offset, 0))
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  remove$1: function(_, key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._liblib1$_remove$1(t1, key);
    if ($.$lt$n(offset, 0))
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, table, entrySize, t2, offset, entry;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.forEach$1$bailout(1, action, table, t1, modificationCount);
    entrySize = t1.get$_entrySize();
    for (t2 = table.length, offset = 0; offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  forEach$1$bailout: function(state0, action, table, t1, modificationCount) {
    var entrySize, t2, offset, entry;
    entrySize = t1.get$_entrySize();
    for (t2 = $.getInterceptor$asx(table), offset = 0; offset < t2.get$length(table); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  get$keys: function(_) {
    return $._HashTableKeyIterable$(this._hashTable, $.getRuntimeTypeArgument(this, this["$asHashMap"], 0));
  },
  get$values: function(_) {
    return $._HashTableValueIterable$(this._hashTable, 1, $.getRuntimeTypeArgument(this, this["$asHashMap"], 1));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return this._hashTable.get$_elementCount() === 0;
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  HashMap$0: function(K, V) {
    this._hashTable._container = this;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return null;
  }
};

$$.HashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  }
};

$$._DeadEntry = {"": "Object;"};

$$._NullKey = {"": "Object;",
  get$hashCode: function(_) {
    return $.JSNull_methods.get$hashCode(null);
  }
};

$$._HashTable = {"": "Object;",
  _key$1: function(offset) {
    var t1, key;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._key$1$bailout(1, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    key = t1[offset];
    if (key !== $.CONSTANT2)
      return key;
    return;
  },
  _key$1$bailout: function(state0, offset, t1) {
    var key = $.$index$asx(t1, offset);
    if (key !== $.CONSTANT2)
      return key;
    return;
  },
  get$_elementCount: function() {
    return this._entryCount - this._deletedCount;
  },
  get$_entrySize: function() {
    return 1;
  },
  _checkModification$1: function(expectedModificationCount) {
    if (this._modificationCount !== expectedModificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this._container));
  },
  _recordModification$0: function() {
    this._modificationCount = this._modificationCount + 1 & 1073741823;
  },
  _createTable$1: function(capacity) {
    return $.List_List($.$mul$n(capacity, this.get$_entrySize()), null);
  },
  _nextProbe$3: function(previousIndex, probeCount, capacity) {
    if (typeof capacity !== "number")
      return this._nextProbe$3$bailout(1, previousIndex, probeCount, capacity);
    return (previousIndex + probeCount & capacity - 1) >>> 0;
  },
  _nextProbe$3$bailout: function(state0, previousIndex, probeCount, capacity) {
    var t1 = $.$sub$n(capacity, 1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return (previousIndex + probeCount & t1) >>> 0;
  },
  _isFree$1: function(marker) {
    return marker == null || marker === $.CONSTANT1;
  },
  _probeForAdd$2: function(hashCode, object) {
    var entrySize, index, t1, firstTombstone, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, firstTombstone = -1, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry === $.CONSTANT1) {
        if (firstTombstone < 0)
          firstTombstone = offset;
      } else if (entry == null) {
        if (firstTombstone < 0)
          return offset;
        return firstTombstone;
      } else if (($.CONSTANT2 === entry ? t1 : $.$eq(entry, object)) === true)
        return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _probeForLookup$2: function(hashCode, object) {
    var entrySize, index, t1, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry == null)
        return -1;
      else if ($.CONSTANT1 !== entry)
        if (($.CONSTANT2 === entry ? t1 : $.$eq(entry, object)) === true)
          return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _checkCapacity$0: function() {
    var t1, t3, freeCount;
    t1 = this._capacity;
    if (typeof t1 !== "number")
      return this._checkCapacity$0$bailout(1, t1);
    t3 = this._entryCount;
    freeCount = t1 - t3;
    if (freeCount * 4 < t1 || freeCount < this._deletedCount)
      this._grow$1(t3 - this._deletedCount);
  },
  _checkCapacity$0$bailout: function(state0, t1, t2, freeCount, t3) {
    switch (state0) {
      case 0:
        t1 = this._capacity;
      case 1:
        state0 = 0;
        freeCount = $.$sub$n(t1, this._entryCount);
        t1 = $.getInterceptor$n(freeCount);
        t2 = t1.$mul(freeCount, 4);
        t3 = this._capacity;
      case 2:
        state0 = 0;
        if ($.$lt$n(t2, t3) || t1.$lt(freeCount, this._deletedCount))
          this._grow$1(this._entryCount - this._deletedCount);
    }
  },
  _grow$1: function(contentCount) {
    var capacity, minCapacity, oldTable;
    capacity = this._capacity;
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, contentCount, capacity);
    minCapacity = contentCount * 2;
    for (; capacity < minCapacity;)
      capacity *= 2;
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _grow$1$bailout: function(state0, contentCount, capacity) {
    var minCapacity, t1, oldTable;
    minCapacity = contentCount * 2;
    for (; t1 = $.getInterceptor$n(capacity), t1.$lt(capacity, minCapacity);)
      capacity = t1.$mul(capacity, 2);
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _addAllEntries$1: function(oldTable) {
    var t1, i, object;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout(1, oldTable);
    for (t1 = oldTable.length, i = 0; i < t1; i += this.get$_entrySize()) {
      if (i < 0)
        throw $.ioore(i);
      object = oldTable[i];
      if (!(object == null || object === $.CONSTANT1))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout: function(state0, oldTable) {
    var t1, i, object;
    for (t1 = $.getInterceptor$asx(oldTable), i = 0; i < t1.get$length(oldTable); i += this.get$_entrySize()) {
      object = t1.$index(oldTable, i);
      if (!(object == null || object === $.CONSTANT1))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
  },
  _get$1: function(key) {
    return this._probeForLookup$2($.get$hashCode$(key), key);
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry == null)
      this._entryCount = this._entryCount + 1;
    else if (oldEntry === $.CONSTANT1)
      this._deletedCount = this._deletedCount - 1;
    else
      return offset;
    if (key == null)
      key = $.CONSTANT2;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(2, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._recordModification$0();
    return offset;
  },
  _put$1$bailout: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
        if (oldEntry == null)
          this._entryCount = this._entryCount + 1;
        else if (oldEntry === $.CONSTANT1)
          this._deletedCount = this._deletedCount - 1;
        else
          return offset;
        if (key == null)
          key = $.CONSTANT2;
        t1 = this._table;
      case 2:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._recordModification$0();
        return offset;
    }
  },
  _liblib1$_remove$1: function(_, key) {
    var offset = this._probeForLookup$2($.get$hashCode$(key), key);
    if (typeof offset !== "number")
      return this._liblib1$_remove$1$bailout(1, offset);
    if (offset >= 0)
      this._deleteEntry$1(offset);
    return offset;
  },
  _liblib1$_remove$1$bailout: function(state0, offset) {
    if ($.$ge$n(offset, 0))
      this._deleteEntry$1(offset);
    return offset;
  },
  _deleteEntry$1: function(offset) {
    var key, t1;
    key = $.CONSTANT1;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._deleteEntry$1$bailout(1, offset, t1, key);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._deletedCount = this._deletedCount + 1;
    this._recordModification$0();
  },
  _deleteEntry$1$bailout: function(state0, offset, t1, key) {
    $.$indexSet$ax(t1, offset, key);
    this._deletedCount = this._deletedCount + 1;
    this._recordModification$0();
  },
  _HashTable$1: function(initialCapacity) {
    this._table = this._createTable$1(initialCapacity);
  }
};

$$._HashTableIterable = {"": "Iterable;_hashTable<",
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  forEach$1: function(_, action) {
    var t1, entrySize, table, modificationCount, t2, offset, entry;
    t1 = this._hashTable;
    entrySize = t1.get$_entrySize();
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.forEach$1$bailout1(1, action, entrySize, t1, table);
    modificationCount = t1._modificationCount;
    for (t2 = table.length, offset = 0; offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, entrySize, t1, table) {
    var modificationCount, t2, offset, entry;
    modificationCount = t1._modificationCount;
    for (t2 = $.getInterceptor$asx(table), offset = 0; offset < t2.get$length(table); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  },
  $asIterable: function() {
    return null;
  }
};

$$._HashTableIterator = {"": "Object;_hashTable<",
  moveNext$0: function() {
    var t1, table, entrySize, t2, t3, entry;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.moveNext$0$bailout(1, table, t1);
    entrySize = t1.get$_entrySize();
    t2 = table.length;
    while (true) {
      t3 = this._offset;
      if (typeof t3 !== "number")
        return this.moveNext$0$bailout(2, table, t1, entrySize, t3, $.JSArray_methods);
      if (!(t3 < t2))
        break;
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      entry = table[t3];
      this._offset = t3 + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib1$_current = this._valueAt$2(t3, entry);
        return true;
      }
    }
    this._liblib1$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, table, t1, entrySize, t3, t2, currentOffset) {
    switch (state0) {
      case 0:
        t1 = this._hashTable;
        t1._checkModification$1(this._modificationCount);
        table = t1._table;
      case 1:
        state0 = 0;
        entrySize = t1.get$_entrySize();
        t2 = $.getInterceptor$asx(table);
      default:
        var entry;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = this._offset;
              case 2:
                state0 = 0;
                if (!$.$lt$n(t3, t2.get$length(table)))
                  break L0;
                currentOffset = this._offset;
              case 3:
                state0 = 0;
                entry = t2.$index(table, currentOffset);
                this._offset = $.$add$ns(currentOffset, entrySize);
                if (!t1._isFree$1(entry)) {
                  this._liblib1$_current = this._valueAt$2(currentOffset, entry);
                  return true;
                }
            }
        this._liblib1$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$._HashTableKeyIterable = {"": "_HashTableIterable;_hashTable",
  get$iterator: function(_) {
    return $._HashTableKeyIterator$(this._hashTable);
  },
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT2)
      return;
    return key;
  },
  $as_HashTableIterable: null
};

$$._HashTableKeyIterator = {"": "_HashTableIterator;_hashTable,_modificationCount,_offset,_liblib1$_current",
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT2)
      return;
    return key;
  }
};

$$._HashTableValueIterable = {"": "_HashTableIterable;_entryIndex,_hashTable",
  get$iterator: function(_) {
    return $._HashTableValueIterator$(this._hashTable, this._entryIndex);
  },
  _valueAt$2: function(offset, key) {
    var t1, t3;
    t1 = this._hashTable._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._valueAt$2$bailout1(1, offset, t1);
    t3 = offset + this._entryIndex;
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _valueAt$2$bailout1: function(state0, offset, t1) {
    return $.$index$asx(t1, offset + this._entryIndex);
  },
  $as_HashTableIterable: null
};

$$._HashTableValueIterator = {"": "_HashTableIterator;_entryIndex,_hashTable,_modificationCount,_offset,_liblib1$_current",
  _valueAt$2: function(offset, key) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._valueAt$2$bailout1(1, offset);
    t1 = this._hashTable._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._valueAt$2$bailout1(2, offset, t1);
    t3 = offset + this._entryIndex;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _valueAt$2$bailout1: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._hashTable._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, this._entryIndex));
    }
  }
};

$$._LinkedHashMapTable = {"": "_LinkedHashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 4;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 3;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 3));
    }
  },
  _setValue$2: function(offset, value) {
    $.$indexSet$ax(this._table, $.$add$ns(offset, 3), value);
  },
  _copyEntry$3: function(oldTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof fromOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, oldTable, fromOffset, toOffset, t1);
    t3 = toOffset + 3;
    t4 = fromOffset + 3;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= oldTable.length)
      throw $.ioore(t4);
    t4 = oldTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, oldTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$indexSet$ax(t1, $.$add$ns(toOffset, 3), $.$index$asx(oldTable, $.$add$ns(fromOffset, 3)));
    }
  }
};

$$.LinkedHashMap = {"": "Object;_hashTable<",
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if ($.$ge$n(offset, 0))
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, offset;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    offset = t1._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout(1, action, t1, modificationCount, offset);
    for (; !$.$eq(offset, 0); offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout: function(state0, action, t1, modificationCount, offset) {
    for (; $.$eq(offset, 0) !== true; offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  get$keys: function(_) {
    return $._LinkedHashTableKeyIterable$(this._hashTable, $.getRuntimeTypeArgument(this, this["$asLinkedHashMap"], 0));
  },
  get$values: function(_) {
    return $._LinkedHashTableValueIterable$(this._hashTable, 3, $.getRuntimeTypeArgument(this, this["$asLinkedHashMap"], 1));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  LinkedHashMap$0: function(K, V) {
    this._hashTable._container = this;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return null;
  }
};

$$.LinkedHashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  }
};

$$._LinkedHashTableHeadMarker = {"": "Object;"};

$$._LinkedHashTable = {"": "_HashTable;",
  get$_entrySize: function() {
    return 3;
  },
  _createTable$1: function(capacity) {
    var result, t1;
    result = $.List_List($.$mul$n(capacity, this.get$_entrySize()), null);
    t1 = result.length;
    if (0 >= t1)
      throw $.ioore(0);
    result[0] = $.CONSTANT3;
    if (1 >= t1)
      throw $.ioore(1);
    result[1] = 0;
    if (2 >= t1)
      throw $.ioore(2);
    result[2] = 0;
    return result;
  },
  _next$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._next$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._next$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _next$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 1));
    }
  },
  _linkLast$1: function(offset) {
    var last, t1;
    last = $.$index$asx(this._table, 2);
    t1 = $.getInterceptor$ns(offset);
    $.$indexSet$ax(this._table, t1.$add(offset, 1), 0);
    $.$indexSet$ax(this._table, t1.$add(offset, 2), last);
    $.$indexSet$ax(this._table, $.$add$ns(last, 1), offset);
    $.$indexSet$ax(this._table, 2, offset);
  },
  _unlink$1: function(offset) {
    var t1, next, prev;
    t1 = $.getInterceptor$ns(offset);
    next = $.$index$asx(this._table, t1.$add(offset, 1));
    prev = $.$index$asx(this._table, t1.$add(offset, 2));
    $.$indexSet$ax(this._table, t1.$add(offset, 1), null);
    $.$indexSet$ax(this._table, t1.$add(offset, 2), null);
    $.$indexSet$ax(this._table, $.$add$ns(prev, 1), next);
    $.$indexSet$ax(this._table, $.$add$ns(next, 2), prev);
  },
  _addAllEntries$1: function(oldTable) {
    var t1, offset, object, t2, nextOffset;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout1(1, oldTable);
    t1 = oldTable.length;
    if (1 >= t1)
      throw $.ioore(1);
    offset = oldTable[1];
    if (typeof offset !== "number")
      return this._addAllEntries$1$bailout1(2, oldTable, offset, $.JSArray_methods);
    for (; !$.$eq(offset, 0); offset = nextOffset) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      if (offset < 0 || offset >= t1)
        throw $.ioore(offset);
      object = oldTable[offset];
      t2 = offset + 1;
      if (t2 >= t1)
        throw $.ioore(t2);
      nextOffset = oldTable[t2];
      this._copyEntry$3(oldTable, offset, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout1: function(state0, oldTable, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(oldTable);
        offset = t1.$index(oldTable, 1);
      case 2:
        var t2, object, nextOffset;
        state0 = 0;
        for (; t2 = $.getInterceptor(offset), t2.$eq(offset, 0) !== true; offset = nextOffset) {
          object = t1.$index(oldTable, offset);
          nextOffset = t1.$index(oldTable, t2.$add(offset, 1));
          this._copyEntry$3(oldTable, offset, this._put$1(object));
        }
    }
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry === $.CONSTANT1)
      this._deletedCount = this._deletedCount - 1;
    else if (oldEntry == null)
      this._entryCount = this._entryCount + 1;
    else
      return offset;
    this._recordModification$0();
    if (key == null)
      key = $.CONSTANT2;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(2, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._linkLast$1(offset);
    return offset;
  },
  _put$1$bailout1: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
        if (oldEntry === $.CONSTANT1)
          this._deletedCount = this._deletedCount - 1;
        else if (oldEntry == null)
          this._entryCount = this._entryCount + 1;
        else
          return offset;
        this._recordModification$0();
        if (key == null)
          key = $.CONSTANT2;
        t1 = this._table;
      case 2:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._linkLast$1(offset);
        return offset;
    }
  },
  _deleteEntry$1: function(offset) {
    var key;
    this._unlink$1(offset);
    key = $.CONSTANT1;
    $.$indexSet$ax(this._table, offset, key);
    this._deletedCount = this._deletedCount + 1;
    this._recordModification$0();
  }
};

$$._LinkedHashTableKeyIterable = {"": "Iterable;_table",
  get$iterator: function(_) {
    return $._LinkedHashTableKeyIterator$(this._table);
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableKeyIterator = {"": "_LinkedHashTableIterator;_hashTable,_modificationCount,_offset,_liblib1$_current",
  _getCurrent$1: function(offset) {
    return this._hashTable._key$1(offset);
  }
};

$$._LinkedHashTableValueIterable = {"": "Iterable;_hashTable<,_valueIndex",
  get$iterator: function(_) {
    return $._LinkedHashTableValueIterator$(this._hashTable, this._valueIndex);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableValueIterator = {"": "_LinkedHashTableIterator;_valueIndex,_hashTable,_modificationCount,_offset,_liblib1$_current",
  _getCurrent$1: function(offset) {
    return $.$index$asx(this._hashTable._table, $.$add$ns(offset, this._valueIndex));
  }
};

$$._LinkedHashTableIterator = {"": "Object;_hashTable<",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    t2 = this._offset;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(1, t1, t2);
    if (t2 === 0) {
      this._liblib1$_current = null;
      return false;
    }
    this._liblib1$_current = this._getCurrent$1(t2);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t2) {
    if ($.$eq(t2, 0) === true) {
      this._liblib1$_current = null;
      return false;
    }
    this._liblib1$_current = this._getCurrent$1(this._offset);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$.ListQueue = {"": "Collection;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, i0, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
  },
  get$first: function(_) {
    var t1, t2;
    t1 = this._head;
    if (t1 === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    t2 = this._table;
    if (t1 < 0 || t1 >= t2.length)
      throw $.ioore(t1);
    return t2[t1];
  },
  toList$1$growable: function(_, growable) {
    var t1, list;
    if (growable) {
      t1 = this.get$length(this);
      list = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
      $.JSArray_methods.set$length(list, t1);
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(this, element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || elements.$isList())) {
      addCount = $.get$length$asx(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw $.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.JSArray_methods.setRange$4(this._table, $length, addCount, elements, 0);
        this._tail = $.$add$ns(this._tail, addCount);
      } else {
        t1 = this._tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.JSArray_methods.setRange$4(t2, t1, addCount, elements, 0);
          this._tail = $.$add$ns(this._tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.JSArray_methods.setRange$4(t2, t1, endSpace, elements, 0);
          $.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0();)
        this._add$1(this, t1.get$current());
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  addLast$1: function(_, element) {
    this._add$1(this, element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _checkModification$1: function(expectedModificationCount) {
    if (typeof expectedModificationCount !== "number")
      return this._checkModification$1$bailout(1, expectedModificationCount);
    if (expectedModificationCount !== this._modificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _checkModification$1$bailout: function(state0, expectedModificationCount) {
    if ($.$eq(expectedModificationCount, this._modificationCount) !== true)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _add$1: function(_, element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, this._table.length - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.JSInt_methods.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$sub$n(this._tail, t2);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t1, t2);
      $.JSArray_methods.setRange$4(target, firstPartSize, this._tail, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount), $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asCollection: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  }
};

$$._ListQueueIterator = {"": "Object;_queue,_liblib1$_end,_modificationCount,_liblib1$_position,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    t2 = this._liblib1$_position;
    if (t2 === this._liblib1$_end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(_, elements) {
    var t1;
    for (t1 = $.get$iterator$ax(elements); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  }
};

$$.DateTime = {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDateTime))
      return false;
    return $.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) && $.$eq(this.isUtc, other.isUtc) === true;
  },
  $lt: function(_, other) {
    return $.$lt$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $le: function(_, other) {
    return $.$le$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $gt: function(_, other) {
    return $.$gt$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $ge: function(_, other) {
    return $.$ge$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_fourDigits();
    t2 = new $.DateTime_toString_threeDigits();
    t3 = new $.DateTime_toString_twoDigits();
    y = t1.call$1(this.get$year());
    m = t3.call$1(this.get$month());
    d = t3.call$1(this.get$day());
    h = t3.call$1(this.get$hour());
    min = t3.call$1(this.get$minute());
    sec = t3.call$1(this.get$second());
    ms = t2.call$1(this.get$millisecond());
    if (this.isUtc === true)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    return $.DateTime$fromMillisecondsSinceEpoch($.$add$ns(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
  },
  difference$1: function(other) {
    return $.Duration$(0, 0, 0, $.$sub$n(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch), 0, 0);
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.$$throw($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.$$throw($.ArgumentError$(isUtc));
  },
  $isDateTime: true
};

$$.DateTime_toString_fourDigits = {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) ? "-" : "";
    if (absN >= 1000)
      return $.S(n);
    if (absN >= 100)
      return sign + "0" + $.S(absN);
    if (absN >= 10)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  }
};

$$.DateTime_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return $.S(n);
    if (t1.$ge(n, 10))
      return "0" + $.S(n);
    return "00" + $.S(n);
  }
};

$$.DateTime_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inHours: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDuration))
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_sixDigits();
    t2 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = t2.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60));
    sixDigitUs = t1.call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; $.$lt$n(t1.i_1, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0)) {
        t3 = t1.sb_0;
        t3.write$1(t3, ", ");
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t3.write$1(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
    else {
      t3 = t1.sb_0;
      actualParameters = t3.toString$0(t3);
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; $.JSNumber_methods.$lt(i, $.JSNull_methods.get$length(t2)); ++i) {
        if (i > 0) {
          t3 = t1.sb_0;
          t3.write$1(t3, ", ");
        }
        t3 = t1.sb_0;
        t3.write$1(t3, $.JSNull_methods.$index(t2, i));
      }
      t1 = t1.sb_0;
      formalParameters = t1.toString$0(t1);
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + actualParameters + ")\n" + "Found: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true
};

$$.Iterable = {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this["$asIterable"], 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw $.$$throw($.StateError$("No elements"));
    return it.get$current();
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(receiver)) + "'";
  }
};

$$.Stopwatch = {"": "Object;_start,_stop",
  start$0: function(_) {
    if (this.get$isRunning())
      return;
    if (this._start == null)
      this._start = $.Primitives_numMicroseconds();
    else {
      this._start = $.Primitives_numMicroseconds() - $.$sub$n(this._stop, this._start);
      this._stop = null;
    }
  },
  reset$0: function(_) {
    if (this._start == null)
      return;
    this._start = $.Primitives_numMicroseconds();
    if (this._stop != null)
      this._stop = this._start;
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    return t2 == null ? $.$sub$n($.Stopwatch__now(), this._start) : $.$sub$n(t2, t1);
  },
  get$elapsedMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this.get$elapsedTicks() * 1000, this.get$frequency(this));
  },
  get$frequency: function(_) {
    return $.Stopwatch__frequency();
  },
  get$isRunning: function() {
    return this._start != null && this._stop == null;
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(_, obj) {
    var str;
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    str = obj;
    this._contents = this._contents + str;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeln$1: function(obj) {
    this.write$1(this, obj);
    this.write$1(this, "\n");
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$._ChildrenElementList = {"": "Object;_element,_childElements",
  toList$1$growable: function(_, growable) {
    var t1, output, len, t2, i, t3;
    t1 = this._childElements;
    if (growable) {
      output = [];
      $.JSArray_methods.set$length(output, $.get$length$asx(t1));
    } else {
      output = $.List_List($.get$length$asx(t1), $.Element);
      $.setRuntimeTypeInfo(output, [$.Element]);
    }
    for (t1 = this._childElements, len = $.get$length$asx(t1), t2 = $.getInterceptor$asx(t1), i = 0; i < len; ++i) {
      t3 = t2.$index(t1, i);
      if (i >= output.length)
        throw $.ioore(i);
      output[i] = t3;
    }
    return output;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = $.get$iterator$ax(this._childElements); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  get$length: function(_) {
    return $.get$length$asx(this._childElements);
  },
  $index: function(_, index) {
    return $.$index$asx(this._childElements, index);
  },
  $indexSet: function(_, index, value) {
    $.$$dom_replaceChild$2$x(this._element, value, $.$index$asx(this._childElements, index));
  },
  add$1: function(_, value) {
    $.append$1$x(this._element, value);
    return value;
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2, t3;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
      iterable = $.List_List$from(iterable, true, null);
    for (t1 = $.get$iterator$ax(iterable), t2 = this._element, t3 = $.getInterceptor$x(t2); t1.moveNext$0();)
      t3.append$1(t2, t1.get$current());
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      end = this.get$length(this);
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.$$dom_removeChild$1$x(this._element, result);
    return result;
  },
  get$first: function(_) {
    var result = this._element.firstElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Element);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    return $.get$length$asx(this._nodeList);
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function(_) {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  sublist$2: function(_, start, end) {
    return $._FrozenElementList$_wrap($.sublist$2$ax(this._nodeList, start, end));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.indexOf$2$asx(this._nodeList, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$first: function(_) {
    return $.get$first$ax(this._nodeList);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementListIterator = {"": "Object;_list,_liblib2$_index,_current",
  moveNext$0: function() {
    var t1, nextIndex, t2;
    t1 = this._liblib2$_index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextIndex = t1 + 1;
    t1 = this._list;
    t2 = t1.get$length(t1);
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, t2, nextIndex);
    if (nextIndex < t2) {
      this._current = t1.$index(t1, nextIndex);
      this._liblib2$_index = nextIndex;
      return true;
    }
    this._liblib2$_index = t1.get$length(t1);
    this._current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, t2, nextIndex) {
    switch (state0) {
      case 0:
        t1 = this._liblib2$_index;
      case 1:
        state0 = 0;
        nextIndex = $.$add$ns(t1, 1);
        t1 = this._list;
        t2 = t1.get$length(t1);
      case 2:
        state0 = 0;
        if ($.$lt$n(nextIndex, t2)) {
          this._current = t1.$index(t1, nextIndex);
          this._liblib2$_index = nextIndex;
          return true;
        }
        this._liblib2$_index = t1.get$length(t1);
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.Entry_remove_anon = {"": "Closure;completer_0",
  call$0: function() {
    var t1 = this.completer_0;
    t1.complete$0(t1);
  }
};

$$.Entry_remove_anon0 = {"": "Closure;completer_1",
  call$1: function(error) {
    this.completer_1.completeError$1(error);
  }
};

$$.HttpRequest_getString_anon = {"": "Closure;",
  call$1: function(xhr) {
    return $.get$responseText$x(xhr);
  }
};

$$.HttpRequest_request_anon = {"": "Closure;completer_0,xhr_1",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_1;
    if (!($.$ge$n(t1.status, 200) && $.$lt$n(t1.status, 300))) {
      t2 = t1.status;
      t2 = t2 === 0 || t2 === 304;
    } else
      t2 = true;
    t3 = this.completer_0;
    if (t2)
      t3.complete$1(t3, t1);
    else
      t3.completeError$1(e);
  }
};

$$.HttpRequest_request_anon0 = {"": "Closure;completer_2",
  call$1: function(e) {
    this.completer_2.completeError$1(e);
  }
};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$first: function(_) {
    var result = this._this.firstChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    $.append$1$x(this._this, value);
  },
  addAll$1: function(_, iterable) {
    var t1, len, t3, i, t2;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy) {
      t1 = this._this;
      if (iterable._this !== t1) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout(1, iterable, len, t1);
        t3 = $.getInterceptor$x(t1);
        i = 0;
        for (; i < len; ++i)
          t3.append$1(t1, iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this, t3 = $.getInterceptor$x(t2); t1.moveNext$0();)
      t3.append$1(t2, t1.get$current());
  },
  addAll$1$bailout: function(state0, iterable, len, t1) {
    switch (state0) {
      case 0:
      case 1:
        var t3, i, t2;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && iterable._this !== t1)
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    t3 = $.getInterceptor$x(t1);
                    i = 0;
                    for (; $.JSNumber_methods.$lt(i, len); ++i)
                      t3.append$1(t1, iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$ax(iterable), t2 = this._this, t3 = $.getInterceptor$x(t2); t1.moveNext$0();)
          t3.append$1(t2, t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.$$dom_removeChild$1$x(this._this, result);
    return result;
  },
  $indexSet: function(_, index, value) {
    var t1 = this._this;
    $.$$dom_replaceChild$2$x(t1, value, $.$index$asx(t1.childNodes, index));
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this._this.childNodes);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      $.$eq(end, this.get$length(this));
    return $.Lists_getRange(this, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$length: function(_) {
    return $.get$length$asx(this._this.childNodes);
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $is_ChildNodeListLazy: true,
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    return this.keys_0.push(k);
  }
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    return this.values_0.push(v);
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  $asStream: null
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function(_) {
    var t1;
    if (this.get$_canceled())
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  onError$1: function(_, handleError) {
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    if (this._onData != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, this._onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$.Rect = {"": "Object;left>,top>,width>,height>",
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && other.$isRect()))
      return false;
    t1 = $.getInterceptor$x(other);
    return this.left === t1.get$left(other) && this.top === t1.get$top(other) && $.$eq(this.width, t1.get$width(other)) === true && $.$eq(this.height, t1.get$height(other)) === true;
  },
  toInt$0: function(_) {
    return $.Rect$($.JSNumber_methods.toInt$0(this.left), $.JSNumber_methods.toInt$0(this.top), $.toInt$0$nx(this.width), $.toInt$0$nx(this.height));
  },
  $isRect: function() {
    return true;
  },
  $asRect: function() {
    return null;
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window"};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._length;
      case 2:
        state0 = 0;
        if ($.$lt$n(nextPosition, t1)) {
          this._current = $.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  }
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!e.$isDateTime)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (typeof e === "object" && e !== null && !!e.$isRegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && e.$isFile())
      return e;
    if (typeof e === "object" && e !== null && e.$isBlob())
      return e;
    if (typeof e === "object" && e !== null && e.$isFileList())
      return e;
    if (typeof e === "object" && e !== null && e.$isImageData())
      return e;
    if (typeof e === "object" && e !== null && e.$isArrayBuffer())
      return e;
    if (typeof e === "object" && e !== null && e.$isArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && e.$isMap()) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || e.$isList())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(1, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!(e.immutable$list);
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; i < $length; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (elementCopy == null ? element != null : elementCopy !== element) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array($length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.$isJavaScriptIndexingBehavior())
              return this.call$1$bailout(2, e, t3, elementCopy, $.JSArray_methods, copy0, $length, slot, t2, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array($length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(3, e, 0, 0, $.JSArray_methods, 0, $length, 0, 0, copy, i);
      for (; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, t4, elementCopy, t2, copy0, $length, slot, t3, copy, i) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!e.$isDateTime)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (typeof e === "object" && e !== null && !!e.$isRegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && e.$isFile())
          return e;
        if (typeof e === "object" && e !== null && e.$isBlob())
          return e;
        if (typeof e === "object" && e !== null && e.$isFileList())
          return e;
        if (typeof e === "object" && e !== null && e.$isImageData())
          return e;
        if (typeof e === "object" && e !== null && e.$isArrayBuffer())
          return e;
        if (typeof e === "object" && e !== null && e.$isArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && e.$isMap()) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t1, element, j;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || e.$isList()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$asx(e);
              $length = t2.get$length(e);
              slot = this.findSlot_5.call$1(e);
              t3 = this.readSlot_6;
              copy = t3.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!(e.immutable$list);
              t4 = this.writeSlot_7;
            case 2:
              if (state0 === 2 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t4.call$2(slot, true);
                    i = 0;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.JSNumber_methods.$lt(i, $length))
                              break L0;
                            element = t2.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 2:
                            if (state0 === 2 || state0 === 0 && (elementCopy == null ? element != null : elementCopy !== element))
                              switch (state0) {
                                case 0:
                                  copy0 = t3.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array($length);
                                    t4.call$2(slot, copy0);
                                  }
                                case 2:
                                  state0 = 0;
                                  for (t1 = $.getInterceptor$ax(copy0), j = 0; j < i; ++j)
                                    t1.$indexSet(copy0, j, t2.$index(e, j));
                                  t1.$indexSet(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t4.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array($length);
                t4.call$2(slot, copy);
                i = 0;
              }
            case 3:
              state0 = 0;
              for (t1 = $.getInterceptor$ax(copy); $.JSNumber_methods.$lt(i, $length); ++i)
                t1.$indexSet(copy, i, this.call$1(t2.$index(e, i)));
              return copy;
          }
        throw $.$$throw($.UnimplementedError$("structured clone of other type"));
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  }
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  }
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  }
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  }
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        t2 = t1.get$current();
        copy.$indexSet(copy, t2, this.call$1(e[t2]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(2, e, $length, copy, $.JSArray_methods, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, $length, copy, t1, slot) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            t2 = t1.get$current();
            copy.$indexSet(copy, t2, this.call$1(e[t2]));
          }
          return copy;
        }
      case 2:
        var t2, i;
        if (state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              $length = t1.get$length(e);
              copy = this.mustCopy_4 ? new Array($length) : e;
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$ax(copy), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  }
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_anon()), true, $.Element);
  },
  forEach$1: function(_, f) {
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  add$1: function(_, value) {
    var t1 = this._childNodes;
    t1.add$1(t1, value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes; t1.moveNext$0();)
      t2.add$1(t2, t1.get$current());
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Element);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.get$_filtered());
  },
  sublist$2: function(_, start, end) {
    return $.JSArray_methods.sublist$2(this.get$_filtered(), start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.JSArray_methods.indexOf$2(this.get$_filtered(), element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(_) {
    return $.JSArray_methods.get$first(this.get$_filtered());
  },
  get$last: function(_) {
    return $.JSArray_methods.get$last(this.get$_filtered());
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.$isElement();
  }
};

$$._completeRequest_anon = {"": "Closure;request_0,completer_1",
  call$1: function(e) {
    var t1 = this.completer_1;
    t1.complete$1(t1, $.get$result$x(this.request_0));
  }
};

$$._completeRequest_anon0 = {"": "Closure;completer_2",
  call$1: function(e) {
    this.completer_2.completeError$1(e);
  }
};

$$.JsonUnsupportedObjectError = {"": "Object;unsupportedObject,cause<",
  toString$0: function(_) {
    if (this.cause != null)
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  }
};

$$._JsonStringifier = {"": "Object;sb<,seen",
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw $.$$throw("Cyclic structure");
    }
    t1.push(object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!this.stringifyJsonValue$1(object)) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!this.stringifyJsonValue$1(customJson))
          throw $.$$throw($.JsonUnsupportedObjectError$(object));
        t1 = this.seen;
        if (0 >= t1.length)
          throw $.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        throw $.$$throw($.JsonUnsupportedObjectError$withCause(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i;
    t1 = {};
    if (typeof object === "number") {
      t1 = this.sb;
      t1.write$1(t1, $.JSNumber_methods.toString$0(object));
      return true;
    } else if (object === true) {
      t1 = this.sb;
      t1.write$1(t1, "true");
      return true;
    } else if (object === false) {
      t1 = this.sb;
      t1.write$1(t1, "false");
      return true;
    } else if (object == null) {
      t1 = this.sb;
      t1.write$1(t1, "null");
      return true;
    } else if (typeof object === "string") {
      t1 = this.sb;
      t1.write$1(t1, "\"");
      $._JsonStringifier_escape(t1, object);
      t1.write$1(t1, "\"");
      return true;
    } else if (typeof object === "object" && object !== null && (object.constructor === Array || object.$isList())) {
      if (typeof object !== "string" && (typeof object !== "object" || object === null || object.constructor !== Array && !object.$isJavaScriptIndexingBehavior()))
        return this.stringifyJsonValue$1$bailout(1, object);
      this.checkCycle$1(object);
      t2 = this.sb;
      t2.write$1(t2, "[");
      if (object.length > 0) {
        this.stringifyValue$1(object[0]);
        for (i = 1; i < object.length; ++i) {
          t2.write$1(t2, ",");
          if (i >= object.length)
            throw $.ioore(i);
          this.stringifyValue$1(object[i]);
        }
      }
      t2.write$1(t2, "]");
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else if (typeof object === "object" && object !== null && object.$isMap()) {
      this.checkCycle$1(object);
      t2 = this.sb;
      t2.write$1(t2, "{");
      t1.first_0 = true;
      $.forEach$1$ax(object, new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
      t2.write$1(t2, "}");
      t2 = this.seen;
      if (0 >= t2.length)
        throw $.ioore(0);
      t2.pop();
      return true;
    } else
      return false;
  },
  stringifyJsonValue$1$bailout: function(state0, object) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, t2, i;
        if (state0 === 0 && typeof object === "number") {
          t1 = this.sb;
          t1.write$1(t1, $.JSNumber_methods.toString$0(object));
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                t1 = this.sb;
                t1.write$1(t1, "true");
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      t1 = this.sb;
                      t1.write$1(t1, "false");
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            t1 = this.sb;
                            t1.write$1(t1, "null");
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sb;
                                  t1.write$1(t1, "\"");
                                  $._JsonStringifier_escape(t1, object);
                                  t1.write$1(t1, "\"");
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || object.$isList()))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t2 = this.sb;
                                            t2.write$1(t2, "[");
                                            t1 = $.getInterceptor$asx(object);
                                            if ($.$gt$n(t1.get$length(object), 0)) {
                                              this.stringifyValue$1(t1.$index(object, 0));
                                              for (i = 1; $.JSNumber_methods.$lt(i, t1.get$length(object)); ++i) {
                                                t2.write$1(t2, ",");
                                                this.stringifyValue$1(t1.$index(object, i));
                                              }
                                            }
                                            t2.write$1(t2, "]");
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw $.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && object.$isMap()) {
                                        this.checkCycle$1(object);
                                        t2 = this.sb;
                                        t2.write$1(t2, "{");
                                        t1.first_0 = true;
                                        $.forEach$1$ax(object, new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
                                        t2.write$1(t2, "}");
                                        t2 = this.seen;
                                        if (0 >= t2.length)
                                          throw $.ioore(0);
                                        t2.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  }
};

$$._JsonStringifier_stringifyJsonValue_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.first_0;
    t3 = this.this_1;
    if (!t2) {
      t2 = t3.get$sb();
      t2.write$1(t2, ",\"");
    } else {
      t2 = t3.get$sb();
      t2.write$1(t2, "\"");
    }
    t2 = this.this_1;
    $._JsonStringifier_escape(t2.get$sb(), key);
    t3 = t2.get$sb();
    t3.write$1(t3, "\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  }
};

$$.Utf8Decoder = {"": "Object;utf8EncodedBytesIterator,replacementCodepoint,_liblib3$_current",
  decodeRest$0: function() {
    var codepoints, t1, i, i0, t2, truncCodepoints;
    codepoints = $.List_List(this.utf8EncodedBytesIterator.get$remaining(), $.$int);
    $.setRuntimeTypeInfo(codepoints, [$.$int]);
    for (t1 = codepoints.length, i = 0; this.moveNext$0(); i = i0) {
      i0 = i + 1;
      t2 = this.get$current();
      if (i >= t1)
        throw $.ioore(i);
      codepoints[i] = t2;
    }
    if (i === t1)
      return codepoints;
    else {
      truncCodepoints = $.List_List(i, $.$int);
      $.setRuntimeTypeInfo(truncCodepoints, [$.$int]);
      $.JSArray_methods.setRange$3(truncCodepoints, 0, i, codepoints);
      return truncCodepoints;
    }
  },
  get$current: function() {
    return this._liblib3$_current;
  },
  moveNext$0: function() {
    var t1, value, additionalBytes, j, nextValue, value0, validSequence, t2, nonOverlong, inRange;
    this._liblib3$_current = null;
    t1 = this.utf8EncodedBytesIterator;
    if (!t1.moveNext$0())
      return false;
    value = t1.get$current();
    if (typeof value !== "number")
      return this.moveNext$0$bailout(1, value, t1);
    if (value < 0) {
      this._liblib3$_current = this.replacementCodepoint;
      return true;
    } else if (value <= 127) {
      this._liblib3$_current = value;
      return true;
    } else if (value < 192) {
      this._liblib3$_current = this.replacementCodepoint;
      return true;
    } else if (value < 224) {
      value -= 192;
      additionalBytes = 1;
    } else if (value < 240) {
      value -= 224;
      additionalBytes = 2;
    } else if (value < 248) {
      value -= 240;
      additionalBytes = 3;
    } else if (value < 252) {
      value -= 248;
      additionalBytes = 4;
    } else {
      if (value < 254)
        value -= 252;
      else {
        this._liblib3$_current = this.replacementCodepoint;
        return true;
      }
      additionalBytes = 5;
    }
    j = 0;
    while (true) {
      if (!(j < additionalBytes && t1.moveNext$0()))
        break;
      nextValue = t1.get$current();
      if (typeof nextValue !== "number")
        return this.moveNext$0$bailout(2, value, t1, nextValue, j, additionalBytes);
      if (nextValue > 127 && nextValue < 192)
        value0 = (value << 6 | nextValue & 63) >>> 0;
      else {
        if (nextValue >= 192)
          t1.backup$0();
        break;
      }
      ++j;
      value = value0;
    }
    if (j === additionalBytes)
      validSequence = value < 55296 || value > 57343;
    else
      validSequence = false;
    if (!(additionalBytes === 1 && value > 127))
      if (!(additionalBytes === 2 && value > 2047)) {
        t2 = additionalBytes === 3 && value > 65535;
        nonOverlong = t2;
      } else
        nonOverlong = true;
    else
      nonOverlong = true;
    inRange = value <= 1114111;
    if (validSequence && nonOverlong && inRange) {
      this._liblib3$_current = value;
      return true;
    } else {
      this._liblib3$_current = this.replacementCodepoint;
      return true;
    }
  },
  moveNext$0$bailout: function(state0, value, t1, nextValue, j, additionalBytes) {
    switch (state0) {
      case 0:
        this._liblib3$_current = null;
        t1 = this.utf8EncodedBytesIterator;
        if (!t1.moveNext$0())
          return false;
        value = t1.get$current();
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$n(value);
        if (t2.$lt(value, 0)) {
          this._liblib3$_current = this.replacementCodepoint;
          return true;
        } else if (t2.$le(value, 127)) {
          this._liblib3$_current = value;
          return true;
        } else if (t2.$lt(value, 192)) {
          this._liblib3$_current = this.replacementCodepoint;
          return true;
        } else if (t2.$lt(value, 224)) {
          value = t2.$sub(value, 192);
          additionalBytes = 1;
        } else if (t2.$lt(value, 240)) {
          value = t2.$sub(value, 224);
          additionalBytes = 2;
        } else if (t2.$lt(value, 248)) {
          value = t2.$sub(value, 240);
          additionalBytes = 3;
        } else if (t2.$lt(value, 252)) {
          value = t2.$sub(value, 248);
          additionalBytes = 4;
        } else {
          if (t2.$lt(value, 254))
            value = t2.$sub(value, 252);
          else {
            this._liblib3$_current = this.replacementCodepoint;
            return true;
          }
          additionalBytes = 5;
        }
        j = 0;
      case 2:
        var t2, value0, validSequence, nonOverlong, inRange;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(j < additionalBytes && t1.moveNext$0()))
                  break L0;
                nextValue = t1.get$current();
              case 2:
                state0 = 0;
                t2 = $.getInterceptor$n(nextValue);
                if (t2.$gt(nextValue, 127) && t2.$lt(nextValue, 192))
                  value0 = ($.$shl$n(value, 6) | t2.$and(nextValue, 63)) >>> 0;
                else {
                  if (t2.$ge(nextValue, 192))
                    t1.backup$0();
                  break L0;
                }
                ++j;
                value = value0;
            }
        if (j === additionalBytes) {
          t2 = $.getInterceptor$n(value);
          validSequence = t2.$lt(value, 55296) || t2.$gt(value, 57343);
        } else
          validSequence = false;
        if (!(additionalBytes === 1 && $.$gt$n(value, 127)))
          if (!(additionalBytes === 2 && $.$gt$n(value, 2047))) {
            t2 = additionalBytes === 3 && $.$gt$n(value, 65535);
            nonOverlong = t2;
          } else
            nonOverlong = true;
        else
          nonOverlong = true;
        inRange = $.$le$n(value, 1114111);
        if (validSequence && nonOverlong && inRange) {
          this._liblib3$_current = value;
          return true;
        } else {
          this._liblib3$_current = this.replacementCodepoint;
          return true;
        }
    }
  }
};

$$._ListRange = {"": "Iterable;_source,_liblib3$_offset,_liblib3$_length",
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._liblib3$_offset;
    t2 = this._liblib3$_length;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return $._ListRangeIteratorImpl$(this._source, t1, t1 + t2);
  },
  get$length: function(_) {
    return this._liblib3$_length;
  },
  _ListRange$3: function(source, offset, $length) {
    var t1, t2, t3;
    t1 = this._liblib3$_offset;
    if (t1 < 0 || t1 > this._source.length)
      throw $.$$throw($.RangeError$value(t1));
    t2 = this._liblib3$_length;
    if (t2 != null && $.$lt$n(t2, 0))
      throw $.$$throw($.RangeError$value(t2));
    t3 = $.getInterceptor$ns(t2);
    if (t3.$add(t2, t1) > this._source.length)
      throw $.$$throw($.RangeError$value(t3.$add(t2, t1)));
  }
};

$$._ListRangeIteratorImpl = {"": "Object;_source,_liblib3$_offset,_end",
  get$current: function() {
    var t1, t2;
    t1 = this._source;
    t2 = this._liblib3$_offset;
    if (t2 !== (t2 | 0))
      return this.get$current$bailout(1, t1, t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  get$current$bailout: function(state0, t1, t2) {
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  moveNext$0: function() {
    var t1 = this._liblib3$_offset + 1;
    this._liblib3$_offset = t1;
    return t1 < this._end;
  },
  backup$1: function(by) {
    this._liblib3$_offset = this._liblib3$_offset - by;
  },
  backup$0: function() {
    return this.backup$1(1);
  },
  get$remaining: function() {
    return this._end - this._liblib3$_offset - 1;
  }
};

$$.Model = {"": "Object;instanceList,vertexPositionBuffer<,vertexIndexBuffer<,vertexPositionBufferItemSize<,vertexIndexBufferItemSize<,vertexIndexLength<",
  drawInstances$0: function() {
    $.JSArray_methods.forEach$1(this.instanceList, new $.Model_drawInstances_anon());
  },
  Model$3: function(gl, vertCoord, vertInd) {
    var t1 = $.getInterceptor$x(gl);
    this.vertexPositionBuffer = t1.createBuffer$0(gl);
    t1.bindBuffer$2(gl, 34962, this.vertexPositionBuffer);
    t1.bufferData$3(gl, 34962, $.Float32Array_Float32Array$fromList(vertCoord), 35044);
    this.vertexPositionBufferItemSize = 3;
    this.vertexIndexBuffer = t1.createBuffer$0(gl);
    t1.bindBuffer$2(gl, 34963, this.vertexIndexBuffer);
    t1.bufferData$3(gl, 34963, $.Uint16Array_Uint16Array$fromList(vertInd), 35044);
    this.vertexIndexBufferItemSize = 2;
    this.vertexIndexLength = $.get$length$asx(vertInd);
    $.print("Model: vertex index length: " + $.S(this.vertexIndexLength));
    t1.bindBuffer$2(gl, 34962, null);
    t1.bindBuffer$2(gl, 34963, null);
  }
};

$$.Model_drawInstances_anon = {"": "Closure;",
  call$1: function(i) {
    return i.draw$0();
  }
};

$$.fetchSquare_handleResponse = {"": "Closure;gl_0,jsonUrl_1,deliverSquare_2",
  call$1: function(response) {
    var square, e, exception, t1, vertCoord, vertInd, squareModel;
    $.Primitives_printString("fetched square JSON from URL: " + this.jsonUrl_1 + ": [" + $.S(response) + "]");
    square = null;
    try {
      square = $.parse(response, null);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      $.Primitives_printString("failure parsing square JSON: " + $.S(e));
      return;
    }

    $.Primitives_printString("square JSON parsed: [" + $.S(square) + "]");
    vertCoord = $.$index$asx(square, "vertCoord");
    vertInd = $.$index$asx(square, "vertInd");
    squareModel = $.Model$(this.gl_0, vertCoord, vertInd);
    this.deliverSquare_2.call$1(squareModel);
  }
};

$$.fetchSquare_handleError = {"": "Closure;jsonUrl_3",
  call$1: function(err) {
    $.Primitives_printString("failure fetching square JSON from URL: " + this.jsonUrl_3 + ": " + $.S(err));
  }
};

$$.Cookie__readCookie_anon = {"": "Closure;cookie_0",
  call$1: function(t) {
    var t1, k, t2, t3;
    t1 = $.getInterceptor$asx(t);
    k = t1.indexOf$1(t, "=");
    t2 = $.getInterceptor$n(k);
    if (t2.$gt(k, 0)) {
      t3 = this.cookie_0;
      t3.$indexSet(t3, $._uriDecode(t1.substring$2(t, 0, k)), $._uriDecode(t1.substring$1(t, t2.$add(k, 1))));
    }
  }
};

$$.initDebugLostContext_anon = {"": "Closure;",
  call$1: function(e) {
    $.Primitives_printString("lose context button: FIXME");
  }
};

$$.initDebugLostContext_anon0 = {"": "Closure;",
  call$1: function(e) {
    $.Primitives_printString("restore context button: FIXME");
  }
};

$$.initBuffers_anon = {"": "Closure;",
  call$1: function(square) {
    $.squareModel = square;
    $.Primitives_printString("initBuffers: square model: done");
  }
};

$$.render_anon = {"": "Closure;",
  call$1: function(p) {
    return p.drawModels$0();
  }
};

$$.loop_anon = {"": "Closure;gl_0",
  call$1: function(time) {
    $.loop(this.gl_0);
  }
};

$$.Program = {"": "Object;program?,aVertexPosition@,ready@,modelList",
  drawModels$0: function() {
    $.JSArray_methods.forEach$1(this.modelList, new $.Program_drawModels_anon());
  },
  Program$_load$3: function(gl, vertexShaderURL, fragmentShaderURL, box_0) {
    var t1, requestVert, t2, requestFrag;
    $.print("Program._load: vsUrl=" + vertexShaderURL + " fsURL=" + fragmentShaderURL);
    box_0.vertShaderSrc_0 = null;
    box_0.fragShaderSrc_1 = null;
    t1 = new $.tryCompileShaders(box_0, this, gl);
    requestVert = $.HttpRequest_HttpRequest();
    t2 = $.getInterceptor$x(requestVert);
    t2.open$2(requestVert, "GET", vertexShaderURL);
    t2.get$onLoad(requestVert).listen$1(new $.anon(box_0, t1, requestVert));
    t2.get$onError(requestVert).listen$1(new $.anon0());
    t2.send$0(requestVert);
    requestFrag = $.HttpRequest_HttpRequest();
    t2 = $.getInterceptor$x(requestFrag);
    t2.open$2(requestFrag, "GET", fragmentShaderURL);
    t2.get$onLoad(requestFrag).listen$1(new $.anon1(box_0, t1, requestFrag));
    t2.get$onError(requestFrag).listen$1(new $.anon2());
    t2.send$0(requestFrag);
  }
};

$$.tryCompileShaders = {"": "Closure;box_0,this_1,gl_2",
  call$0: function() {
    var t1, t2, t3, vs, fs, p;
    t1 = this.box_0;
    if (t1.vertShaderSrc_0 == null || t1.fragShaderSrc_1 == null)
      return;
    $.Primitives_printString("shaders: available to compile");
    t2 = this.gl_2;
    t3 = $.getInterceptor$x(t2);
    vs = t3.createShader$1(t2, 35633);
    t3.shaderSource$2(t2, vs, t1.vertShaderSrc_0);
    t3.compileShader$1(t2, vs);
    if (t3.getShaderParameter$2(t2, vs, 35713) !== true && t3.isContextLost$0(t2) !== true) {
      $.Primitives_printString($.toString$0(t3.getShaderInfoLog$1(t2, vs)));
      return;
    }
    fs = t3.createShader$1(t2, 35632);
    t3.shaderSource$2(t2, fs, t1.fragShaderSrc_1);
    t3.compileShader$1(t2, fs);
    if (t3.getShaderParameter$2(t2, fs, 35713) !== true && t3.isContextLost$0(t2) !== true) {
      $.Primitives_printString($.toString$0(t3.getShaderInfoLog$1(t2, fs)));
      return;
    }
    p = t3.createProgram$0(t2);
    t3.attachShader$2(t2, p, vs);
    t3.attachShader$2(t2, p, fs);
    t3.linkProgram$1(t2, p);
    if (t3.getProgramParameter$2(t2, p, 35714) !== true && t3.isContextLost$0(t2) !== true)
      $.Primitives_printString($.toString$0(t3.getProgramInfoLog$1(t2, p)));
    t3.useProgram$1(t2, p);
    t1 = t3.getAttribLocation$2(t2, p, "aVertexPosition");
    t2 = this.this_1;
    t2.set$aVertexPosition(t1);
    t2.set$ready(true);
    $.Primitives_printString("shader program: ready");
    t2.set$program(p);
  }
};

$$.anon = {"": "Closure;box_0,tryCompileShaders_3,requestVert_4",
  call$1: function(e) {
    var t1, response;
    t1 = this.requestVert_4;
    response = t1.responseText;
    if (t1.status !== 200) {
      $.Primitives_printString("vertexShader: error: [" + $.S(response) + "]");
      return;
    }
    $.Primitives_printString("vertexShader: loaded: [" + $.S(response) + "]");
    this.box_0.vertShaderSrc_0 = response;
    this.tryCompileShaders_3.call$0();
  }
};

$$.anon0 = {"": "Closure;",
  call$1: function(e) {
    $.Primitives_printString("vertexShader: error: [" + $.S(e) + "]");
  }
};

$$.anon1 = {"": "Closure;box_0,tryCompileShaders_5,requestFrag_6",
  call$1: function(e) {
    var t1, response;
    t1 = this.requestFrag_6;
    response = t1.responseText;
    if (t1.status !== 200) {
      $.Primitives_printString("fragmentShader: error: [" + $.S(response) + "]");
      return;
    }
    $.Primitives_printString("fragmentShader: loaded: [" + $.S(response) + "]");
    this.box_0.fragShaderSrc_1 = response;
    this.tryCompileShaders_5.call$0();
  }
};

$$.anon2 = {"": "Closure;",
  call$1: function(e) {
    $.Primitives_printString("fragmentShader: error: [" + $.S(e) + "]");
  }
};

$$.Program_drawModels_anon = {"": "Closure;",
  call$1: function(m) {
    return m.drawInstances$0();
  }
};

$$.initWebSocket_anon = {"": "Closure;box_0,wsUri_1,sid_2,status_3",
  call$1: function(e) {
    var t1, msg, jsonMsg;
    t1 = "connected to " + $.S(this.wsUri_1);
    $.set$text$x(this.status_3, t1);
    $.Primitives_printString("websocket: CONNECTED");
    msg = $.HashMap$(null, null);
    msg.$indexSet(msg, "Code", 2);
    msg.$indexSet(msg, "Data", this.sid_2);
    jsonMsg = $._JsonStringifier_stringify(msg);
    t1 = this.box_0.w_1;
    $.Primitives_printString("websocket: sending: [" + jsonMsg + "]");
    $.send$1$x(t1, jsonMsg);
  }
};

$$.initWebSocket_scheduleReconnect = {"": "Closure;box_0,wsUri_4,sid_5,status_6",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.reconnectScheduled_6)
      return;
    $.Primitives_printString("websocket: retrying in " + $.S(t1.retrySeconds_0) + " seconds");
    $.Timer_Timer($.Duration$(0, 0, 0, 0, 0, t1.retrySeconds_0), new $.initWebSocket_scheduleReconnect_anon(t1, this.wsUri_4, this.sid_5, this.status_6));
    t1.reconnectScheduled_6 = true;
  }
};

$$.initWebSocket_scheduleReconnect_anon = {"": "Closure;box_0,wsUri_7,sid_8,status_9",
  call$0: function() {
    return $.initWebSocket(this.wsUri_7, this.sid_8, 2 * this.box_0.retrySeconds_0, this.status_9);
  }
};

$$.initWebSocket_anon0 = {"": "Closure;wsUri_10,status_11,scheduleReconnect_12",
  call$1: function(e) {
    var t1 = "disconnected from " + $.S(this.wsUri_10);
    $.set$text$x(this.status_11, t1);
    $.Primitives_printString("websocket: DISCONNECTED");
    this.scheduleReconnect_12.call$0();
  }
};

$$.initWebSocket_anon1 = {"": "Closure;scheduleReconnect_13",
  call$1: function(e) {
    $.Primitives_printString("websocket: error: [" + $.S($.get$data$x(e)) + "]");
    this.scheduleReconnect_13.call$0();
  }
};

$$.initWebSocket_anon2 = {"": "Closure;box_0,status_14",
  call$1: function(e) {
    var t1, msg, m, t2, t3;
    t1 = $.getInterceptor$x(e);
    $.Primitives_printString("websocket: received: [" + $.S(t1.get$data(e)) + "]");
    msg = $.parse(t1.get$data(e), null);
    t1 = $.getInterceptor$asx(msg);
    if ($.$eq(t1.$index(msg, "Code"), 1) === true && $.startsWith$1$s(t1.$index(msg, "Data"), "welcome")) {
      m = $.HashMap$(null, null);
      m.$indexSet(m, "Code", 3);
      m.$indexSet(m, "Data", "hi there");
      t1 = this.box_0.w_1;
      t2 = $._JsonStringifier_stringify(m);
      $.Primitives_printString("websocket: sending: [" + t2 + "]");
      $.send$1$x(t1, t2);
      return;
    }
    if ($.$eq(t1.$index(msg, "Code"), 4) === true) {
      m = "server killed our session: " + $.S(t1.$index(msg, "Data"));
      $.Primitives_printString(m);
      $.set$text$x(this.status_14, m);
      t2 = this.box_0;
      t3 = t2.subOpen_2;
      t3.cancel$0(t3);
      t3 = t2.subClose_3;
      t3.cancel$0(t3);
      t3 = t2.subMessage_5;
      t3.cancel$0(t3);
      t3 = t2.subError_4;
      t3.cancel$0(t3);
      $.close$0$x(t2.w_1);
      t2.w_1 = null;
      return;
    }
  }
};

$$.Stats = {"": "Object;_timer,_ms,_msMin,_msMax,_fps,_fpsMin,_fpsMax,_frames,_mode,container<,fpsDiv,msDiv,msText,msGraph,fpsGraph,fpsText",
  _onContainerMouseDown$1: function(e) {
    var t1;
    $.preventDefault$0$x(e);
    t1 = $.$add$ns(this.get$mode(this), 1);
    this.set$mode(this, t1);
    this.set$mode(this, $.$mod$n(t1, 2));
  },
  get$_onContainerMouseDown: function() {
    return new $.BoundClosure$1(this, "_onContainerMouseDown$1");
  },
  _createUi$0: function() {
    var t1, t2, t3, bar;
    t1 = $.$$dom_createElement$1$x(document, "div");
    t2 = $.getInterceptor$x(t1);
    t2.set$id(t1, "stats");
    t2.get$onMouseDown(t1).listen$1(this.get$_onContainerMouseDown());
    $.getInterceptor$x(t1.style).cssText = "width:80px;opacity:0.9;cursor:pointer";
    this.container = t1;
    t1 = $.$$dom_createElement$1$x(document, "div");
    $.set$id$x(t1, "fps");
    $.getInterceptor$x(t1.style).cssText = "padding:0 0 3px 3px;text-align:left;background-color:#002";
    this.fpsDiv = t1;
    $.append$1$x(this.container, this.fpsDiv);
    t1 = $.$$dom_createElement$1$x(document, "div");
    t3 = $.getInterceptor$x(t1);
    t3.set$id(t1, "fpsText");
    $.getInterceptor$x(t1.style).cssText = "color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
    t3.textContent = "FPS";
    this.fpsText = t1;
    $.append$1$x(this.fpsDiv, this.fpsText);
    t1 = $.$$dom_createElement$1$x(document, "div");
    $.set$id$x(t1, "fpsGraph");
    $.getInterceptor$x(t1.style).cssText = "position:relative;width:74px;height:30px;background-color:#0ff";
    this.fpsGraph = t1;
    $.append$1$x(this.fpsDiv, this.fpsGraph);
    for (; $.$lt$n($.get$length$asx($.get$children$x(this.fpsGraph)), 74);) {
      bar = $.$$dom_createElement$1$x(document, "span");
      $.getInterceptor$x(bar.style).cssText = "width:1px;height:30px;float:left;background-color:#113";
      $.append$1$x(this.fpsGraph, bar);
    }
    t1 = $.$$dom_createElement$1$x(document, "div");
    $.set$id$x(t1, "ms");
    $.getInterceptor$x(t1.style).cssText = "padding:0 0 3px 3px;text-align:left;background-color:#020;display:none";
    this.msDiv = t1;
    $.append$1$x(this.container, this.msDiv);
    t1 = $.$$dom_createElement$1$x(document, "div");
    t2 = $.getInterceptor$x(t1);
    t2.set$id(t1, "msText");
    $.getInterceptor$x(t1.style).cssText = "color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
    t2.textContent = "MS";
    this.msText = t1;
    $.append$1$x(this.msDiv, this.msText);
    t1 = $.$$dom_createElement$1$x(document, "div");
    $.set$id$x(t1, "msGraph");
    $.getInterceptor$x(t1.style).cssText = "position:relative;width:74px;height:30px;background-color:#0f0";
    this.msGraph = t1;
    $.append$1$x(this.msDiv, this.msGraph);
    for (; $.$lt$n($.get$length$asx($.get$children$x(this.msGraph)), 74);) {
      bar = $.$$dom_createElement$1$x(document, "span");
      $.getInterceptor$x(bar.style).cssText = "width:1px;height:30px;float:left;background-color:#131";
      $.append$1$x(this.msGraph, bar);
    }
  },
  set$mode: function(_, value) {
    if (!$.$eq(this._mode, value)) {
      this._mode = value;
      switch (this.get$mode(this)) {
        case 0:
          $.set$display$x(this.fpsDiv.style, "block");
          $.set$display$x(this.msDiv.style, "none");
          break;
        case 1:
          $.set$display$x(this.fpsDiv.style, "none");
          $.set$display$x(this.msDiv.style, "block");
          break;
      }
    }
  },
  get$mode: function(_) {
    return this._mode;
  },
  updateGraph$2: function(element, value) {
    var t1, first, t2;
    t1 = $.getInterceptor$x(element);
    first = $.get$first$ax(t1.get$children(element));
    $.add$1$ax(t1.get$children(element), first);
    t2 = $.S($.toInt$0$nx(value)) + "px";
    $.set$height$x($.get$style$x(first), t2);
  },
  begin$0: function() {
    var t1 = this._timer;
    t1.start$0(t1);
  },
  end$0: function(_) {
    var t1, time, t2;
    t1 = this._timer;
    time = t1.get$elapsedMilliseconds();
    this._ms = t1.get$elapsedMilliseconds();
    this._msMin = $.min(this._msMin, this._ms);
    this._msMax = $.max(this._msMax, this._ms);
    t2 = $.S(this._ms) + " MS (" + $.S(this._msMin) + " - " + $.S(this._msMax) + ")";
    $.getInterceptor$x(this.msText).textContent = t2;
    this.updateGraph$2(this.msGraph, $.min(30, 30 - this._ms / 200 * 30));
    this._frames = this._frames + 1;
    if (time > 1000) {
      this._fps = $.JSNumber_methods.toInt$0($.JSDouble_methods.round$0(this._frames * 1000 / this._ms));
      this._fpsMin = $.min(this._fpsMin, this._fps);
      this._fpsMax = $.max(this._fpsMax, this._fps);
      t2 = $.S(this._fps) + " FPS (" + $.S(this._fpsMin) + " - " + $.S(this._fpsMax) + ")";
      $.getInterceptor$x(this.fpsText).textContent = t2;
      this.updateGraph$2(this.fpsGraph, $.min(30, 30 - this._fps / 100 * 30));
      t1.reset$0(t1);
      this._frames = 0;
    }
    return time;
  },
  Stats$0: function() {
    this._createUi$0();
  }
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
};

// Bound closures
$$.BoundClosure$i0 = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !src.$isJavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart) {
    if (typeof count !== "number")
      throw $.iae(count);
    i = srcStart + count - 1;
    j = dstStart + count - 1;
    t1 = src.length;
    t2 = dst.length;
    for (; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  } else {
    t1 = src.length;
    t2 = dst.length;
    j = dstStart;
    i = srcStart;
    while (true) {
      if (typeof count !== "number")
        throw $.iae(count);
      if (!(i < srcStart + count))
        break;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
      ++i;
      ++j;
    }
  }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if ($.JSNumber_methods.$lt(srcStart, dstStart)) {
    if (typeof count !== "number")
      throw $.iae(count);
    i = srcStart + count - 1;
    j = $.$sub$n($.$add$ns(dstStart, count), 1);
    t1 = $.getInterceptor$asx(src);
    for (; i >= srcStart; --i, j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  } else {
    t1 = $.getInterceptor$asx(src);
    j = dstStart;
    i = srcStart;
    while (true) {
      if (typeof count !== "number")
        throw $.iae(count);
      if (!(i < srcStart + count))
        break;
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
      ++i;
      j = $.$add$ns(j, 1);
    }
  }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex !== (startIndex | 0))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$n(startIndex);
  if (t1.$ge(startIndex, a.length))
    return -1;
  if (t1.$lt(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.$lt$n(i, endIndex); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, iterable.length, 0, null);
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.ToString_collectionToString = function(c) {
  var result = $.StringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List($, null));
  return result.toString$0(result);
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, t2);
  for (t2 = $.get$iterator$ax(c), first = true; t2.moveNext$0(); first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.write$1(result, ", ");
    $.ToString__emitObject(t4, result, visiting);
  }
  t3.write$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.$isMap())
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, "{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    $.write$1$x(result, o);
};

$.ToString__containsRef = function(c, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(c); t1.moveNext$0();)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.StringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List($, null));
  return result.toString$0(result);
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, "{");
  t1.first_0 = true;
  $.forEach$1$ax(m, new $.ToString__emitMap_anon(t1, result, visiting));
  t3.write$1(result, "}");
  t2.removeLast$0(visiting);
};

$.getInterceptor = function(object) {
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.$$throw($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $globalState.currentManagerId = t2;
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  $.send$2$x(replyTo, "spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, t2, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  t1 = $.getInterceptor$x(worker);
  t1.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t2 = $globalState;
  workerId = t2.nextManagerId;
  t2.nextManagerId = workerId + 1;
  t1.set$id(worker, workerId);
  t2 = $globalState.managers;
  t2.$indexSet(t2, workerId, worker);
  t1.postMessage$1(worker, $._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && value !== 0 || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives_numMicroseconds = function() {
  if (typeof window != "undefined" && window !== null) {
    var performance = window.performance;
    if (performance != null && typeof performance.webkitNow == "function")
      return $.JSNumber_methods.floor$0(1000 * performance.webkitNow());
  }
  return 1000 * Date.now();
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result = result + String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2;
  a = [];
  for (t1 = $.JSArray_methods.get$iterator(codePoints); t1.moveNext$0();) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 <= 65535)
      a.push(t2);
    else if (t2 <= 1114111) {
      a.push(55296 + ($.JSNumber_methods.$shr(t2 - 65536, 10) & 1023));
      a.push(56320 + (t2 & 1023));
    } else
      throw $.$$throw($.ArgumentError$(t2));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.JSArray_methods.get$iterator(charCodes); t1.moveNext$0();) {
    t2 = t1.get$current();
    if (!(typeof t2 === "number" && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 < 0)
      throw $.$$throw($.ArgumentError$(t2));
    if (t2 > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.substitute(substitution, $.getRuntimeTypeInfo(target));
  return $arguments == null ? null : $arguments[index];
};

$.getRuntimeTypeAsString = function(runtimeType) {
  var t1, className;
  t1 = $.getInterceptor$asx(runtimeType);
  className = t1.$index(runtimeType, 0).builtin$cls;
  if ($.$eq(t1.get$length(runtimeType), 1) === true)
    return className;
  return className + "<" + $.joinArguments(runtimeType, 1) + ">";
};

$.runtimeTypeToString = function(type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && (type.constructor === Array))
    return $.getRuntimeTypeAsString(type);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !types.$isJavaScriptIndexingBehavior()))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(buffer, ", ");
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    buffer.write$1(buffer, $.runtimeTypeToString(types[index]));
  }
  return buffer.toString$0(buffer);
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var buffer, t1, index, firstArgument;
  buffer = $.StringBuffer$("");
  for (t1 = $.getInterceptor$asx(types), index = startIndex, firstArgument = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(buffer, ", ");
    buffer.write$1(buffer, $.runtimeTypeToString(t1.$index(types, index)));
  }
  return buffer.toString$0(buffer);
};

$.substitute = function(substitution, $arguments) {
  if (substitution != null && (substitution.constructor === Array))
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments;
};

$.checkSubtype = function(object, isField, checks, asField, $native) {
  var t1, $arguments, isSubclass, substitution;
  t1 = object == null;
  if (t1)
    return false;
  $arguments = $.getRuntimeTypeInfo(object);
  if (!t1 && (object.constructor === Array))
    object = $.getInterceptor(object);
  isSubclass = $native ? object[isField]() : object[isField];
  if (isSubclass == null || isSubclass !== true)
    return false;
  substitution = $native ? object[asField]() : object[asField];
  return $.checkArguments(substitution, $arguments, checks);
};

$.checkArguments = function(substitution, $arguments, checks) {
  return $.areSubtypes($.substitute(substitution, $arguments), checks);
};

$.areSubtypes = function(s, t) {
  var len, i, t1;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !s.$isJavaScriptIndexingBehavior()))
    return $.areSubtypes$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !t.$isJavaScriptIndexingBehavior()))
    return $.areSubtypes$bailout(1, s, t);
  if (false)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i) {
    if (i >= s.length)
      throw $.ioore(i);
    t1 = s[i];
    if (i >= t.length)
      throw $.ioore(i);
    if (!$.isSubtype(t1, t[i]))
      return false;
  }
  return true;
};

$.areSubtypes$bailout = function(state0, s, t, len, t1) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor(s);
      if (s == null || t == null)
        return true;
      len = t1.get$length(s);
    case 2:
      var t2, i;
      state0 = 0;
      for (t2 = $.getInterceptor$asx(t), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
        if (!$.isSubtype(t1.$index(s, i), t2.$index(t, i)))
          return false;
      return true;
  }
};

$.isSubtype = function(s, t) {
  var t1, typeOfS, typeOfT, substitution;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !s.$isJavaScriptIndexingBehavior()))
    return $.isSubtype$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !t.$isJavaScriptIndexingBehavior()))
    return $.isSubtype$bailout(1, s, t);
  if (s == null || t == null)
    return true;
  if (s === t)
    return true;
  if ((s.constructor === Array)) {
    if (0 >= s.length)
      throw $.ioore(0);
    t1 = s[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return $.isSubtype$bailout(2, s, t, true, t1);
    typeOfS = t1;
  } else
    typeOfS = s;
  if ((t.constructor === Array)) {
    if (0 >= t.length)
      throw $.ioore(0);
    t1 = t[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return $.isSubtype$bailout(3, s, t, true, true, typeOfS, t1);
    typeOfT = t1;
  } else
    typeOfT = t;
  if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
  if (!(!(s.constructor === Array) && substitution == null))
    t1 = !(t.constructor === Array);
  else
    t1 = true;
  if (t1)
    return true;
  t1 = (s.constructor === Array) ? s.slice(1) : null;
  return $.checkArguments(substitution, t1, (t.constructor === Array) ? t.slice(1) : null);
};

$.isSubtype$bailout = function(state0, s, t, t1, t2, typeOfS, t3) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (s == null || t == null)
        return true;
      if (s === t)
        return true;
      t1 = s != null;
    case 2:
      if (state0 === 2 || state0 === 0 && t1 && (s.constructor === Array))
        switch (state0) {
          case 0:
            t2 = $.$index$asx(s, 0);
          case 2:
            state0 = 0;
            typeOfS = t2;
        }
      else
        typeOfS = s;
      t2 = t != null;
    case 3:
      var typeOfT, substitution;
      if (state0 === 3 || state0 === 0 && t2 && (t.constructor === Array))
        switch (state0) {
          case 0:
            t3 = $.$index$asx(t, 0);
          case 3:
            state0 = 0;
            typeOfT = t3;
        }
      else
        typeOfT = t;
      if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
        return false;
      substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
      if (!(!(t1 && (s.constructor === Array)) && substitution == null))
        t3 = !(t2 && (t.constructor === Array));
      else
        t3 = true;
      if (t3)
        return true;
      t1 = t1 && (s.constructor === Array) ? s.slice(1) : null;
      return $.checkArguments(substitution, t1, t2 && (t.constructor === Array) ? t.slice(1) : null);
  }
};

$._convertJsonToDart = function(json, reviver) {
  var revive = reviver == null ? new $._convertJsonToDart_anon() : reviver;
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (typeof(navigator) !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!$.isDartObject(obj)) {
    tag = $.getTypeNameOf(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (secondTag != null)
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT15));
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, $name))
      $.defineProperty(proto, $name, method);
  }
  return method.apply(obj, $arguments);
};

$.isDartObject = function(obj) {
  return ((obj) instanceof ($.Object));
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && $._dynamicMetadata0() != null)
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (method != null)
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (f != null && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT15)[$name];
  if (dartMethod != null)
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.write$1(result, to);
      for (i = 0; i < $length; ++i) {
        result.write$1(result, receiver[i]);
        result.write$1(result, to);
      }
      return result.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$.Future_Future$immediateError = function(error, stackTrace) {
  return $._FutureImpl$immediateError(error, stackTrace);
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl$immediateError = function(error, stackTrace) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediateError$2(error, stackTrace);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, t3, t4, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    t4 = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    t4.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0))
    return $._FutureImpl$immediate($.CONSTANT4);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._CompleterImpl$();
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$.Timer_Timer = function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  if (milliseconds < 0)
    milliseconds = 0;
  return $.TimerImpl$(milliseconds, callback);
};

$.Timer_run = function(callback) {
  $.add$1$ax($.get$Timer__runCallbacks(), callback);
  if ($.$eq($.get$length$asx($.get$Timer__runCallbacks()), 1) === true)
    $.Timer_Timer($.CONSTANT0, new $.Timer_run_anon());
};

$.IterableMixinWorkaround_setRangeList = function(list, start, $length, from, startFrom) {
  var t1 = $.getInterceptor($length);
  if (t1.$eq($length, 0) === true)
    return;
  if (t1.$lt($length, 0))
    throw $.$$throw($.ArgumentError$($length));
  t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0))
    throw $.$$throw($.RangeError$value(start));
  if ($.$gt$n(t1.$add(start, $length), list.length))
    throw $.$$throw($.RangeError$value(t1.$add(start, $length)));
  $.Arrays_copy(from, startFrom, list, start, $length);
};

$._HashMapTable$ = function() {
  var t1 = new $._HashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap($._HashMapTable$());
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1.HashMap$0(K, V);
  return t1;
};

$._HashTableKeyIterable$ = function(hashTable, K) {
  var t1 = new $._HashTableKeyIterable(hashTable);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._HashTableKeyIterator$ = function(hashTable) {
  return new $._HashTableKeyIterator(hashTable, hashTable._modificationCount, 0, null);
};

$._HashTableValueIterable$ = function(hashTable, _entryIndex, V) {
  var t1 = new $._HashTableValueIterable(_entryIndex, hashTable);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$._HashTableValueIterator$ = function(hashTable, _entryIndex) {
  return new $._HashTableValueIterator(_entryIndex, hashTable, hashTable._modificationCount, 0, null);
};

$._LinkedHashMapTable$ = function() {
  var t1 = new $._LinkedHashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap($._LinkedHashMapTable$());
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1.LinkedHashMap$0(K, V);
  return t1;
};

$._LinkedHashTableKeyIterable$ = function(_table, K) {
  var t1 = new $._LinkedHashTableKeyIterable(_table);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._LinkedHashTableKeyIterator$ = function(hashTable) {
  return new $._LinkedHashTableKeyIterator(hashTable, hashTable._modificationCount, hashTable._next$1(0), null);
};

$._LinkedHashTableValueIterable$ = function(_hashTable, _valueIndex, V) {
  var t1 = new $._LinkedHashTableValueIterable(_hashTable, _valueIndex);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$._LinkedHashTableValueIterator$ = function(hashTable, _valueIndex) {
  return new $._LinkedHashTableValueIterator(_valueIndex, hashTable, hashTable._modificationCount, hashTable._next$1(0), null);
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var number0, nextNumber;
  number0 = $.$shl$n(number, 2) - 1;
  for (number = number0; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
};

$.DateTime$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.DateTime$_now = function() {
  var t1 = new $.DateTime($.Primitives_dateNow(), false);
  t1.DateTime$_now$0();
  return t1;
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  var t1, t2;
  t1 = $.$mul$n(seconds, 1000000);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  t2 = $.$mul$n(milliseconds, 1000);
  if (typeof t2 !== "number")
    throw $.iae(t2);
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + t1 + t2 + microseconds);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string")
    return "\"" + $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"") + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.List_List = function($length) {
  var t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.Stopwatch$ = function() {
  return new $.Stopwatch(null, null);
};

$.Stopwatch__frequency = function() {
  return 1000000;
};

$.Stopwatch__now = function() {
  return $.Primitives_numMicroseconds();
};

$.String_String$fromCharCodes = function(charCodes) {
  if (!(charCodes.constructor === Array))
    charCodes = $.List_List$from(charCodes, true, null);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.AnchorElement_AnchorElement = function(href) {
  var e = $.$$dom_createElement$1$x(document, "a");
  if (href != null)
    $.set$href$x(e, href);
  return e;
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = $.$$dom_createElement$1$x(document, "canvas");
  if (width != null)
    $.set$width$x(e, width);
  if (height != null)
    $.set$height$x(e, height);
  return e;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$.Float32Array_Float32Array$fromList = function(list) {
  return new Float32Array(list);
};

$.HttpRequest_getString = function(url, onProgress, withCredentials) {
  return $.HttpRequest_request(url, null, onProgress, null, null, withCredentials).then$1(new $.HttpRequest_getString_anon());
};

$.HttpRequest_request = function(url, method, onProgress, responseType, sendData, withCredentials) {
  var completer, xhr, t1;
  completer = $._CompleterImpl$();
  xhr = new XMLHttpRequest();
  if (method == null)
    method = "GET";
  t1 = $.getInterceptor$x(xhr);
  t1.open$3$async(xhr, method, url, true);
  if (withCredentials != null)
    t1.withCredentials = withCredentials;
  if (responseType != null)
    t1.responseType = responseType;
  if (onProgress != null)
    t1.get$onProgress(xhr).listen$1(onProgress);
  t1.get$onLoad(xhr).listen$1(new $.HttpRequest_request_anon(completer, xhr));
  t1.get$onError(xhr).listen$1(new $.HttpRequest_request_anon0(completer));
  if (sendData != null)
    t1.send$1(xhr, sendData);
  else
    t1.send$0(xhr);
  return completer.future;
};

$.HttpRequest_HttpRequest = function() {
  return new XMLHttpRequest();
};

$.InputElement_InputElement = function(type) {
  var e, exception;
  e = $.$$dom_createElement$1$x(document, "input");
  if (type != null)
    try {
      $.set$type$x(e, type);
    } catch (exception) {
      $.unwrapException(exception);
    }

  return e;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.Uint16Array_Uint16Array$fromList = function(list) {
  return new Uint16Array(list);
};

$.WebSocket_WebSocket = function(url, protocol_OR_protocols) {
  var t1, t2;
  t1 = $ === protocol_OR_protocols;
  if (t1)
    protocol_OR_protocols = null;
  t2 = !(typeof url === "string");
  if ((typeof url === "string" || url == null) && t1)
    return new WebSocket(url);
  if (typeof url === "string" || url == null) {
    t1 = $.checkSubtype(protocol_OR_protocols, "$isList", [$.String], "$asList", true);
    t1 = t1 || protocol_OR_protocols == null;
  } else
    t1 = false;
  if (t1)
    return new WebSocket(url,protocol_OR_protocols);
  if (typeof url === "string" || url == null)
    t1 = protocol_OR_protocols == null;
  else
    t1 = false;
  if (t1)
    return new WebSocket(url,protocol_OR_protocols);
  throw $.$$throw($.ArgumentError$("Incorrect number or type of arguments"));
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$.Rect$ = function(left, $top, width, height) {
  return new $.Rect(left, $top, width, height);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
};

$.convertNativeToDart_Dictionary = function(object) {
  var dict, t1, t2;
  if (object == null)
    return;
  dict = $.makeLiteralMap([]);
  for (t1 = $.JSArray_methods.get$iterator(Object.getOwnPropertyNames(object)); t1.moveNext$0();) {
    t2 = t1.get$current();
    dict.$indexSet(dict, t2, object[t2]);
  }
  return dict;
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  dict.forEach$1(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$.convertNativeToDart_SerializedScriptValue = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, true);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, t1, t2, t3, t4, copy;
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, $.get$nodes$x(node));
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$asx(a);
  t2 = $.getInterceptor$n(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)))
    return -1;
  if (t2.$lt(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$n(i), t2.$lt(i, endIndex); i = t2.$add(i, 1))
    if ($.$eq(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (end < start)
    throw $.$$throw($.RangeError$value(end));
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0))
    throw $.$$throw($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start))
    throw $.$$throw($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end); i = t1.$add(i, 1))
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, false);
};

$._completeRequest = function(request) {
  var completer, t1;
  completer = $._CompleterImpl$();
  t1 = $.getInterceptor$x(request);
  t1.get$onSuccess(request).listen$1(new $._completeRequest_anon(request, completer));
  t1.get$onError(request).listen$1(new $._completeRequest_anon0(completer));
  return completer.future;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, null);
};

$.JsonUnsupportedObjectError$withCause = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.parse = function(json, reviver) {
  var parsed, e, t1, exception;
  t1 = json;
  if (!(typeof t1 === "string"))
    throw $.$$throw($.ArgumentError$(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.FormatException$(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._JsonStringifier_stringify = function(object) {
  var output = $.StringBuffer$("");
  $._JsonStringifier$(output).stringifyValue$1(object);
  return output.toString$0(output);
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, charCode, t2;
  t1 = $.getInterceptor$asx(s);
  $length = t1.get$length(s);
  charCodes = $.List_List($, $.$int);
  $.setRuntimeTypeInfo(charCodes, [$.$int]);
  for (needsEscape = false, i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
    charCode = t1.codeUnitAt$1(s, i);
    if (charCode < 32) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t2 = $.JSInt_methods.$shr(charCode, 12) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = $.JSInt_methods.$shr(charCode, 8) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = $.JSInt_methods.$shr(charCode, 4) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = charCode & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  sb.write$1(sb, needsEscape ? $.String_String$fromCharCodes(charCodes) : s);
};

$.min = function(a, b) {
  if (typeof a === "number") {
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0 && $.JSNumber_methods.get$isNegative(b) || $.JSNumber_methods.get$isNaN(b))
        return b;
      return a;
    }
    return a;
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === "number") {
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if ($.JSNumber_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && $.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$._hexCharPairToByte = function(s, pos) {
  var $byte, i, charCode, byte0;
  for ($byte = 0, i = 0; i < 2; ++i) {
    charCode = $.JSString_methods.codeUnitAt$1(s, pos + i);
    if (48 <= charCode && charCode <= 57) {
      byte0 = $byte * 16 + charCode - 48;
      $byte = byte0;
    } else {
      charCode = (charCode | 32) >>> 0;
      if (97 <= charCode && charCode <= 102)
        byte0 = $byte * 16 + charCode - 87;
      else
        throw $.$$throw($.ArgumentError$("Invalid URL encoding"));
      $byte = byte0;
    }
  }
  return $byte;
};

$._uriDecode = function(text) {
  var result, codepoints, t1, t2, i, ch;
  result = $.StringBuffer$("");
  codepoints = $.List_List($, $.$int);
  $.setRuntimeTypeInfo(codepoints, [$.$int]);
  for (t1 = text.length, t2 = t1 - 2, i = 0; i < t1;) {
    if (i < 0)
      throw $.ioore(i);
    ch = text[i];
    if (ch !== "%") {
      if (ch === "+")
        result.write$1(result, " ");
      else
        result.write$1(result, ch);
      ++i;
    } else {
      $.JSArray_methods.clear$0(codepoints);
      for (; ch === "%";) {
        ++i;
        if (i > t2)
          throw $.$$throw($.ArgumentError$("Truncated URI"));
        codepoints.push($._hexCharPairToByte(text, i));
        i += 2;
        if (i === t1)
          break;
        if (i < 0 || i >= t1)
          throw $.ioore(i);
        ch = text[i];
      }
      result.write$1(result, $.decodeUtf8(codepoints, 0, null, 65533));
    }
  }
  return result.toString$0(result);
};

$.decodeUtf8 = function(bytes, offset, $length, replacementCodepoint) {
  return $.String_String$fromCharCodes($.Utf8Decoder$(bytes, offset, $length, replacementCodepoint).decodeRest$0());
};

$.Utf8Decoder$ = function(utf8EncodedBytes, offset, $length, replacementCodepoint) {
  var t1 = $._ListRange$(utf8EncodedBytes, offset, $length);
  return new $.Utf8Decoder(t1.get$iterator(t1), replacementCodepoint, null);
};

$._ListRange$ = function(source, offset, $length) {
  var t1 = $length == null ? source.length - offset : $length;
  t1 = new $._ListRange(source, offset, t1);
  t1._ListRange$3(source, offset, $length);
  return t1;
};

$._ListRangeIteratorImpl$ = function(_source, offset, _end) {
  return new $._ListRangeIteratorImpl(_source, offset - 1, _end);
};

$.Model$ = function(gl, vertCoord, vertInd) {
  var t1 = $.List_List($, $.Instance);
  $.setRuntimeTypeInfo(t1, [$.Instance]);
  t1 = new $.Model(t1, null, null, null, null, null);
  t1.Model$3(gl, vertCoord, vertInd);
  return t1;
};

$.fetchSquare = function(gl, jsonUrl, deliverSquare) {
  var t1, t2;
  t1 = new $.fetchSquare_handleResponse(gl, jsonUrl, deliverSquare);
  t2 = new $.fetchSquare_handleError(jsonUrl);
  $.HttpRequest_getString(jsonUrl, null, null).then$1(t1).catchError$1(t2);
};

$.Cookie__readCookie = function() {
  var cookie = $.HashMap$(null, null);
  $.JSArray_methods.forEach$1($.split$1$s(document.cookie, ";"), new $.Cookie__readCookie_anon(cookie));
  return cookie;
};

$.Cookie_getCookie = function($name) {
  var t = $.Cookie__readCookie();
  if (t.containsKey$1(t, $name))
    return t.$index(t, $name);
  return;
};

$.initDebugLostContext = function(canvas) {
  var control, loseContextButton, t1, t2, restoreContextButton, t3;
  control = $.query$1$x(document, "#control");
  loseContextButton = $.InputElement_InputElement(null);
  t1 = $.getInterceptor$x(loseContextButton);
  t1.set$type(loseContextButton, "button");
  t1.set$value(loseContextButton, "lose context");
  t1.get$onClick(loseContextButton).listen$1(new $.initDebugLostContext_anon());
  t2 = $.getInterceptor$x(control);
  t2.append$1(control, loseContextButton);
  restoreContextButton = $.InputElement_InputElement(null);
  t3 = $.getInterceptor$x(restoreContextButton);
  t3.set$type(restoreContextButton, "button");
  t3.set$value(restoreContextButton, "restore context");
  t3.get$onClick(restoreContextButton).listen$1(new $.initDebugLostContext_anon0());
  t2.append$1(control, restoreContextButton);
  $.Primitives_printString("FIXME: initDebugLostContext: trap webglcontextlost");
  $.Primitives_printString("FIXME: initDebugLostContext: trap webglcontextrestored");
};

$.initGL = function(canvas) {
  var gl;
  $.Primitives_printString("WebGL: initializing");
  gl = $.getContext3d$0$x(canvas);
  if (gl != null) {
    $.Primitives_printString("WebGL: initialized");
    return gl;
  }
  $.Primitives_printString("WebGL: initialization failure");
  return;
};

$.initStats = function() {
  var div = $.query$1$x(document, "#framerate");
  $.stats = $.Stats$();
  $.add$1$ax($.get$children$x(div), $.stats.get$container());
};

$.boot = function() {
  var canvasbox, t1, gl, p, a, t2, sid;
  $.canvas = $.CanvasElement_CanvasElement(null, null);
  $.set$id$x($.canvas, "main_canvas");
  $.set$width$x($.canvas, 780);
  $.set$height$x($.canvas, 500);
  canvasbox = $.query$1$x(document, "#canvasbox");
  t1 = $.getInterceptor$x(canvasbox);
  t1.append$1(canvasbox, $.canvas);
  $.Primitives_printString("canvas '" + $.S($.get$id$x($.canvas)) + "' created: width=" + $.S($.get$width$x($.canvas)) + " height=" + $.S($.get$height$x($.canvas)));
  gl = $.initGL($.canvas);
  if (gl == null) {
    $.remove$0$ax($.canvas);
    p = $.$$dom_createElement$1$x(document, "p");
    $.getInterceptor$x(p).textContent = "WebGL is currently not available on this system.";
    t1.append$1(canvasbox, p);
    a = $.AnchorElement_AnchorElement(null);
    t2 = $.getInterceptor$x(a);
    t2.set$href(a, "http://get.webgl.org/");
    t2.set$text(a, "Get more information");
    t1.append$1(canvasbox, a);
    $.set$backgroundColor$x(canvasbox.style, "lightblue");
    return;
  }
  if ($.debugLostContext === true)
    $.initDebugLostContext($.canvas);
  sid = $.Cookie_getCookie("sid");
  $.Primitives_printString("session id sid=" + $.S(sid));
  $.initWebSocket($.query$1$x(document, "#wsUri").textContent, sid, 1, $.query$1$x(document, "#ws_status"));
  $.initStats();
  return gl;
};

$.initBuffers = function(gl) {
  $.Primitives_printString("initBuffers: square model: fetching");
  $.fetchSquare(gl, "/mesh/square.json", new $.initBuffers_anon());
};

$.initContext = function(gl) {
  var t1;
  $.shaderProgram = $.Program_Program(gl, "/shader/min_vs.txt", "/shader/min_fs.txt");
  $.initBuffers(gl);
  t1 = $.getInterceptor$x(gl);
  t1.clearColor$4(gl, 0.5, 0.5, 0.5, 1);
  t1.enable$1(gl, 2929);
  t1.depthFunc$1(gl, 513);
  t1.frontFace$1(gl, 2305);
  t1.cullFace$1(gl, 1029);
  t1.enable$1(gl, 2884);
  $.loop(gl);
};

$.render = function(gl) {
  var t1 = $.getInterceptor$x(gl);
  t1.viewport$4(gl, 0, 0, $.get$width$x($.canvas), $.get$height$x($.canvas));
  t1.depthRange$2(gl, 0, 1);
  t1.clear$1(gl, 16640);
  $.drawSquare(gl);
  $.forEach$1$ax($.get$programList(), new $.render_anon());
};

$.drawSquare = function(gl) {
  var t1, t2, aVertexPosition, t3, t4;
  t1 = $.shaderProgram;
  if (!t1.get$ready())
    return;
  t2 = $.squareModel;
  if (t2 == null)
    return;
  aVertexPosition = t1.get$aVertexPosition();
  t1 = $.getInterceptor$x(gl);
  t1.bindBuffer$2(gl, 34962, t2.get$vertexPositionBuffer());
  t1.vertexAttribPointer$6(gl, aVertexPosition, $.squareModel.get$vertexPositionBufferItemSize(), 5126, false, 0, 0);
  t1.enableVertexAttribArray$1(gl, aVertexPosition);
  t1.bindBuffer$2(gl, 34963, $.squareModel.get$vertexIndexBuffer());
  t3 = $.squareModel;
  t4 = t3.get$vertexIndexLength();
  t3 = t3.get$vertexIndexBufferItemSize();
  if (typeof t3 !== "number")
    throw $.iae(t3);
  t1.drawElements$4(gl, 4, t4, 5123, 0 * t3);
  t1.bindBuffer$2(gl, 34962, null);
  t1.bindBuffer$2(gl, 34963, null);
};

$.loop = function(gl) {
  var before, i, duration, rate;
  if ($.$gt$n($.fullRateFrames, 0)) {
    $.Primitives_printString("loop: firing " + $.S($.fullRateFrames) + " frames at full rate");
    before = $.DateTime$_now();
    for (i = 0; $.JSNumber_methods.$lt(i, $.fullRateFrames); ++i) {
      $.stats.begin$0();
      $.render(gl);
      $.end$0$x($.stats);
    }
    duration = $.DateTime$_now().difference$1(before);
    rate = $.$div$n($.fullRateFrames, duration.get$inSeconds());
    $.Primitives_printString("loop: duration = " + $.S(duration) + " framerate = " + $.S(rate) + " fps");
    return;
  }
  $.stats.begin$0();
  $.requestId = $.requestAnimationFrame$1$x(window, new $.loop_anon(gl));
  if ($.$eq($.requestId, 0) === true)
    $.Primitives_printString("loop: could not obtain requestId from requestAnimationFrame");
  $.render(gl);
  $.end$0$x($.stats);
};

$.main = function() {
  var gl = $.boot();
  if (gl == null) {
    $.Primitives_printString("WebGL: not available");
    return;
  }
  $.initContext(gl);
};

$.Program$_load = function(gl, vertexShaderURL, fragmentShaderURL) {
  var t1, t2;
  t1 = {};
  t2 = $.List_List($, $.Model);
  $.setRuntimeTypeInfo(t2, [$.Model]);
  t2 = new $.Program(null, null, false, t2);
  t2.Program$_load$3(gl, vertexShaderURL, fragmentShaderURL, t1);
  return t2;
};

$.Program_Program = function(gl, vertexShader, fragmentShader) {
  return $.Program$_load(gl, vertexShader, fragmentShader);
};

$.initWebSocket = function(wsUri, sid, retrySeconds, $status) {
  var t1, t2;
  t1 = {};
  t1.retrySeconds_0 = retrySeconds;
  $.set$text$x($status, "opening " + $.S(wsUri));
  t2 = t1.retrySeconds_0;
  if (t2 < 1)
    t1.retrySeconds_0 = 1;
  else if (t2 > 120)
    t1.retrySeconds_0 = 120;
  $.Primitives_printString("websocket: opening: " + $.S(wsUri) + " (retry=" + $.S(t1.retrySeconds_0) + ")");
  t1.w_1 = $.WebSocket_WebSocket(wsUri, $);
  t1.subOpen_2 = null;
  t1.subClose_3 = null;
  t1.subError_4 = null;
  t1.subMessage_5 = null;
  t1.subOpen_2 = $.get$onOpen$x(t1.w_1).listen$1(new $.initWebSocket_anon(t1, wsUri, sid, $status));
  t1.reconnectScheduled_6 = false;
  t2 = new $.initWebSocket_scheduleReconnect(t1, wsUri, sid, $status);
  t1.subClose_3 = $.get$onClose$x(t1.w_1).listen$1(new $.initWebSocket_anon0(wsUri, $status, t2));
  t1.subError_4 = $.get$onError$x(t1.w_1).listen$1(new $.initWebSocket_anon1(t2));
  t1.subMessage_5 = $.get$onMessage$x(t1.w_1).listen$1(new $.initWebSocket_anon2(t1, $status));
};

$.Stats$ = function() {
  var t1 = new $.Stats($.Stopwatch$(), 0, 1000, 0, 0, 1000, 0, 0, 0, null, null, null, null, null, null, null);
  t1.Stats$0();
  return t1;
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.num = {builtin$cls: "num"};
$.EntrySync = {builtin$cls: "EntrySync"};
$.Entry = {builtin$cls: "Entry"};
$.StyleSheet = {builtin$cls: "StyleSheet"};
$.TextTrack = {builtin$cls: "TextTrack"};
$.TextTrackCue = {builtin$cls: "TextTrackCue"};
$.ElementInstance = {builtin$cls: "ElementInstance"};
$.CssRule = {builtin$cls: "CssRule"};
$.Touch = {builtin$cls: "Touch"};
$.File = {builtin$cls: "File"};
$.CssValue = {builtin$cls: "CssValue"};
$.String = {builtin$cls: "String"};
$.List = {builtin$cls: "List"};
$.ReceivePort = {builtin$cls: "ReceivePort"};
$.Gamepad = {builtin$cls: "Gamepad"};
$.$double = {builtin$cls: "$double"};
$.SourceBuffer = {builtin$cls: "SourceBuffer"};
$.DomMimeType = {builtin$cls: "DomMimeType"};
$.HttpRequest = {builtin$cls: "HttpRequest"};
$.SpeechGrammar = {builtin$cls: "SpeechGrammar"};
$.DomPlugin = {builtin$cls: "DomPlugin"};
$.SpeechInputResult = {builtin$cls: "SpeechInputResult"};
$.Length = {builtin$cls: "Length"};
$.Node = {builtin$cls: "Node"};
$.Number = {builtin$cls: "Number"};
$.Transform = {builtin$cls: "Transform"};
$.SpeechRecognitionResult = {builtin$cls: "SpeechRecognitionResult"};
$.$int = {builtin$cls: "$int"};
$.PathSeg = {builtin$cls: "PathSeg"};
$.Element = {builtin$cls: "Element"};
$._ManagerStub = {builtin$cls: "_ManagerStub"};
$.Instance = {builtin$cls: "Instance"};
$.Map = {builtin$cls: "Map"};
$.String.$isString = true;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT4 = Isolate.makeConstantList([]);
$.CONSTANT10 = new $.EventStreamProvider("mousedown");
$.CONSTANT = new $.NullThrownError();
$.JSDouble_methods = $.JSDouble.prototype;
$.CONSTANT15 = new $.Object();
$.CONSTANT12 = new $.EventStreamProvider("close");
$.CONSTANT3 = new $._LinkedHashTableHeadMarker();
$.JSNull_methods = $.JSNull.prototype;
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.CONSTANT6 = new $.EventStreamProvider("error");
$.CONSTANT8 = new $.EventStreamProvider("load");
$.CONSTANT7 = new $.EventStreamProvider("success");
$.CONSTANT9 = new $.EventStreamProvider("progress");
$.CONSTANT5 = new $.CloseToken();
$.CONSTANT11 = new $.EventStreamProvider("message");
$.JSInt_methods = $.JSInt.prototype;
$.CONSTANT14 = new $.EventStreamProvider("click");
$.CONSTANT13 = new $.EventStreamProvider("open");
$.JSArray_methods = $.JSArray.prototype;
$.CONSTANT0 = new $.Duration(0);
$.CONSTANT1 = new $._DeadEntry();
$.CONSTANT2 = new $._NullKey();
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.requestId = null;
$.canvas = null;
$.shaderProgram = null;
$.squareModel = null;
$.debugLostContext = true;
$.fullRateFrames = 0;
$.stats = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_createElement$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_createElement$1(receiver, a0);
};
$.$$dom_removeChild$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_removeChild$1(receiver, a0);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (!(typeof receiver == "object"))
    return !(a0 == null) && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mod$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$mod(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.append$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).append$1(receiver, a0);
};
$.close$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).close$0(receiver);
};
$.end$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).end$0(receiver);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$data$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$data(receiver);
};
$.get$error$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$error(receiver);
};
$.get$first$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$first(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$height$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$height(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$onClose$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClose(receiver);
};
$.get$onError$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onError(receiver);
};
$.get$onMessage$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMessage(receiver);
};
$.get$onOpen$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onOpen(receiver);
};
$.get$responseText$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$responseText(receiver);
};
$.get$result$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$result(receiver);
};
$.get$style$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$style(receiver);
};
$.get$values$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$values(receiver);
};
$.get$width$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$width(receiver);
};
$.getContext3d$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).getContext3d$0(receiver);
};
$.indexOf$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.preventDefault$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).preventDefault$0(receiver);
};
$.query$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).query$1(receiver, a0);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.requestAnimationFrame$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).requestAnimationFrame$1(receiver, a0);
};
$.send$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).send$1(receiver, a0);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$backgroundColor$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$backgroundColor(receiver, value);
};
$.set$display$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$display(receiver, value);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$href$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$href(receiver, value);
};
$.set$id$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$id(receiver, value);
};
$.set$text$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$text(receiver, value);
};
$.set$type$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$type(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.startsWith$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.sublist$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
$.toInt$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).toInt$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.write$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).write$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return void 0;
  return receiver;
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "programList", "programList", "get$programList", function() {
  var t1 = $.List_List($, $.Program);
  $.setRuntimeTypeInfo(t1, [$.Program]);
  return t1;
});
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
// Native classes
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isCollection: function() {
    return false;
  },
  $asCollection: function() {
    return null;
  },
  $isList: function() {
    return false;
  },
  $asList: function() {
    return null;
  },
  $isMap: function() {
    return false;
  },
  $asMap: function() {
    return null;
  },
  $isArrayBuffer: function() {
    return false;
  },
  $asArrayBuffer: function() {
    return null;
  },
  $isArrayBufferView: function() {
    return false;
  },
  $asArrayBufferView: function() {
    return null;
  },
  $isBlob: function() {
    return false;
  },
  $asBlob: function() {
    return null;
  },
  $isElement: function() {
    return false;
  },
  $asElement: function() {
    return null;
  },
  $isFile: function() {
    return false;
  },
  $asFile: function() {
    return null;
  },
  $isFileList: function() {
    return false;
  },
  $asFileList: function() {
    return null;
  },
  $isImageData: function() {
    return false;
  },
  $asImageData: function() {
    return null;
  },
  $isRect: function() {
    return false;
  },
  $asRect: function() {
    return null;
  },
  toString$0: function(_) {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function(_) {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(_, a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  }
});

$.$defineNativeClass("AbstractWorker", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "href},type}",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("DOMApplicationCache", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLAreaElement", {"": "href}"});

$.$defineNativeClass("ArrayBuffer", {
  $isArrayBuffer: function() {
    return true;
  },
  $asArrayBuffer: function() {
    return null;
  }
});

$.$defineNativeClass("ArrayBufferView", {
  $isArrayBufferView: function() {
    return true;
  },
  $asArrayBufferView: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLBaseElement", {"": "href}"});

$.$defineNativeClass("BatteryManager", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("Blob", {
  $isBlob: function() {
    return true;
  },
  $asBlob: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLBodyElement", {
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.CONSTANT8.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "type},value}"});

$.$defineNativeClass("HTMLCanvasElement", {"": "height%,width%",
  getContext$2: function(receiver, contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return this._getContext_1$2(receiver, contextId, $.convertDartToNative_Dictionary(attrs));
    return this._getContext_2$1(receiver, contextId);
  },
  _getContext_1$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId,attrs);
  },
  _getContext_2$1: function(receiver, contextId) {
    return receiver.getContext(contextId);
  },
  getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil: function(receiver, alpha, antialias, depth, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    var options, context;
    options = $.makeLiteralMap(["alpha", alpha, "depth", depth, "stencil", stencil, "antialias", antialias, "premultipliedAlpha", premultipliedAlpha, "preserveDrawingBuffer", preserveDrawingBuffer]);
    context = this.getContext$2(receiver, "webgl", options);
    return context == null ? this.getContext$2(receiver, "experimental-webgl", options) : context;
  },
  getContext3d$0: function($receiver) {
    return this.getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil($receiver, true, true, true, true, false, false);
  }
});

$.$defineNativeClass("CharacterData", {"": "data=,length="});

$.$defineNativeClass("CompositionEvent", {"": "data="});

$.$defineNativeClass("CSSFontFaceRule", {"": "style="});

$.$defineNativeClass("WebKitCSSKeyframeRule", {"": "style="});

$.$defineNativeClass("WebKitCSSMatrix", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("CSSPageRule", {"": "style="});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length=",
  _getPropertyValue$1: function(receiver, propertyName) {
    return receiver.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = this._getPropertyValue$1(receiver, propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  set$backgroundColor: function(receiver, value) {
    this.setProperty$3(receiver, "background-color", value, "");
  },
  get$clear: function(receiver) {
    return this.getPropertyValue$1(receiver, "clear");
  },
  clear$1: function($receiver, arg0) {
    return this.get$clear($receiver).call$1(arg0);
  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  },
  set$width: function(receiver, value) {
    this.setProperty$3(receiver, "width", value, "");
  }
});

$.$defineNativeClass("CSSStyleRule", {"": "style="});

$.$defineNativeClass("DataTransferItemList", {"": "length=",
  add$2: function(receiver, data_OR_file, type) {
    return receiver.add(data_OR_file,type);
  },
  add$1: function($receiver, data_OR_file) {
    return $receiver.add(data_OR_file);
  }
});

$.$defineNativeClass("DedicatedWorkerContext", {
  postMessage$2: function(receiver, message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this._postMessage_1$2(receiver, $._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1(receiver, $._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function($receiver, message) {
    return this.postMessage$2($receiver, message, $);
  },
  _postMessage_1$2: function(receiver, message, messagePorts) {
    return receiver.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(receiver, message) {
    return receiver.postMessage(message);
  }
});

$.$defineNativeClass("HTMLDetailsElement", {
  open$2: function($receiver, arg0, arg1) {
    return this.open.call$2(arg0, arg1);
  }
});

$.$defineNativeClass("Document", {
  $$dom_createElement$1: function(receiver, tagName) {
    return receiver.createElement(tagName);
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  get$onClick: function(receiver) {
    return $.CONSTANT14.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.CONSTANT8.forTarget$1(receiver);
  }
});

$.$defineNativeClass("DocumentFragment", {
  get$children: function(receiver) {
    if (this._children == null)
      this._children = $.FilteredElementList$(receiver);
    return this._children;
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("MimeTypeArray", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.DomMimeType);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.DomMimeType]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.DomMimeType]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Plugin", {"": "length="});

$.$defineNativeClass("PluginArray", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.DomPlugin);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.DomPlugin]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.DomPlugin]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Selection", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("DOMSettableTokenList", {"": "value}"});

$.$defineNativeClass("DOMStringList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.String);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.String]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.String]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("DOMTokenList", {"": "length=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("Element", {"": "$$dom_children:children=,id%,style=",
  get$children: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(receiver);
    } else
      return Object.prototype.get$children.call(this, receiver);
  },
  get$onClick: function(receiver) {
    return $.CONSTANT14.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$onError")) {
      return $.CONSTANT6.forTarget$1(receiver);
    } else
      return Object.prototype.get$onError.call(this, receiver);
  },
  get$onLoad: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$onLoad")) {
      return $.CONSTANT8.forTarget$1(receiver);
    } else
      return Object.prototype.get$onLoad.call(this, receiver);
  },
  get$onMouseDown: function(receiver) {
    return $.CONSTANT10.forTarget$1(receiver);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height%,type},width%"});

$.$defineNativeClass("Entry", {
  _remove$2: function(receiver, successCallback, errorCallback) {
    return receiver.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
  },
  remove$0: function(receiver) {
    var completer = $._CompleterImpl$();
    this._remove$2(receiver, new $.Entry_remove_anon(completer), new $.Entry_remove_anon0(completer));
    return completer.future;
  }
});

$.$defineNativeClass("EntrySync", {
  remove$0: function(receiver) {
    return receiver.remove();
  }
});

$.$defineNativeClass("Event", {
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  }
});

$.$defineNativeClass("EventException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("EventSource", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  }
});

$.$defineNativeClass("EventTarget", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, receiver, type, listener, useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, receiver, type, listener, useCapture);
  }
});

$.$defineNativeClass("File", {
  $isFile: function() {
    return true;
  },
  $asFile: function() {
    return null;
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("FileList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.File);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isFileList: function() {
    return true;
  },
  $asFileList: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.File]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.File]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("FileReader", {"": "error=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.CONSTANT8.forTarget$1(receiver);
  }
});

$.$defineNativeClass("FileWriter", {"": "error=,length=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  write$1: function(receiver, data) {
    return receiver.write(data);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  }
});

$.$defineNativeClass("FileWriterSync", {"": "length=",
  write$1: function(receiver, data) {
    return receiver.write(data);
  }
});

$.$defineNativeClass("Float32Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.num);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$double]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$double]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Float64Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.num);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$double]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$double]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length="});

$.$defineNativeClass("Gamepad", {"": "id="});

$.$defineNativeClass("History", {"": "length="});

$.$defineNativeClass("HTMLAllCollection", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("XMLHttpRequest", {"": "responseText=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method,url,async,user,password);
  },
  open$2: function($receiver, method, url) {
    return $receiver.open(method, url);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  send$0: function($receiver) {
    return $receiver.send();
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.CONSTANT8.forTarget$1(receiver);
  },
  get$onProgress: function(receiver) {
    return $.CONSTANT9.forTarget$1(receiver);
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("XMLHttpRequestUpload", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.CONSTANT8.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height%,width%"});

$.$defineNativeClass("ImageData", {"": "data=,height=,width=",
  $isImageData: function() {
    return true;
  },
  $asImageData: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLImageElement", {"": "height%,width%"});

$.$defineNativeClass("HTMLInputElement", {"": "height%,type},value},width%",
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
});

$.$defineNativeClass("Int16Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Int32Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Int8Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLLIElement", {"": "type},value}"});

$.$defineNativeClass("HTMLLinkElement", {"": "href},type}"});

$.$defineNativeClass("Location", {"": "href}",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("MediaController", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMediaElement", {"": "error="});

$.$defineNativeClass("MediaList", {"": "length="});

$.$defineNativeClass("MediaSource", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStream", {"": "id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStreamTrack", {"": "id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MessageEvent", {
  get$data: function(receiver) {
    return $.convertNativeToDart_SerializedScriptValue(this.data);
  }
});

$.$defineNativeClass("MessagePort", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  postMessage$2: function(receiver, message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this._postMessage_1$2(receiver, $._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1(receiver, $._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function($receiver, message) {
    return this.postMessage$2($receiver, message, $);
  },
  _postMessage_1$2: function(receiver, message, messagePorts) {
    return receiver.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(receiver, message) {
    return receiver.postMessage(message);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMeterElement", {"": "value}"});

$.$defineNativeClass("Node", {"": "text:textContent}",
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = this.parentNode;
    if (t1 != null)
      $.$$dom_removeChild$1$x(t1, receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = this.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  $$dom_removeChild$1: function(receiver, oldChild) {
    return receiver.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild,oldChild);
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Notification", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onClick: function(receiver) {
    return $.CONSTANT14.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "type}"});

$.$defineNativeClass("HTMLObjectElement", {"": "data=,height%,type},width%"});

$.$defineNativeClass("HTMLOptionElement", {"": "value}"});

$.$defineNativeClass("HTMLOutputElement", {"": "value}"});

$.$defineNativeClass("HTMLParamElement", {"": "value}"});

$.$defineNativeClass("ProcessingInstruction", {"": "data="});

$.$defineNativeClass("HTMLProgressElement", {"": "value}"});

$.$defineNativeClass("RadioNodeList", {"": "value}"});

$.$defineNativeClass("Range", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("RangeException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("RTCDataChannel", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  }
});

$.$defineNativeClass("RTCDTMFSender", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("RTCPeerConnection", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("RTCSessionDescription", {"": "type}"});

$.$defineNativeClass("RTCStatsReport", {"": "id="});

$.$defineNativeClass("Screen", {"": "height=,width="});

$.$defineNativeClass("HTMLScriptElement", {"": "type}"});

$.$defineNativeClass("ScriptProfileNode", {
  children$0: function(receiver) {
    return receiver.children();
  },
  get$children: function(receiver) {
    return new $.BoundClosure$i0(this, "children$0", receiver);
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,value}"});

$.$defineNativeClass("SourceBufferList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.SourceBuffer);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SourceBuffer]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SourceBuffer]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLSourceElement", {"": "type}"});

$.$defineNativeClass("SpeechGrammarList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.SpeechGrammar);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechGrammar]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechGrammar]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechRecognition", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  }
});

$.$defineNativeClass("SpeechRecognitionError", {"": "error="});

$.$defineNativeClass("SpeechRecognitionResult", {"": "length="});

$.$defineNativeClass("Storage", {
  $index: function(receiver, key) {
    return this.$$dom_getItem$1(receiver, key);
  },
  $indexSet: function(receiver, key, value) {
    this.$$dom_setItem$2(receiver, key, value);
  },
  forEach$1: function(receiver, f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(receiver, i);
      if (key == null)
        return;
      f.call$2(key, this.$$dom_getItem$1(receiver, key));
    }
  },
  get$keys: function(receiver) {
    var keys = [];
    this.forEach$1(receiver, new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function(receiver) {
    var values = [];
    this.forEach$1(receiver, new $.Storage_values_anon(values));
    return values;
  },
  get$length: function(receiver) {
    return this.length;
  },
  $$dom_getItem$1: function(receiver, key) {
    return receiver.getItem(key);
  },
  $$dom_key$1: function(receiver, index) {
    return receiver.key(index);
  },
  $$dom_setItem$2: function(receiver, key, data) {
    return receiver.setItem(key,data);
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return function () { return [$.String, $.String]; };
  }
});

$.$defineNativeClass("HTMLStyleElement", {"": "type}"});

$.$defineNativeClass("HTMLTextAreaElement", {"": "value}"});

$.$defineNativeClass("TextEvent", {"": "data="});

$.$defineNativeClass("TextMetrics", {"": "width="});

$.$defineNativeClass("TextTrack", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCue", {"": "id%,text}",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCueList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.TextTrackCue);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.TextTrackCue]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.TextTrackCue]; };
  }
});

$.$defineNativeClass("TextTrackList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.TextTrack);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.TextTrack]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.TextTrack]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("TimeRanges", {"": "length="});

$.$defineNativeClass("TouchList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Touch);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Touch]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Touch]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint16Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint32Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return receiver.length;
    } else
      return Object.prototype.get$length.call(this, receiver);
  },
  $index: function(receiver, index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return receiver[index];
    } else
      return Object.prototype.$index.call(this, receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      receiver[index] = value;
    } else
      return Object.prototype.$indexSet.call(this, receiver, index, value);
  },
  get$iterator: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(receiver);
    } else
      return Object.prototype.get$iterator.call(this, receiver);
  },
  forEach$1: function(receiver, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$1$growable")) {
      return $.List_List$from(receiver, growable, $.$int);
    } else
      return Object.prototype.toList$1$growable.call(this, receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, receiver, value);
  },
  addAll$1: function(receiver, iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, receiver, iterable);
  },
  indexOf$2: function(receiver, element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
    } else
      return Object.prototype.indexOf$2.call(this, receiver, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$first")) {
      if (this.get$length(receiver) > 0)
        return this.$index(receiver, 0);
      throw $.$$throw($.StateError$("No elements"));
    } else
      return Object.prototype.get$first.call(this, receiver);
  },
  removeLast$0: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this, receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (Object.getPrototypeOf(this).hasOwnProperty("sublist$2")) {
      if (end == null)
        end = this.get$length(receiver);
      return $.Lists_getRange(receiver, start, end, []);
    } else
      return Object.prototype.sublist$2.call(this, receiver, start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height%,width%"});

$.$defineNativeClass("WebGLRenderingContext", {
  attachShader$2: function(receiver, program, shader) {
    return receiver.attachShader(program,shader);
  },
  bindBuffer$2: function(receiver, target, buffer) {
    return receiver.bindBuffer(target,buffer);
  },
  bufferData$3: function(receiver, target, data_OR_size, usage) {
    return receiver.bufferData(target,data_OR_size,usage);
  },
  clear$1: function(receiver, mask) {
    return receiver.clear(mask);
  },
  clearColor$4: function(receiver, red, green, blue, alpha) {
    return receiver.clearColor(red,green,blue,alpha);
  },
  compileShader$1: function(receiver, shader) {
    return receiver.compileShader(shader);
  },
  createBuffer$0: function(receiver) {
    return receiver.createBuffer();
  },
  createProgram$0: function(receiver) {
    return receiver.createProgram();
  },
  createShader$1: function(receiver, type) {
    return receiver.createShader(type);
  },
  cullFace$1: function(receiver, mode) {
    return receiver.cullFace(mode);
  },
  depthFunc$1: function(receiver, func) {
    return receiver.depthFunc(func);
  },
  depthRange$2: function(receiver, zNear, zFar) {
    return receiver.depthRange(zNear,zFar);
  },
  drawElements$4: function(receiver, mode, count, type, offset) {
    return receiver.drawElements(mode,count,type,offset);
  },
  enable$1: function(receiver, cap) {
    return receiver.enable(cap);
  },
  enableVertexAttribArray$1: function(receiver, index) {
    return receiver.enableVertexAttribArray(index);
  },
  frontFace$1: function(receiver, mode) {
    return receiver.frontFace(mode);
  },
  getAttribLocation$2: function(receiver, program, $name) {
    return receiver.getAttribLocation(program,$name);
  },
  getProgramInfoLog$1: function(receiver, program) {
    return receiver.getProgramInfoLog(program);
  },
  getProgramParameter$2: function(receiver, program, pname) {
    return receiver.getProgramParameter(program,pname);
  },
  getShaderInfoLog$1: function(receiver, shader) {
    return receiver.getShaderInfoLog(shader);
  },
  getShaderParameter$2: function(receiver, shader, pname) {
    return receiver.getShaderParameter(shader,pname);
  },
  isContextLost$0: function(receiver) {
    return receiver.isContextLost();
  },
  linkProgram$1: function(receiver, program) {
    return receiver.linkProgram(program);
  },
  shaderSource$2: function(receiver, shader, string) {
    return receiver.shaderSource(shader,string);
  },
  useProgram$1: function(receiver, program) {
    return receiver.useProgram(program);
  },
  vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
    return receiver.vertexAttribPointer(indx,size,type,normalized,stride,offset);
  },
  viewport$4: function(receiver, x, y, width, height) {
    return receiver.viewport(x,y,width,height);
  }
});

$.$defineNativeClass("WebKitCSSFilterRule", {"": "style="});

$.$defineNativeClass("WebKitNamedFlow", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("WebSocket", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$2: function(receiver, code, reason) {
    return receiver.close(code,reason);
  },
  close$0: function($receiver) {
    return $receiver.close();
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  get$onClose: function(receiver) {
    return $.CONSTANT12.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  },
  get$onMessage: function(receiver) {
    return $.CONSTANT11.forTarget$1(receiver);
  },
  get$onOpen: function(receiver) {
    return $.CONSTANT13.forTarget$1(receiver);
  }
});

$.$defineNativeClass("DOMWindow", {
  open$3: function(receiver, url, $name, options) {
    if (options == null)
      return $._DOMWindowCrossFrame__createSafe(receiver.open(url,$name));
    else
      return $._DOMWindowCrossFrame__createSafe(receiver.open(url,$name,options));
  },
  open$2: function($receiver, url, name) {
    return this.open$3($receiver, url, name, null);
  },
  requestAnimationFrame$1: function(receiver, callback) {
    this._ensureRequestAnimationFrame$0(receiver);
    return this._requestAnimationFrame$1(receiver, callback);
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onClick: function(receiver) {
    return $.CONSTANT14.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.CONSTANT8.forTarget$1(receiver);
  }
});

$.$defineNativeClass("Worker", {
  postMessage$2: function(receiver, message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this._postMessage_1$2(receiver, $._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    this._postMessage_2$1(receiver, $._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function($receiver, message) {
    return this.postMessage$2($receiver, message, $);
  },
  _postMessage_1$2: function(receiver, message, messagePorts) {
    return receiver.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(receiver, message) {
    return receiver.postMessage(message);
  },
  terminate$0: function(receiver) {
    return receiver.terminate();
  }
});

$.$defineNativeClass("WorkerContext", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  }
});

$.$defineNativeClass("WorkerLocation", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("ClientRect", {"": "height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && other.$isRect()))
      return false;
    t1 = this.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = this.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = this.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = this.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  toInt$0: function(receiver) {
    return $.Rect$($.toInt$0$nx(this.left), $.toInt$0$nx(this.top), $.toInt$0$nx(this.width), $.toInt$0$nx(this.height));
  },
  $isRect: function() {
    return true;
  },
  $asRect: function() {
    return null;
  }
});

$.$defineNativeClass("ClientRectList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Rect);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Rect]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Rect]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("CSSRuleList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.CssRule);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.CssRule]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.CssRule]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("CSSValueList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.CssValue);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.CssValue]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.CssValue]; };
  }
});

$.$defineNativeClass("EntryArray", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Entry);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Entry]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Entry]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("EntryArraySync", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.EntrySync);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.EntrySync]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.EntrySync]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("GamepadList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Gamepad);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Gamepad]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Gamepad]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechInputResultList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.SpeechInputResult);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechInputResult]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechInputResult]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechRecognitionResultList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.SpeechRecognitionResult);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechRecognitionResult]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechRecognitionResult]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("StyleSheetList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.StyleSheet);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.StyleSheet]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.StyleSheet]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("IDBDatabase", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  }
});

$.$defineNativeClass("IDBObjectStore", {
  add$2: function(receiver, value, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = null;
      if (key != null)
        request = this.$$dom_add$2(receiver, value, key);
      else
        request = this.$$dom_add$1(receiver, value);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $.Future_Future$immediateError(e, stacktrace);
    }

  },
  add$1: function($receiver, value) {
    return this.add$2($receiver, value, null);
  },
  $$dom_add$2: function(receiver, value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return this._$dom_add_1$2(receiver, $._convertDartToNative_PrepareForStructuredClone(value), $._convertDartToNative_PrepareForStructuredClone(key));
    return this._$dom_add_2$1(receiver, $._convertDartToNative_PrepareForStructuredClone(value));
  },
  $$dom_add$1: function($receiver, value) {
    return this.$$dom_add$2($receiver, value, $);
  },
  _$dom_add_1$2: function(receiver, value, key) {
    return receiver.add(value,key);
  },
  _$dom_add_2$1: function(receiver, value) {
    return receiver.add(value);
  }
});

$.$defineNativeClass("IDBRequest", {"": "error=",
  get$result: function(receiver) {
    return $._convertNativeToDart_IDBAny(this.result);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  },
  get$onSuccess: function(receiver) {
    return $.CONSTANT7.forTarget$1(receiver);
  }
});

$.$defineNativeClass("IDBTransaction", {"": "error=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  }
});

$.$defineNativeClass("SVGAngle", {"": "value}"});

$.$defineNativeClass("SVGElementInstance", {
  get$onClick: function(receiver) {
    return $.CONSTANT14.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.CONSTANT6.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.CONSTANT8.forTarget$1(receiver);
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height=,width="});

$.$defineNativeClass("SVGFECompositeElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEFloodElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEImageElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEMergeElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height=,width="});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height=,width="});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height=,width="});

$.$defineNativeClass("SVGFETileElement", {"": "height=,width="});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "height=,width="});

$.$defineNativeClass("SVGFilterElement", {"": "height=,width="});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height=,width="});

$.$defineNativeClass("SVGImageElement", {"": "height=,width="});

$.$defineNativeClass("SVGLength", {"": "value}"});

$.$defineNativeClass("SVGLengthList", {
  $index: function(receiver, index) {
    return this.getItem$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  get$length: function(receiver) {
    return this.numberOfItems;
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Length);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if ($.$gt$n(this.get$length(receiver), 0))
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Length]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Length]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGMaskElement", {"": "height=,width="});

$.$defineNativeClass("SVGNumber", {"": "value}"});

$.$defineNativeClass("SVGNumberList", {
  $index: function(receiver, index) {
    return this.getItem$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  get$length: function(receiver) {
    return this.numberOfItems;
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Number);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if ($.$gt$n(this.get$length(receiver), 0))
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Number]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Number]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGPathSegList", {
  $index: function(receiver, index) {
    return this.getItem$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  get$length: function(receiver) {
    return this.numberOfItems;
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.PathSeg);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if ($.$gt$n(this.get$length(receiver), 0))
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.PathSeg]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.PathSeg]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGPatternElement", {"": "height=,width="});

$.$defineNativeClass("SVGRect", {"": "height%,width%"});

$.$defineNativeClass("SVGRectElement", {"": "height=,width="});

$.$defineNativeClass("SVGScriptElement", {"": "type}"});

$.$defineNativeClass("SVGStringList", {
  $index: function(receiver, index) {
    return this.getItem$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  get$length: function(receiver) {
    return this.numberOfItems;
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.String);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if ($.$gt$n(this.get$length(receiver), 0))
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.String]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.String]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGStyleElement", {"": "type}"});

$.$defineNativeClass("SVGElement", {
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver);
  },
  get$$$dom_children: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, value) {
    receiver.id = value;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height=,width=",
  viewport$4: function($receiver, arg0, arg1, arg2, arg3) {
    return this.viewport.call$4(arg0, arg1, arg2, arg3);
  }
});

$.$defineNativeClass("SVGTransformList", {
  $index: function(receiver, index) {
    return this.getItem$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  get$length: function(receiver) {
    return this.numberOfItems;
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Transform);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if ($.$gt$n(this.get$length(receiver), 0))
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Transform]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Transform]; };
  }
});

$.$defineNativeClass("SVGUseElement", {"": "height=,width="});

$.$defineNativeClass("SVGElementInstanceList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return this.item$1(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.ElementInstance);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.ElementInstance]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.ElementInstance]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height=,width="});

$.$defineNativeClass("AudioBuffer", {"": "length="});

$.$defineNativeClass("AudioParam", {"": "value}"});

$.$defineNativeClass("BiquadFilterNode", {"": "type}"});

$.$defineNativeClass("OscillatorNode", {"": "type}"});

$.$defineNativeClass("SQLResultSetRowList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return $.convertNativeToDart_Dictionary(this._item_1$1(receiver, index));
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Map);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (this.get$length(receiver) > 0)
      return this.$index(receiver, 0);
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  _item_1$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Map]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Map]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

// 190 dynamic classes.
// 356 classes
// 34 !leaf
(function() {
  var v0_Uint8Array = "Uint8Array|Uint8ClampedArray", v1_MediaElement = "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement", v2_SvgElement = "SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGStyledElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement", v3_Element = [v1_MediaElement, v2_SvgElement, "Element|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement"].join("|"), v4_CharacterData = "CDATASection|CharacterData|Comment|Text", v5_Document = "Document|HTMLDocument|SVGDocument", v6_DocumentFragment = "DocumentFragment|ShadowRoot", v7_Node = [v3_Element, v4_CharacterData, v5_Document, v6_DocumentFragment, "Attr|DocumentType|EntityReference|Node|Notation|ProcessingInstruction"].join("|"), v8_AbstractWorker = "AbstractWorker|SharedWorker|Worker", v9_WorkerContext = "DedicatedWorkerContext|SharedWorkerContext|WorkerContext", v10_MediaStream = "LocalMediaStream|MediaStream", v11_Request = "IDBOpenDBRequest|IDBRequest";
  $.dynamicSetMetadata([["AbstractWorker", v8_AbstractWorker], ["Uint8Array", v0_Uint8Array], ["ArrayBufferView", [v0_Uint8Array, "ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array"].join("|")], ["Blob", "Blob|File"], ["CharacterData", v4_CharacterData], ["Document", v5_Document], ["DocumentFragment", v6_DocumentFragment], ["DOMTokenList", "DOMSettableTokenList|DOMTokenList"], ["HTMLMediaElement", v1_MediaElement], ["SVGElement", v2_SvgElement], ["Element", v3_Element], ["Entry", "DirectoryEntry|Entry|FileEntry"], ["EntrySync", "DirectoryEntrySync|EntrySync|FileEntrySync"], ["Event", "AudioProcessingEvent|BeforeLoadEvent|CloseEvent|CompositionEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|Event|FocusEvent|HashChangeEvent|IDBVersionChangeEvent|KeyboardEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MouseEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SVGZoomEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TextEvent|TouchEvent|TrackEvent|TransitionEvent|UIEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|WheelEvent|XMLHttpRequestProgressEvent"], ["Node", v7_Node], ["WorkerContext", v9_WorkerContext], ["MediaStream", v10_MediaStream], ["IDBRequest", v11_Request], ["EventTarget", [v7_Node, v8_AbstractWorker, v9_WorkerContext, v10_MediaStream, v11_Request, "AudioContext|BatteryManager|DOMApplicationCache|DOMWindow|EventSource|EventTarget|FileReader|FileWriter|IDBDatabase|IDBTransaction|MediaController|MediaSource|MediaStreamTrack|MessagePort|Notification|OfflineAudioContext|Performance|RTCDTMFSender|RTCDataChannel|RTCPeerConnection|SVGElementInstance|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|XMLHttpRequest|XMLHttpRequestUpload"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["NodeList", "NodeList|RadioNodeList"], ["CSSValueList", "CSSValueList|WebKitCSSFilterValue|WebKitCSSMixFunctionValue|WebKitCSSTransformValue"], ["AudioParam", "AudioGain|AudioParam"]]);
})();

$.main.call$0 = $.main;
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if ((!superclass || typeof superclass) != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=negentropia_home.dart.js.map
