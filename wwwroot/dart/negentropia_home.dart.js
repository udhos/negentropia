// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.ListIterable = {"": "IterableBase;",
  get$iterator: function(_) {
    return $.propertyTypeCheck($.ListIterator$(this, $.getRuntimeTypeArgument(this, this.$asListIterable, 0)), "$isIterator");
  },
  forEach$1: function(_, action) {
    var $length, i, t1;
    $.functionTypeCheck(action);
    $length = this.get$length(this);
    $.intTypeCheck($length);
    if ($length !== ($length | 0))
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, $length); i = $.intTypeCheck(t1.$add(i, 1))) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var i, t1, t2;
    for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, $length); i = $.intTypeCheck(t1.$add(i, 1))) {
      action.call$1(this.elementAt$1(this, i));
      t2 = this.get$length(this);
      if ($length == null ? t2 != null : $length !== t2)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  get$first: function(_) {
    if ($.boolConversionCheck($.$eq(this.get$length(this), 0)))
      throw $.wrapException($.StateError$("No elements"));
    return this.elementAt$1(this, 0);
  },
  skip$1: function(_, count) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(this, count, null, null), "$isIterable");
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListIterable, 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
      $.listTypeCheck(result);
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListIterable, 0)]);
      $.listTypeCheck(result);
    }
    if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !$.getInterceptor(result).$isJavaScriptIndexingBehavior)
      return this.toList$1$growable$bailout1(1, result);
    for (i = 0; $.$lt$n(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >>> 0 !== i || i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return $.listTypeCheck(result);
  },
  toList$1$growable$bailout1: function(state0, result) {
    var t1, i, t2;
    for (t1 = $.getInterceptor$ax(result), i = 0; t2 = $.getInterceptor$n(i), t2.$lt(i, this.get$length(this)); i = $.intTypeCheck(t2.$add(i, 1)))
      t1.$indexSet(result, i, this.elementAt$1(this, i));
    return $.listTypeCheck(result);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
};

$$.SubListIterable = {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.intTypeCheck($.get$length$asx(this._iterable));
    t1 = this._endOrLength;
    if (t1 == null || $.JSNull_methods.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.intTypeCheck($.get$length$asx(this._iterable));
    t1 = this._start;
    if ($.$gt$n(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    $.intTypeCheck($length);
    if ($length !== ($length | 0))
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (t1 !== (t1 | 0))
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 == null || $.JSNull_methods.$ge(t2, $length))
      return $length - t1;
    return $.intTypeCheck($.JSNull_methods.$sub(t2, t1));
  },
  get$length$bailout2: function(state0, $length, t1) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
        $.intTypeCheck($length);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        var t2;
        state0 = 0;
        if ($.$ge$n(t1, $length))
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || $.JSNull_methods.$ge(t2, $length))
          return $.intTypeCheck($.$sub$n($length, t1));
        return $.intTypeCheck($.JSNull_methods.$sub(t2, t1));
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    $.intTypeCheck(realIndex);
    if (realIndex !== (realIndex | 0))
      return this.elementAt$1$bailout2(3, index, 0, realIndex);
    if (index >= 0) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
        $.intTypeCheck(index);
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
        $.intTypeCheck(realIndex);
      case 3:
        state0 = 0;
        if (!$.$lt$n(index, 0)) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            throw $.iae(t1);
          t1 = $.$ge$n(realIndex, t1);
        } else
          t1 = true;
        if (t1)
          throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if ($.$lt$n(count, 0))
      throw $.wrapException($.ArgumentError$(count));
    return $.listSuperNativeTypeCheck($.SubListIterable$(this._iterable, $.$add$ns(this._start, count), this._endOrLength, null), "$isIterable");
  },
  $asListIterable: null,
  $asListIterable: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
};

$$.ListIterator = {"": "Object;_iterable,_liblib1$_length,_index,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib1$_length;
    t2 = this._iterable;
    t3 = $.get$length$asx(t2);
    if (t1 == null ? t3 != null : t1 !== t3)
      throw $.wrapException($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib1$_current = null;
      return false;
    }
    this._liblib1$_current = $.elementAt$1$ax(t2, t3);
    this._index = $.intTypeCheck(this._index + 1);
    return true;
  },
  $isIterator: true,
  $asObject: null
};

$$.MappedIterable = {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.propertyTypeCheck($.MappedIterator$(t1.get$iterator(t1), this._f, $.getRuntimeTypeArgument(this, this.$asMappedIterable, 0), $.getRuntimeTypeArgument(this, this.$asMappedIterable, 1)), "$isIterator");
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return $.intTypeCheck(t1.get$length(t1));
  },
  get$first: function(_) {
    var t1 = this._iterable;
    return this._f$1(t1.get$first(t1));
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, $.intTypeCheck(index)));
  },
  $asIterableBase: function (S, T) { return [T]; },
  $asIterableBase: function (S, T) { return [T]; },
  $asObject: null,
  $asIterable: function (S, T) { return [T]; }
};

$$.MappedIterator = {"": "Iterator;_liblib1$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if ($.boolConversionCheck(t1.moveNext$0())) {
      this._liblib1$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib1$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib1$_current;
  },
  $asIterator: function (S, T) { return [T]; },
  $asObject: null
};

$$.WhereIterable = {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    return $.propertyTypeCheck($.WhereIterator$($.get$iterator$ax(this._iterable), this._f, $.getRuntimeTypeArgument(this, this.$asWhereIterable, 0)), "$isIterator");
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; $.boolConversionCheck(t1.moveNext$0());)
      if ($.boolConversionCheck(this._f$1(t1.get$current())))
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null,
  $asObject: null
};

$$.SkipIterable = {"": "IterableBase;_iterable,_skipCount",
  skip$1: function(_, n) {
    if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
      throw $.wrapException($.ArgumentError$(n));
    return $.listSuperNativeTypeCheck($.SkipIterable$(this._iterable, $.$add$ns(this._skipCount, n), $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0)), "$isIterable");
  },
  get$iterator: function(_) {
    return $.propertyTypeCheck($.SkipIterator$($.get$iterator$ax(this._iterable), this._skipCount, $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0)), "$isIterator");
  },
  SkipIterable$2: function(_iterable, _skipCount, E) {
    var t1 = this._skipCount;
    if (typeof t1 !== "number" || Math.floor(t1) !== t1 || $.$lt$n(t1, 0))
      throw $.wrapException($.ArgumentError$(t1));
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
};

$$.SkipIterator = {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return $.boolTypeCheck(t1.moveNext$0());
  },
  moveNext$0$bailout1: function(state0, i, t1) {
    switch (state0) {
      case 0:
        t1 = this._iterator;
        i = 0;
      case 1:
        var t2, t3;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this._skipCount;
                t3 = $.getInterceptor$n(i);
                if (t2 !== (t2 | 0))
                  throw $.iae(t2);
                if (!t3.$lt(i, t2))
                  break L0;
                t1.moveNext$0();
                i = t3.$add(i, 1);
                $.intTypeCheck(i);
              case 1:
                state0 = 0;
            }
        this._skipCount = 0;
        return $.boolTypeCheck(t1.moveNext$0());
    }
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount, E) {
    var t1 = this._skipCount;
    $.assertHelper(typeof t1 === "number" && Math.floor(t1) === t1 && $.$ge$n(t1, 0));
  },
  $asIterator: null,
  $asObject: null
};

$$.ToString__emitPair_closure = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      $.write$1$x(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.write$1$x(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true,
  $asObject: null,
  $isGameLoopTouchEventFunction: true
};

$$.HashMap_values_closure = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.HashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return $.intTypeCheck(this._map._liblib0$_length);
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.propertyTypeCheck($.HashMapKeyIterator$(t1, t1._computeKeys$0(), $.getRuntimeTypeArgument(this, this.$asHashMapKeyIterable, 0)), "$isIterator");
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i, t2;
    $.functionTypeCheck(f);
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; t2 = $.getInterceptor$n(i), t2.$lt(i, $length); i = $.intTypeCheck(t2.$add(i, 1))) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException($.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
};

$$.HashMapKeyIterator = {"": "Object;_map,_keys,_offset,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  },
  $isIterator: true,
  $asObject: null
};

$$.LinkedHashMap_values_closure = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.LinkedHashMapCell = {"": "Object;_key<,_value,_next<,_previous", $isLinkedHashMapCell: true};

$$.LinkedHashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return $.intTypeCheck(this._map._liblib0$_length);
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.propertyTypeCheck($.LinkedHashMapKeyIterator$(t1, t1._modifications, $.getRuntimeTypeArgument(this, this.$asLinkedHashMapKeyIterable, 0)), "$isIterator");
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    $.functionTypeCheck(f);
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell._key);
      if (modifications !== t1._modifications)
        throw $.wrapException($.ConcurrentModificationError$(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null
};

$$.LinkedHashMapKeyIterator = {"": "Object;_map,_modifications,_cell,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1._key;
        this._cell = this._cell._next;
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications, E) {
    this._cell = this._map._first;
  },
  $isIterator: true,
  $asObject: null
};

$$.NoSuchMethodError_toString_closure = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, str;
    $.stringTypeCheck(key);
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0)) {
      t2 = t1.sb_0;
      t2._contents = t2._contents + ", ";
    }
    t2 = t1.sb_0;
    str = typeof key === "string" ? key : $.S(key);
    t2._contents = t2._contents + str;
    t2 = t1.sb_0;
    t2._contents = t2._contents + ": ";
    t2 = t1.sb_0;
    str = $.Error_safeToString(value);
    str = typeof str === "string" ? str : $.S(str);
    t2._contents = t2._contents + str;
    t1.i_1 = $.intTypeCheck($.$add$ns(t1.i_1, 1));
  },
  $isFunction: true,
  $asObject: null
};

$$.Interceptor = {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.intTypeCheck($.Primitives_objectHashCode(receiver));
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(receiver)) + "'";
  }
};

$$.JSFunction = {"": "Interceptor;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $isFunction: true,
  $asObject: null
};

$$.JSBool = {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $asObject: null
};

$$.JSNull = {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $asObject: null
};

$$.CloseToken = {"": "Object;", $isCloseToken: true};

$$.JsIsolateSink = {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    var t1 = this._port;
    t1.send$1(t1, message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.intTypeCheck($.$add$ns($.get$hashCode$(this._port), 499));
  },
  $isJsIsolateSink: true,
  $asObject: null,
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.boolConversionCheck($.get$globalPostMessageDefined());
    if (!$.boolConversionCheck(this.isWorker))
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && !$.boolConversionCheck(this.isWorker);
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if ($.boolConversionCheck(this.isWorker)) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
      $.get$globalThis().postMessage(t1);
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.interceptedTypeCheck($.Map_Map($.JSInt, $._IsolateContext), "$isMap");
    this.managers = $.interceptedTypeCheck($.Map_Map($.JSInt, $._ManagerStub), "$isMap");
    if ($.boolConversionCheck(this.isWorker)) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    $.functionTypeCheck(code);
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = $.propertyTypeCheck(old, "$is_IsolateContext");
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return $.propertyTypeCheck(t1.$index(t1, portId), "$isReceivePort");
  },
  register$2: function(_, portId, port) {
    var t1 = this.ports;
    if ($.boolConversionCheck(t1.containsKey$1(t1, portId)))
      throw $.wrapException($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = $.intTypeCheck(t2 + 1);
    this.id = $.intTypeCheck(t2);
    this.ports = $.interceptedTypeCheck($.Map_Map($.JSInt, $.ReceivePort), "$isMap");
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true,
  $asObject: null
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    var t1, t2;
    t1 = this.events;
    t2 = $._IsolateEvent$(isolate, fn, msg);
    t2;
    t1._add$1(t1, t2);
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return $.propertyTypeCheck(t1.removeFirst$0(), "$is_IsolateEvent");
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null) {
      var t1 = $globalState.isolates;
      if ($.boolConversionCheck(t1.containsKey$1(t1, $globalState.rootContext.id)))
        if ($.boolConversionCheck($globalState.fromCommandLine)) {
          t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      throw $.wrapException($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if (!$.boolConversionCheck($globalState.isWorker))
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState;
        t1 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        $.get$globalThis().postMessage(t1);
      }

  },
  $is_EventLoop: true
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  $is_IsolateEvent: true
};

$$._ManagerStub = {"": "Object;", $is_ManagerStub: true, $as_ManagerStub: null};

$$._MainManagerStub = {"": "Object;",
  get$id: function(_) {
    return 0;
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  },
  $is_ManagerStub: true,
  $as_ManagerStub: null,
  $asObject: null
};

$$.IsolateNatives__processWorkerMessage_closure = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    var t1, t2;
    t1 = this.entryPoint_0;
    t2 = this.replyTo_1;
    $.functionTypeCheck(t1);
    $.propertyTypeCheck(t2, "$isSendPort");
    $.lazyPort = $.ReceivePortImpl$();
    $.send$2$x(t2, "spawned", $.propertyTypeCheck($._Isolate_port(), "$isReceivePort").toSendPort$0());
    t1.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    $.propertyTypeCheck(replyTo, "$isSendPort");
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port, t1;
    completer = $._AsyncCompleter$(null);
    port = $.ReceivePortImpl$();
    this.send$2(this, message, $._NativeJsSendPort$(port, $globalState.currentContext.id));
    t1 = new $._BaseSendPort_call_closure(completer, port);
    $.functionTypeCheck(t1);
    port._callback = t1;
    return completer.future;
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true,
  $isSendPort: true
};

$$._BaseSendPort_call_closure = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException) {
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(value);
    } else {
      value;
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureValue$1(value);
    }
  },
  $isFunction: true,
  $asObject: null,
  $isGameLoopTouchEventFunction: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $.propertyTypeCheck(replyTo, "$isSendPort");
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort) {
      t1 = this._receivePort;
      t2 = other._receivePort;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return this._receivePort._id;
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true,
  $asObject: null
};

$$._NativeJsSendPort_send_closure = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && !$.$eq($globalState.currentContext.id, t2.get$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3 = t3.events;
    t4 = $._IsolateEvent$(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), t4);
    t4;
    t3._add$1(t3, t4);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$._NativeJsSendPort_send__closure = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $.propertyTypeCheck(replyTo, "$isSendPort");
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort) {
      t1 = this._workerId;
      t2 = other._workerId;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this._isolateId;
        t2 = other._isolateId;
        if (t1 == null ? t2 == null : t1 === t2) {
          t1 = this._receivePortId;
          t2 = other._receivePortId;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true,
  $asObject: null
};

$$._WorkerSendPort_send_closure = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($.boolConversionCheck($globalState.isWorker)) {
      $globalState;
      $.get$globalThis().postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = $.interceptedTypeCheck(t2.$index(t2, t1.get$_workerId()), "$is_ManagerStub");
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.ReceivePortImpl = {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.currentContext.id);
  },
  ReceivePortImpl$0: function() {
    var t1 = $._globalState().currentContext;
    t1.register$2(t1, this._id, this);
  },
  $isReceivePortImpl: true,
  $isReceivePort: true,
  $asObject: null
};

$$._waitForPendingPorts_closure = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax($.get$values$x(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      $.JSArray_methods.add$1(this.ports, port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      $.JSArray_methods.add$1(this.ports, t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_closure = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$._PendingSendPortFinder_visitMap_closure = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort._id];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return $._NativeJsSendPort$(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return $._WorkerSendPort$(x._workerId, x._isolateId, x._receivePortId);
    throw $.wrapException("Illegal underlying port " + $.S(this.get$p()));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    $.listTypeCheck(list);
    t1 = $.getInterceptor$asx(list);
    managerId = $.intTypeCheck(t1.$index(list, 1));
    isolateId = $.intTypeCheck(t1.$index(list, 2));
    receivePortId = $.intTypeCheck(t1.$index(list, 3));
    t1 = $globalState.currentManagerId;
    if (managerId == null ? t1 == null : managerId === t1) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    $.listTypeCheck(list);
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = $.boolTypeCheck(t1.$index(list, 2));
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    $.listTypeCheck(list);
    return $.C_CloseToken;
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    $.assertHelper(this.tagged == null);
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; $.$lt$n(i, $length); ++i) {
      t1 = this.tagged;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  },
  $asObject: null
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = $.listTypeCheck(t1.$index(t1, list));
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    $.intTypeCheck(len);
    if (len !== (len | 0))
      return this.visitList$1$bailout1(1, list, t1, len);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list, t1, len) {
    var copy, t2, i, t3;
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.$lt$n(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = $.interceptedTypeCheck(t2.$index(t2, map), "$isMap");
    t2 = t1.copy_0;
    if (t2 != null)
      return $.interceptedTypeCheck(t2, "$isMap");
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    $.forEach$1$ax(map, new $._Copier_visitMap_closure(t1, this));
    return $.interceptedTypeCheck(t1.copy_0, "$isMap");
  }
};

$$._Copier_visitMap_closure = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $isFunction: true,
  $asObject: null,
  $isGameLoopTouchEventFunction: true
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.intTypeCheck(t1.$index(t1, list));
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = $.intTypeCheck(id + 1);
    $.intTypeCheck(id);
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.intTypeCheck(t1.$index(t1, map));
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = $.intTypeCheck(id + 1);
    $.intTypeCheck(id);
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = $.getInterceptor$x(map);
    return ["map", id, this._serializeList$1($.toList$0$ax(t1.get$keys(map))), this._serializeList$1($.toList$0$ax(t1.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, t2, i, t3;
    $.listTypeCheck(list);
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    $.intTypeCheck(len);
    if (len !== (len | 0))
      return this._serializeList$1$bailout(1, list, t1, len);
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    var result, t2, i, t3;
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; $.$lt$n(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.interceptedTypeCheck($.HashMap$(null, null), "$isMap");
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id, result;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    $.assertHelper(typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList));
    switch (t1.$index(x, 0)) {
      case "ref":
        $.listTypeCheck(x);
        id = $.intTypeCheck(t1.$index(x, 1));
        t1 = this._deserialized;
        result = t1.$index(t1, id);
        $.assertHelper(result != null);
        return result;
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.listTypeCheck(x);
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    $.listTypeCheck(x);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    $.intTypeCheck(id);
    dartList = t1.$index(x, 2);
    $.listTypeCheck(dartList);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.getInterceptor(dartList).$isJavaScriptIndexingBehavior)
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; $.$lt$n(i, len); ++i) {
      if (i >>> 0 !== i || i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id, len, t1) {
    switch (state0) {
      case 0:
        $.listTypeCheck(x);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        $.intTypeCheck(id);
        dartList = t1.$index(x, 2);
        $.listTypeCheck(dartList);
      case 1:
        state0 = 0;
        t1 = this._deserialized;
        t1.$indexSet(t1, id, dartList);
        t1 = $.getInterceptor$asx(dartList);
        len = t1.get$length(dartList);
        $.intTypeCheck(len);
      case 2:
        var i, t2;
        state0 = 0;
        for (i = 0; t2 = $.getInterceptor$n(i), t2.$lt(i, len); i = $.intTypeCheck(t2.$add(i, 1)))
          t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
        return dartList;
    }
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, t3;
    $.listTypeCheck(x);
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = $.intTypeCheck(t1.$index(x, 1));
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    $.listTypeCheck(keys);
    values = t1.$index(x, 3);
    $.listTypeCheck(values);
    t1 = $.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    $.intTypeCheck(len);
    if (len !== (len | 0))
      return this._deserializeMap$1$bailout(1, result, t1, len, keys, values);
    t2 = $.getInterceptor$asx(values);
    $.assertHelper(len === t2.get$length(values));
    for (i = 0; t3 = $.getInterceptor$n(i), t3.$lt(i, len); i = $.intTypeCheck(t3.$add(i, 1)))
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  _deserializeMap$1$bailout: function(state0, result, t1, len, keys, values) {
    var t2, t3, i;
    t2 = $.getInterceptor$asx(values);
    t3 = t2.get$length(values);
    $.assertHelper(len == null ? t3 == null : len === t3);
    for (i = 0; t3 = $.getInterceptor$n(i), t3.$lt(i, len); i = $.intTypeCheck(t3.$add(i, 1)))
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle",
  set$_handle: function(v) {
    this._handle = $.intTypeCheck(v);
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    $.intTypeCheck(milliseconds);
    $.functionTypeCheck(callback);
    if (milliseconds === 0)
      t1 = !$.hasTimer() || $.boolConversionCheck($._globalState().isWorker);
    else
      t1 = false;
    if (t1) {
      t1 = $._globalState;
      t1().topEventLoop.enqueue$3(t1().currentContext, callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().topEventLoop;
      t1.activeTimerCount = $.intTypeCheck(t1.activeTimerCount + 1);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback(this, callback), 0), milliseconds);
    } else {
      $.assertHelper($.$gt$n(milliseconds, 0));
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
    }
  },
  $asObject: null
};

$$.TimerImpl_internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = $.intTypeCheck(t1.activeTimerCount - 1);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.JSArray = {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    value;
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException($.RangeError$value(-1));
    return receiver.pop();
  },
  addAll$1: function(receiver, collection) {
    var t1, e;
    for (t1 = $.get$iterator$ax($.listSuperNativeTypeCheck(collection, "$isIterable")); $.boolConversionCheck(t1.moveNext$0());) {
      e = t1.get$current();
      e;
      if (!!receiver.fixed$length)
        $.throwExpression($.UnsupportedError$("add"));
      receiver.push(e);
    }
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.functionTypeCheck(f)));
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, n, null, null), "$isIterable");
  },
  elementAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    $.intTypeCheck(start);
    if (start == null)
      $.throwExpression($.ArgumentError$(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    else
      start;
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw $.wrapException($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.wrapException($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return $.listTypeCheck([]);
    return $.listTypeCheck(receiver.slice(start, end));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    $.intTypeCheck(skipCount);
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  indexOf$2: function(receiver, element, start) {
    return $.intTypeCheck($.Arrays_indexOf(receiver, element, start, receiver.length));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  toList$1$growable: function(receiver, growable) {
    return $.listTypeCheck($.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0)));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0)), "$isIterator");
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    $.intTypeCheck(newLength);
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.wrapException($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    $.intTypeCheck(index);
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    value;
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    receiver[index] = value;
  },
  $asInterceptor: null,
  $asObject: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
};

$$.JSMutableArray = {"": "JSArray;", $asJSArray: function() { return [null]; }, $asObject: null, $asList: function() { return [null]; }, $asIterable: function() { return [null]; }};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return $.stringTypeCheck(this.stack);
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.stringTypeCheck($.toString$0(dartException));
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$._StackTrace = {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return $.stringTypeCheck(t1 != null ? t1 : "");
  },
  $asObject: null
};

$$.invokeClosure_closure = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.invokeClosure_closure0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.invokeClosure_closure1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true,
  $asObject: null
};

$$.Null = {"": "Object;"};

$$.TypeErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  },
  $asObject: null
};

$$.CastErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  },
  $asObject: null
};

$$.JSNumber = {"": "num/Interceptor;",
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.wrapException($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.wrapException($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? $.doubleTypeCheck(Math.ceil(receiver)) : $.doubleTypeCheck(Math.floor(receiver));
    return $.intTypeCheck(truncated == -0.0 ? 0 : truncated);
  },
  truncate$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      $.throwExpression($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      $.throwExpression($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? $.doubleTypeCheck(Math.ceil(receiver)) : $.doubleTypeCheck(Math.floor(receiver));
    return $.intTypeCheck(truncated == -0.0 ? 0 : truncated);
  },
  floor$0: function(receiver) {
    return $.intTypeCheck($.toInt$0$nx($.doubleTypeCheck(Math.floor(receiver))));
  },
  round$0: function(receiver) {
    return $.intTypeCheck(this.toInt$0(this.roundToDouble$0(receiver)));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return $.doubleTypeCheck(-Math.round(-receiver));
    else
      return $.doubleTypeCheck(Math.round(receiver));
  },
  toDouble$0: function(receiver) {
    return $.doubleTypeCheck(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    $.numTypeCheck(other);
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true,
  $asObject: null
};

$$.JSInt = {"": "int/JSNumber;", $isint: true, $isnum: true, $asObject: null};

$$.JSDouble = {"": "double/JSNumber;", $isdouble: true, $isnum: true, $asObject: null};

$$.JSString = {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (typeof index !== "number")
      throw $.wrapException($.ArgumentError$(index));
    else
      index;
    if (index < 0)
      throw $.wrapException($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.wrapException($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    $.stringTypeCheck(other);
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    return $.listTypeCheck(receiver.split(pattern));
  },
  startsWith$1: function(receiver, other) {
    var otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.intTypeCheck(startIndex);
    $.intTypeCheck(endIndex);
    if (typeof startIndex !== "number")
      $.throwExpression($.ArgumentError$(startIndex));
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression($.ArgumentError$(endIndex));
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0))
      throw $.wrapException($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex))
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  indexOf$2: function(receiver, other, start) {
    $.intTypeCheck(start);
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    else
      start;
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, t1;
    for (hash = 0, i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, receiver.length); i = $.intTypeCheck(t1.$add(i, 1))) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    $.intTypeCheck(index);
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $asObject: null,
  $isString: true
};

$$._convertJsonToDart_closure = {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  $isFunction: true,
  $asObject: null,
  $isGameLoopTouchEventFunction: true
};

$$._convertJsonToDart_walk = {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, t2, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; t2 = $.getInterceptor$n(i), t2.$lt(i, list.length); i = $.intTypeCheck(t2.$add(i, 1)))
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; t2 = keys.length, $.$lt$n(i, t2); ++i) {
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      key = $.stringTypeCheck(keys[i]);
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.Future = {"": "Object;", $isFuture: true};

$$._Completer = {"": "Object;", $asObject: null};

$$._AsyncCompleter = {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    var t1 = new $._AsyncCompleter__setFutureValue_closure(value, this.future);
    $.functionTypeCheck(t1);
    $.JSArray_methods.add$1($.get$_asyncCallbacks(), t1);
    if (!$._callbacksAreEnqueued) {
      $.functionTypeCheck($._asyncRunCallback);
      $.Timer_run($._asyncRunCallback);
      $._callbacksAreEnqueued = true;
    }
  },
  _setFutureError$1: function(error) {
    var t1 = new $._AsyncCompleter__setFutureError_closure(error, this.future);
    $.functionTypeCheck(t1);
    $.JSArray_methods.add$1($.get$_asyncCallbacks(), t1);
    if (!$._callbacksAreEnqueued) {
      $.functionTypeCheck($._asyncRunCallback);
      $.Timer_run($._asyncRunCallback);
      $._callbacksAreEnqueued = true;
    }
  },
  $as_Completer: null,
  $as_Completer: null,
  $asObject: null
};

$$._AsyncCompleter__setFutureValue_closure = {"": "Closure;value_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.value_0);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$._AsyncCompleter__setFutureError_closure = {"": "Closure;error_0,future_1",
  call$0: function() {
    this.future_1._setError$1(this.error_0);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$._SyncCompleter = {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _setFutureError$1: function(error) {
    this.future._setError$1(error);
  },
  $as_Completer: null,
  $as_Completer: null,
  $asObject: null
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener<",
  set$_nextListener: function(v) {
    this._nextListener = $.propertyTypeCheck(v, "$is_FutureListener");
  },
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  },
  $is_FutureListener: true,
  $asObject: null
};

$$._FutureImpl = {"": "Object;_state<,_resultOrListeners<",
  set$_state: function(v) {
    this._state = $.intTypeCheck(v);
  },
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    $.functionTypeCheck(f);
    $.functionTypeCheck(onError);
    if (!this.get$_isComplete()) {
      if (onError == null) {
        t1 = $._ThenFuture$(f, null, null);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError, null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError()) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this, null);
    } else {
      $.assertHelper(this.get$_hasValue());
      return this._handleValue$1(f);
    }
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    $.functionTypeCheck(f);
    $.functionTypeCheck(test);
    if (this.get$_hasValue())
      return $._FutureWrapper$(this, null);
    if (!this.get$_isComplete()) {
      t1 = $._CatchErrorFuture$(f, test, null);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture;
    $.functionTypeCheck(onValue);
    $.assertHelper(this.get$_hasValue());
    thenFuture = $._ThenFuture$(onValue, null, null);
    $.Timer_run(new $._FutureImpl__handleValue_closure(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    $.functionTypeCheck(onError);
    $.functionTypeCheck(test);
    $.assertHelper(this.get$_hasError());
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test, null);
    $.Timer_run(new $._FutureImpl__handleError_closure(error, errorFuture));
    return errorFuture;
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    value;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = $.propertyTypeCheck(this._removeListeners$0(), "$is_FutureListener");
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = $.propertyTypeCheck(listeners.get$_nextListener(), "$is_FutureListener");
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.Bound__setValue__FutureImpl(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = $.propertyTypeCheck(this._removeListeners$0(), "$is_FutureListener");
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = $.propertyTypeCheck(listeners.get$_nextListener(), "$is_FutureListener");
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.Bound__setError__FutureImpl(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_closure(this));
  },
  _removeListeners$0: function() {
    var current, prev, next;
    $.assertHelper(!this.get$_isComplete());
    current = $.propertyTypeCheck(this._resultOrListeners, "$is_FutureListener");
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = $.propertyTypeCheck(current.get$_nextListener(), "$is_FutureListener");
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1;
    if (!this.get$_isComplete()) {
      t1 = $._FutureListenerWrapper$(future, null);
      $.assertHelper(!this.get$_isComplete());
      $.assertHelper(t1._nextListener == null);
      t1._nextListener = $.propertyTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = t1;
    } else if (this.get$_hasValue())
      future._setValue$1(this._resultOrListeners);
    else {
      $.assertHelper(this.get$_hasError());
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture) {
      result;
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    } else
      this._setValue$1(result);
  },
  _FutureImpl$immediateError$2: function(error, stackTrace, T) {
    if (stackTrace != null)
      $._attachStackTrace(error, stackTrace);
    this._setError$1(error);
  },
  _FutureImpl$immediate$1: function(value, T) {
    value;
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true,
  $asObject: null
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0;
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(error);
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$._FutureImpl__FutureImpl$wait_closure = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.intTypeCheck($.$sub$n(t1.remaining_2, 1));
    if ($.boolConversionCheck($.$eq(t1.remaining_2, 0))) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t1;
      if (t2._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t2._isComplete = true;
      t2._setFutureValue$1(t1);
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$._FutureImpl__handleValue_closure = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$._FutureImpl__handleError_closure = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$._FutureImpl__scheduleUnhandledError_closure = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, trace;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1.set$_state((t1.get$_state() & 4294967291) >>> 0);
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error));
      trace = $.getAttachedStackTrace(error);
      if (trace != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
      throw $.wrapException(error);
    }
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener<",
  set$_nextListener: function(v) {
    this._nextListener = $.propertyTypeCheck(v, "$is_FutureListener");
  },
  _subscribeTo$1: function(future) {
    $.assertHelper(!future.get$_isComplete());
    $.assertHelper(this._nextListener == null);
    this._nextListener = $.propertyTypeCheck(future._resultOrListeners, "$is_FutureListener");
    future._resultOrListeners = this;
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asObject: null,
  $asFuture: function (S, T) { return [T]; },
  $as_FutureListener: function (S, T) { return [S]; },
  $is_FutureListener: true
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, s, exception, t1;
    value;
    $.assertHelper(true);
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asObject: null,
  $asFuture: function (S, T) { return [T]; },
  $as_FutureListener: function (S, T) { return [S]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    $.assertHelper(this._onError != null);
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = $.boolTypeCheck(this._test$1(error));
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($._asyncError(e, s));
        return;
      }

      if (!$.boolConversionCheck(matchesTest)) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asObject: null,
  $asFuture: null,
  $as_FutureListener: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, s, exception, t1;
    $.assertHelper(this._onError != null);
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asObject: null,
  $asFuture: function (S, T) { return [T]; },
  $as_FutureListener: function (S, T) { return [S]; }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return $.propertyTypeCheck(this._future.then$2$onError($.functionTypeCheck($function), $.functionTypeCheck(onError)), "$isFuture");
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return $.propertyTypeCheck(this._future.catchError$2$test($.functionTypeCheck($function), $.functionTypeCheck(test)), "$isFuture");
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true,
  $asObject: null
};

$$.Stream = {"": "Object;",
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = $.propertyTypeCheck($._FutureImpl$($.JSInt), "$is_FutureImpl");
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return $.propertyTypeCheck(future, "$isFuture");
  },
  get$first: function(_) {
    var t1, future;
    t1 = {};
    future = $.propertyTypeCheck($._FutureImpl$($.getRuntimeTypeArgument(this, this.$asStream, 0)), "$is_FutureImpl");
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_first_closure(t1, future), true, new $.Stream_first_closure0(future), future.get$_setError());
    return $.propertyTypeCheck(future, "$isFuture");
  },
  $isStream: true
};

$$.Stream_length_closure = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.intTypeCheck($.$add$ns(t1.count_0, 1));
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.Stream_length_closure0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.Stream_first_closure = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0.subscription_0;
    t1.cancel$0(t1);
    this.future_1._setValue$1(value);
    return;
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.Stream_first_closure0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.StateError$("No elements"));
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.StreamSubscription = {"": "Object;", $isStreamSubscription: true};

$$.EventSink = {"": "Object;"};

$$.Timer_run_closure = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)); i = $.intTypeCheck($.$add$ns(i, 1))) {
      callback = $.functionTypeCheck($.$index$asx(runCallbacks, i));
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.intTypeCheck($.$add$ns(i, 1));
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.HashMap = {"": "Object;_liblib0$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return $.intTypeCheck(this._liblib0$_length);
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$keys: function(_) {
    return $.listSuperNativeTypeCheck($.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asHashMap, 0)), "$isIterable");
  },
  get$values: function(_) {
    var t1 = this.get$keys(this);
    return $.listSuperNativeTypeCheck(t1.map$1(t1, new $.HashMap_values_closure(this)), "$isIterable");
  },
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    key;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex($.listTypeCheck(rest[$.get$hashCode$(key) & 0x3ffffff]), key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, index;
    key;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return null;
      t1 = rest[$.get$hashCode$(key) & 0x3ffffff];
      $.listTypeCheck(t1);
      index = $.HashMap__findBucketIndex(t1, key);
      $.intTypeCheck(index);
      if (index !== (index | 0))
        return this.$$index$bailout(1, t1, index);
      return index < 0 ? null : t1[index + 1];
    }
  },
  $$index$bailout: function(state0, t1, index) {
    switch (state0) {
      case 0:
        key;
      case 1:
        var strings, entry, nums, rest, t2;
        if (state0 === 0 && typeof key === "string" && key !== "__proto__") {
          strings = this._strings;
          if (strings == null)
            t1 = null;
          else {
            entry = strings[key];
            t1 = entry === strings ? null : entry;
          }
          return t1;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && typeof key === "number" && (key & 0x3ffffff) === key) {
                nums = this._nums;
                if (nums == null)
                  t1 = null;
                else {
                  entry = nums[key];
                  t1 = entry === nums ? null : entry;
                }
                return t1;
              } else
                switch (state0) {
                  case 0:
                    rest = this._rest;
                    if (rest == null)
                      return null;
                    t1 = rest[$.get$hashCode$(key) & 0x3ffffff];
                    $.listTypeCheck(t1);
                    index = $.HashMap__findBucketIndex(t1, key);
                    $.intTypeCheck(index);
                  case 1:
                    state0 = 0;
                    t2 = $.getInterceptor$n(index);
                    return t2.$lt(index, 0) ? null : t1[t2.$add(index, 1)];
                }
          }
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    key;
    value;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      key;
      value;
      if (strings[key] == null) {
        this._liblib0$_length = $.intTypeCheck(this._liblib0$_length + 1);
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      key;
      value;
      if (nums[key] == null) {
        this._liblib0$_length = $.intTypeCheck(this._liblib0$_length + 1);
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib0$_length = $.intTypeCheck(this._liblib0$_length + 1);
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        $.intTypeCheck(index);
        if (index !== (index | 0))
          return this.$$indexSet$bailout(1, key, value, bucket, index);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib0$_length = $.intTypeCheck(this._liblib0$_length + 1);
          this._keys = null;
        }
      }
    }
  },
  $$indexSet$bailout: function(state0, key, value, bucket, index) {
    switch (state0) {
      case 0:
        key;
        value;
      case 1:
        var strings, table, nums, rest, hash, t1;
        if (state0 === 0 && typeof key === "string" && key !== "__proto__") {
          strings = this._strings;
          if (strings == null) {
            table = Object.create(null);
            if (table == null)
              table["<non-identifier-key>"] = table;
            else
              table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._strings = table;
            strings = table;
          }
          key;
          value;
          if (strings[key] == null) {
            this._liblib0$_length = $.intTypeCheck(this._liblib0$_length + 1);
            this._keys = null;
          }
          if (value == null)
            strings[key] = strings;
          else
            strings[key] = value;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && typeof key === "number" && (key & 0x3ffffff) === key) {
                nums = this._nums;
                if (nums == null) {
                  table = Object.create(null);
                  if (table == null)
                    table["<non-identifier-key>"] = table;
                  else
                    table["<non-identifier-key>"] = table;
                  delete table["<non-identifier-key>"];
                  this._nums = table;
                  nums = table;
                }
                key;
                value;
                if (nums[key] == null) {
                  this._liblib0$_length = $.intTypeCheck(this._liblib0$_length + 1);
                  this._keys = null;
                }
                if (value == null)
                  nums[key] = nums;
                else
                  nums[key] = value;
              } else
                switch (state0) {
                  case 0:
                    rest = this._rest;
                    if (rest == null) {
                      table = Object.create(null);
                      if (table == null)
                        table["<non-identifier-key>"] = table;
                      else
                        table["<non-identifier-key>"] = table;
                      delete table["<non-identifier-key>"];
                      this._rest = table;
                      rest = table;
                    }
                    hash = $.get$hashCode$(key) & 0x3ffffff;
                    bucket = rest[hash];
                  case 1:
                    if (state0 === 0 && bucket == null) {
                      t1 = [key, value];
                      if (t1 == null)
                        rest[hash] = rest;
                      else
                        rest[hash] = t1;
                      this._liblib0$_length = $.intTypeCheck(this._liblib0$_length + 1);
                      this._keys = null;
                    } else
                      switch (state0) {
                        case 0:
                          index = $.HashMap__findBucketIndex(bucket, key);
                          $.intTypeCheck(index);
                        case 1:
                          state0 = 0;
                          t1 = $.getInterceptor$n(index);
                          if (t1.$ge(index, 0))
                            bucket[t1.$add(index, 1)] = value;
                          else {
                            bucket.push(key, value);
                            this._liblib0$_length = $.intTypeCheck(this._liblib0$_length + 1);
                            this._keys = null;
                          }
                      }
                }
          }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    key;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return null;
      bucket = $.listTypeCheck(rest[$.get$hashCode$(key) & 0x3ffffff]);
      index = $.intTypeCheck($.HashMap__findBucketIndex(bucket, key));
      if ($.$lt$n(index, 0))
        return null;
      this._liblib0$_length = $.intTypeCheck(this._liblib0$_length - 1);
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, t1, key;
    $.functionTypeCheck(action);
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, $length); i = $.intTypeCheck(t1.$add(i, 1))) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0, t2;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib0$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, entries); i = $.intTypeCheck(t1.$add(i, 1))) {
        result[index] = names[i];
        index = $.intTypeCheck($.$add$ns(index, 1));
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, entries); i = $.intTypeCheck(t1.$add(i, 1))) {
        result[index] = +names[i];
        index = $.intTypeCheck($.$add$ns(index, 1));
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, entries); i = $.intTypeCheck(t1.$add(i, 1))) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; t2 = $.getInterceptor$n(i0), t2.$lt(i0, $length); i0 = $.intTypeCheck(t2.$add(i0, 2))) {
          result[index] = bucket[i0];
          index = $.intTypeCheck($.$add$ns(index, 1));
        }
      }
    }
    $.assertHelper(index === this._liblib0$_length);
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    key;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib0$_length = $.intTypeCheck(this._liblib0$_length - 1);
      this._keys = null;
      return value;
    } else
      return null;
  },
  $isMap: true,
  $asMap: null,
  $asObject: null
};

$$.IterableBase = {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, $.functionTypeCheck(f), $.getRuntimeTypeArgument(this, this.$asIterableBase, 0), null);
  },
  forEach$1: function(_, f) {
    var t1;
    $.functionTypeCheck(f);
    for (t1 = this.get$iterator(this); $.boolConversionCheck(t1.moveNext$0());)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.listTypeCheck($.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0)));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; $.boolConversionCheck(it.moveNext$0());)
      count = $.intTypeCheck($.$add$ns(count, 1));
    return count;
  },
  skip$1: function(_, n) {
    return $.listSuperNativeTypeCheck($.SkipIterable$(this, n, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0)), "$isIterable");
  },
  get$first: function(_) {
    var it = this.get$iterator(this);
    if (!$.boolConversionCheck(it.moveNext$0()))
      throw $.wrapException($.StateError$("No elements"));
    return it.get$current();
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.elementAt$1$bailout(1, index);
    if (index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; $.boolConversionCheck(t1.moveNext$0());) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      remaining = $.intTypeCheck($.$sub$n(remaining, 1));
    }
    throw $.wrapException($.RangeError$value(index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; $.boolConversionCheck(t1.moveNext$0());) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      remaining = $.intTypeCheck($.$sub$n(remaining, 1));
    }
    throw $.wrapException($.RangeError$value(index));
  },
  $isIterable: true,
  $asIterable: null,
  $asObject: null
};

$$.LinkedHashMap = {"": "Object;_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    key;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return null;
      cell = $.propertyTypeCheck(strings[key], "$isLinkedHashMapCell");
      return cell == null ? null : cell._value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return null;
      cell = $.propertyTypeCheck(nums[key], "$isLinkedHashMapCell");
      return cell == null ? null : cell._value;
    } else {
      rest = this._rest;
      if (rest == null)
        return null;
      bucket = $.listTypeCheck(rest[$.get$hashCode$(key) & 0x3ffffff]);
      index = $.intTypeCheck($.LinkedHashMap__findBucketIndex(bucket, key));
      if ($.$lt$n(index, 0))
        return null;
      return $.propertyTypeCheck(bucket[index], "$isLinkedHashMapCell")._value;
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    key;
    value;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        $.assertHelper(table != null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        $.assertHelper(table != null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        $.assertHelper(table != null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [this._newLinkedCell$2(key, value)];
        $.assertHelper(t1 != null);
        rest[hash] = t1;
      } else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        $.intTypeCheck(index);
        if (index !== (index | 0))
          return this.$$indexSet$bailout(1, key, value, bucket, index);
        if (index >= 0)
          $.propertyTypeCheck(bucket[index], "$isLinkedHashMapCell")._value = value;
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  $$indexSet$bailout: function(state0, key, value, bucket, index) {
    switch (state0) {
      case 0:
        key;
        value;
      case 1:
        var strings, table, nums, rest, hash, t1;
        if (state0 === 0 && typeof key === "string" && key !== "__proto__") {
          strings = this._strings;
          if (strings == null) {
            table = Object.create(null);
            $.assertHelper(table != null);
            table["<non-identifier-key>"] = table;
            delete table["<non-identifier-key>"];
            this._strings = table;
            strings = table;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && typeof key === "number" && (key & 0x3ffffff) === key) {
                nums = this._nums;
                if (nums == null) {
                  table = Object.create(null);
                  $.assertHelper(table != null);
                  table["<non-identifier-key>"] = table;
                  delete table["<non-identifier-key>"];
                  this._nums = table;
                  nums = table;
                }
                this._addHashTableEntry$3(nums, key, value);
              } else
                switch (state0) {
                  case 0:
                    rest = this._rest;
                    if (rest == null) {
                      table = Object.create(null);
                      $.assertHelper(table != null);
                      table["<non-identifier-key>"] = table;
                      delete table["<non-identifier-key>"];
                      this._rest = table;
                      rest = table;
                    }
                    hash = $.get$hashCode$(key) & 0x3ffffff;
                    bucket = rest[hash];
                  case 1:
                    if (state0 === 0 && bucket == null) {
                      t1 = [this._newLinkedCell$2(key, value)];
                      $.assertHelper(t1 != null);
                      rest[hash] = t1;
                    } else
                      switch (state0) {
                        case 0:
                          index = $.LinkedHashMap__findBucketIndex(bucket, key);
                          $.intTypeCheck(index);
                        case 1:
                          state0 = 0;
                          if ($.$ge$n(index, 0))
                            $.propertyTypeCheck(bucket[index], "$isLinkedHashMapCell")._value = value;
                          else
                            bucket.push(this._newLinkedCell$2(key, value));
                      }
                }
          }
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    $.functionTypeCheck(action);
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell._key, cell._value);
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  get$keys: function(_) {
    return $.listSuperNativeTypeCheck($.LinkedHashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asLinkedHashMap, 0)), "$isIterable");
  },
  get$values: function(_) {
    var t1 = this.get$keys(this);
    return $.listSuperNativeTypeCheck(t1.map$1(t1, new $.LinkedHashMap_values_closure(this)), "$isIterable");
  },
  get$length: function(_) {
    return $.intTypeCheck(this._liblib0$_length);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell, t1;
    key;
    value;
    cell = $.propertyTypeCheck(table[key], "$isLinkedHashMapCell");
    if (cell == null) {
      t1 = this._newLinkedCell$2(key, value);
      $.assertHelper(true);
      table[key] = t1;
    } else
      cell._value = value;
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$(key, value);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._liblib0$_length = $.intTypeCheck(this._liblib0$_length + 1);
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  $isMap: true,
  $asMap: null,
  $asObject: null
};

$$.ListBase = {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null, $asObject: null};

$$.ListMixin = {"": "Object;",
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0)), "$isIterator");
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, $.intTypeCheck(index));
  },
  forEach$1: function(receiver, action) {
    var $length, i, t1;
    $.functionTypeCheck(action);
    $length = this.get$length(receiver);
    $.intTypeCheck($length);
    if ($length !== ($length | 0))
      return this.forEach$1$bailout(1, action, receiver, $length);
    for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, $length); i = $.intTypeCheck(t1.$add(i, 1))) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver, $length) {
    var i, t1, t2;
    for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, $length); i = $.intTypeCheck(t1.$add(i, 1))) {
      action.call$1(this.$index(receiver, i));
      t2 = this.get$length(receiver);
      if ($length == null ? t2 != null : $length !== t2)
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
  },
  get$first: function(receiver) {
    if ($.boolConversionCheck($.$eq(this.get$length(receiver), 0)))
      throw $.wrapException($.StateError$("No elements"));
    return this.$index(receiver, 0);
  },
  get$last: function(receiver) {
    if ($.boolConversionCheck($.$eq(this.get$length(receiver), 0)))
      throw $.wrapException($.StateError$("No elements"));
    return this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
  },
  where$1: function(receiver, test) {
    return $.listSuperNativeTypeCheck($.WhereIterable$(receiver, $.functionTypeCheck(test), $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0)), "$isIterable");
  },
  skip$1: function(receiver, count) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, count, null, null), "$isIterable");
  },
  toList$1$growable: function(receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0)]);
      $.JSArray_methods.set$length(result, this.get$length(receiver));
      $.listTypeCheck(result);
    } else {
      result = $.List_List(this.get$length(receiver), $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0)]);
      $.listTypeCheck(result);
    }
    if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !$.getInterceptor(result).$isJavaScriptIndexingBehavior)
      return this.toList$1$growable$bailout(1, result, receiver);
    for (i = 0; $.$lt$n(i, this.get$length(receiver)); ++i) {
      t1 = this.$index(receiver, i);
      if (i >>> 0 !== i || i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return $.listTypeCheck(result);
  },
  toList$1$growable$bailout: function(state0, result, receiver) {
    var t1, i, t2;
    for (t1 = $.getInterceptor$ax(result), i = 0; t2 = $.getInterceptor$n(i), t2.$lt(i, this.get$length(receiver)); i = $.intTypeCheck(t2.$add(i, 1)))
      t1.$indexSet(result, i, this.$index(receiver, i));
    return $.listTypeCheck(result);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1;
    element;
    t1 = this.get$length(receiver);
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  removeLast$0: function(receiver) {
    var result;
    if ($.boolConversionCheck($.$eq(this.get$length(receiver), 0)))
      throw $.wrapException($.StateError$("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
      throw $.wrapException($.RangeError$range(start, 0, this.get$length(receiver)));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
      throw $.wrapException($.RangeError$range(end, start, this.get$length(receiver)));
  },
  sublist$2: function(receiver, start, end) {
    var $length, result, i, t1;
    $.intTypeCheck(start);
    if (start !== (start | 0))
      return this.sublist$2$bailout(1, start, end, receiver);
    $.intTypeCheck(end);
    if (end == null)
      end = $.intTypeCheck(this.get$length(receiver));
    this._rangeCheck$2(receiver, start, end);
    $length = $.$sub$n(end, start);
    $.intTypeCheck($length);
    if ($length !== ($length | 0))
      return this.sublist$2$bailout(2, start, 0, receiver, $length);
    result = $.List_List($, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
    $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0)]);
    $.JSArray_methods.set$length(result, $length);
    $.listTypeCheck(result);
    if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !$.getInterceptor(result).$isJavaScriptIndexingBehavior)
      return this.sublist$2$bailout(3, start, 0, receiver, $length, result);
    for (i = 0; $.$lt$n(i, $length); ++i) {
      if (typeof i !== "number")
        throw $.iae(i);
      t1 = this.$index(receiver, start + i);
      if (i >>> 0 !== i || i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return $.listTypeCheck(result);
  },
  sublist$2$bailout: function(state0, start, end, receiver, $length, result) {
    switch (state0) {
      case 0:
        $.intTypeCheck(start);
      case 1:
        state0 = 0;
        $.intTypeCheck(end);
        if (end == null)
          end = $.intTypeCheck(this.get$length(receiver));
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
        $.intTypeCheck($length);
      case 2:
        state0 = 0;
        result = $.List_List($, $.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0));
        $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(receiver, receiver.$asListMixin, 0)]);
        $.JSArray_methods.set$length(result, $length);
        $.listTypeCheck(result);
      case 3:
        var t1, t2, i, t3;
        state0 = 0;
        for (t1 = $.getInterceptor$ns(start), t2 = $.getInterceptor$ax(result), i = 0; t3 = $.getInterceptor$n(i), t3.$lt(i, $length); i = $.intTypeCheck(t3.$add(i, 1)))
          t2.$indexSet(result, i, this.$index(receiver, t1.$add(start, i)));
        return $.listTypeCheck(result);
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $length, otherStart, otherList, t1, t2, t3, i;
    $.intTypeCheck(start);
    if (start !== (start | 0))
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    $.intTypeCheck(end);
    if (end !== (end | 0))
      return this.setRange$4$bailout(2, start, end, iterable, skipCount, receiver);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    $.intTypeCheck(skipCount);
    if (skipCount !== (skipCount | 0))
      return this.setRange$4$bailout(3, start, end, iterable, skipCount, receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw $.wrapException($.ArgumentError$(skipCount));
    if (typeof iterable === "object" && iterable !== null && (iterable.constructor === Array || !!$.getInterceptor(iterable).$isList)) {
      otherStart = skipCount;
      otherList = iterable;
    } else {
      t1 = $.skip$1$ax(iterable, skipCount);
      otherList = $.listTypeCheck(t1.toList$1$growable(t1, false));
      otherStart = 0;
    }
    t1 = otherStart + $length;
    t2 = $.getInterceptor$asx(otherList);
    t3 = t2.get$length(otherList);
    if (typeof t3 !== "number")
      return this.setRange$4$bailout(5, start, 0, 0, 0, receiver, $length, otherList, otherStart, $.JSInt_methods, t2, t3, t1);
    if (t1 > t3)
      throw $.wrapException($.StateError$("Not enough elements"));
    if (otherStart < start)
      for (i = $length - 1; i >= 0; --i)
        this.$indexSet(receiver, start + i, t2.$index(otherList, otherStart + i));
    else
      for (i = 0; i < $length; ++i)
        this.$indexSet(receiver, start + i, t2.$index(otherList, otherStart + i));
  },
  setRange$4$bailout: function(state0, start, end, iterable, skipCount, receiver, $length, otherList, otherStart, t1, t3, t4, t2, i) {
    switch (state0) {
      case 0:
        $.intTypeCheck(start);
      case 1:
        state0 = 0;
        $.intTypeCheck(end);
      case 2:
        state0 = 0;
        $.listSuperNativeTypeCheck(iterable, "$isIterable");
        $.intTypeCheck(skipCount);
      case 3:
        state0 = 0;
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
        $.intTypeCheck($length);
      case 4:
        state0 = 0;
        if ($length === 0)
          return;
        if ($.$lt$n(skipCount, 0))
          throw $.wrapException($.ArgumentError$(skipCount));
        if (typeof iterable === "object" && iterable !== null && (iterable.constructor === Array || !!$.getInterceptor(iterable).$isList)) {
          otherStart = skipCount;
          otherList = iterable;
        } else {
          t1 = $.skip$1$ax(iterable, skipCount);
          otherList = $.listTypeCheck(t1.toList$1$growable(t1, false));
          otherStart = 0;
        }
        t1 = $.getInterceptor$ns(otherStart);
        t2 = t1.$add(otherStart, $length);
        t3 = $.getInterceptor$asx(otherList);
        t4 = t3.get$length(otherList);
      case 5:
        state0 = 0;
        if ($.JSNumber_methods.$gt(t2, t4))
          throw $.wrapException($.StateError$("Not enough elements"));
      default:
        if (state0 === 7 || state0 === 6 || state0 === 0 && t1.$lt(otherStart, start))
          switch (state0) {
            case 0:
              i = $.$sub$n($length, 1);
              $.intTypeCheck(i);
            case 6:
              state0 = 0;
              t2 = $.getInterceptor$ns(start);
            case 7:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t4 = $.getInterceptor$n(i);
                      if (!t4.$ge(i, 0))
                        break L0;
                      this.$indexSet(receiver, t2.$add(start, i), t3.$index(otherList, t1.$add(otherStart, i)));
                      i = t4.$sub(i, 1);
                      $.intTypeCheck(i);
                    case 7:
                      state0 = 0;
                  }
          }
        else
          switch (state0) {
            case 0:
              t2 = $.getInterceptor$ns(start);
              i = 0;
            case 8:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      t4 = $.getInterceptor$n(i);
                      if (!t4.$lt(i, $length))
                        break L1;
                      this.$indexSet(receiver, t2.$add(start, i), t3.$index(otherList, t1.$add(otherStart, i)));
                      i = t4.$add(i, 1);
                      $.intTypeCheck(i);
                    case 8:
                      state0 = 0;
                  }
          }
    }
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  indexOf$2: function(receiver, element, startIndex) {
    var i, t1;
    element;
    if ($.JSInt_methods.$ge(startIndex, this.get$length(receiver)))
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; t1 = $.getInterceptor$n(i), t1.$lt(i, this.get$length(receiver)); i = $.intTypeCheck(t1.$add(i, 1)))
      if ($.boolConversionCheck($.$eq(this.$index(receiver, i), element)))
        return i;
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null,
  $asObject: null
};

$$.ListQueue = {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $.propertyTypeCheck($._ListQueueIterator$(this, null), "$isIterator");
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    $.functionTypeCheck(action);
    modificationCount = $.intTypeCheck(this._modificationCount);
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  get$first: function(_) {
    var t1, t2;
    t1 = this._head;
    if (t1 === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    t2 = this._table;
    if (t1 < 0 || t1 >= t2.length)
      throw $.ioore(t1);
    return t2[t1];
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    $.intTypeCheck(index);
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$gt(index, this.get$length(this)))
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    return t1[t2];
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
      $.JSArray_methods.set$length(list, this.get$length(this));
      $.listTypeCheck(list);
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
      $.listTypeCheck(list);
    }
    this._writeToList$1(list);
    return $.listTypeCheck(list);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(this, element);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result._contents;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = $.intTypeCheck(this._modificationCount + 1);
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(_, element) {
    var t1, t2, t3;
    element;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = $.intTypeCheck(this._modificationCount + 1);
  },
  _grow$0: function() {
    var newTable, t1, t2, split, t3;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    $.listTypeCheck(newTable);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    t3 = $.getInterceptor$ax(newTable);
    t3.setRange$4(newTable, 0, split, t1, t2);
    t3.setRange$4(newTable, split, split + this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = $.listTypeCheck(newTable);
  },
  _writeToList$1: function(target) {
    var t1, t2, t3, t4, $length, firstPartSize;
    $.listTypeCheck(target);
    t1 = $.getInterceptor$asx(target);
    $.assertHelper($.$ge$n(t1.get$length(target), this.get$length(this)));
    t2 = this._head;
    t3 = this._tail;
    t4 = this._table;
    if (t2 <= t3) {
      $length = t3 - t2;
      t1.setRange$4(target, 0, $length, t4, t2);
      return $length;
    } else {
      firstPartSize = t4.length - t2;
      t1.setRange$4(target, 0, firstPartSize, t4, t2);
      t1.setRange$4(target, firstPartSize, firstPartSize + this._tail, this._table, 0);
      return this._tail + firstPartSize;
    }
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    $.assertHelper($.ListQueue__isPowerOf2(initialCapacity));
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = $.listTypeCheck(t1);
  },
  $isListQueue: true,
  $asIterableBase: null,
  $asIterableBase: null,
  $asObject: null,
  $asIterable: null,
  $asQueue: null,
  $isQueue: true,
  $isIterable: true
};

$$._ListQueueIterator = {"": "Object;_queue,_liblib0$_end,_modificationCount,_liblib0$_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    t2 = this._modificationCount;
    $.intTypeCheck(t2);
    if (t2 !== t1._modificationCount)
      $.throwExpression($.ConcurrentModificationError$(t1));
    t2 = this._liblib0$_position;
    if (t2 === this._liblib0$_end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib0$_current = t3[t2];
    this._liblib0$_position = (this._liblib0$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  $isIterator: true,
  $asObject: null
};

$$.DateTime = {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDateTime)
      return false;
    else
      other;
    return $.boolConversionCheck($.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch)) && $.boolConversionCheck($.$eq(this.isUtc, other.isUtc));
  },
  get$hashCode: function(_) {
    return $.intTypeCheck(this.millisecondsSinceEpoch);
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_twoDigits();
    y = $.stringTypeCheck(new $.DateTime_toString_fourDigits().call$1(this.get$year()));
    m = $.stringTypeCheck(t1.call$1(this.get$month()));
    d = $.stringTypeCheck(t1.call$1(this.get$day()));
    h = $.stringTypeCheck(t1.call$1(this.get$hour()));
    min = $.stringTypeCheck(t1.call$1(this.get$minute()));
    sec = $.stringTypeCheck(t1.call$1(this.get$second()));
    ms = $.stringTypeCheck(new $.DateTime_toString_threeDigits().call$1(this.get$millisecond()));
    if ($.boolConversionCheck(this.isUtc))
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    $.propertyTypeCheck(duration, "$isDuration");
    return $.DateTime$fromMillisecondsSinceEpoch($.$add$ns($.intTypeCheck(this.millisecondsSinceEpoch), duration.get$inMilliseconds()), this.isUtc);
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    $.intTypeCheck(millisecondsSinceEpoch);
    $.boolTypeCheck(isUtc);
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.wrapException($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.wrapException($.ArgumentError$(isUtc));
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  $isDateTime: true,
  $asObject: null
};

$$.DateTime_toString_fourDigits = {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    $.intTypeCheck(n);
    t1 = $.getInterceptor$n(n);
    absN = $.intTypeCheck(t1.abs$0(n));
    sign = t1.$lt(n, 0) ? "-" : "";
    t1 = $.getInterceptor$n(absN);
    if (t1.$ge(absN, 1000))
      return $.S(n);
    if (t1.$ge(absN, 100))
      return sign + "0" + $.S(absN);
    if (t1.$ge(absN, 10))
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $isRequestAnimationFrameCallback: true
};

$$.DateTime_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1;
    $.intTypeCheck(n);
    t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return $.S(n);
    if (t1.$ge(n, 10))
      return "0" + $.S(n);
    return "00" + $.S(n);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $isRequestAnimationFrameCallback: true
};

$$.DateTime_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    $.intTypeCheck(n);
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $isRequestAnimationFrameCallback: true
};

$$.Duration = {"": "Object;_duration",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + $.propertyTypeCheck(other, "$isDuration")._duration, 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - $.propertyTypeCheck(other, "$isDuration")._duration, 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < $.propertyTypeCheck(other, "$isDuration")._duration;
  },
  $gt: function(_, other) {
    return this._duration > $.propertyTypeCheck(other, "$isDuration")._duration;
  },
  $le: function(_, other) {
    return this._duration <= $.propertyTypeCheck(other, "$isDuration")._duration;
  },
  $ge: function(_, other) {
    return this._duration >= $.propertyTypeCheck(other, "$isDuration")._duration;
  },
  get$inHours: function() {
    return $.intTypeCheck($.JSNumber_methods.$tdiv(this._duration, 3600000000));
  },
  get$inMinutes: function() {
    return $.intTypeCheck($.JSNumber_methods.$tdiv(this._duration, 60000000));
  },
  get$inSeconds: function() {
    return $.intTypeCheck($.JSNumber_methods.$tdiv(this._duration, 1000000));
  },
  get$inMilliseconds: function() {
    return $.intTypeCheck($.JSNumber_methods.$tdiv(this._duration, 1000));
  },
  get$inMicroseconds: function() {
    return $.intTypeCheck(this._duration);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  toString$0: function(_) {
    var t1, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = $.stringTypeCheck(t1.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60)));
    twoDigitSeconds = $.stringTypeCheck(t1.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60)));
    sixDigitUs = $.stringTypeCheck(new $.Duration_toString_sixDigits().call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000)));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true,
  $asObject: null
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1;
    $.intTypeCheck(n);
    t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $isRequestAnimationFrameCallback: true
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    $.intTypeCheck(n);
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $isRequestAnimationFrameCallback: true
};

$$.AssertionError = {"": "Object;", $asObject: null};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  },
  $asObject: null
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  },
  $asObject: null
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, str, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; t3 = t1.i_1, t4 = $.getInterceptor$n(t3), t4.$lt(t3, t2.length); t1.i_1 = $.intTypeCheck($.$add$ns(t1.i_1, 1))) {
      if (t4.$gt(t3, 0)) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      str = $.Error_safeToString(t2[t4]);
      str = typeof str === "string" ? str : $.S(str);
      t3._contents = t3._contents + str;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_closure(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      actualParameters = t1.sb_0._contents;
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; t3 = $.getInterceptor$n(i), t3.$lt(i, t2.length); ++i) {
        if (t3.$gt(i, 0)) {
          t3 = t1.sb_0;
          t3._contents = t3._contents + ", ";
        }
        t3 = t1.sb_0;
        if (i < 0 || i >= t2.length)
          throw $.ioore(i);
        str = t2[i];
        str = $.stringTypeCheck(typeof str === "string" ? str : $.S(str));
        t3._contents = t3._contents + str;
      }
      formalParameters = t1.sb_0._contents;
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  },
  $asObject: null
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  $asObject: null
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  },
  $asObject: null
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  $asObject: null
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  },
  $asObject: null
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  $asObject: null
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  },
  $asObject: null
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true,
  $asObject: null
};

$$.FormatException = {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true,
  $asObject: null
};

$$.Expando = {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values;
    value;
    values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = $.Object$();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.stringTypeCheck($.Primitives_getProperty(this, "expando$key"));
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.intTypeCheck($.$add$ns(t1, 1));
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
};

$$.Iterator = {"": "Object;", $isIterator: true};

$$.Map = {"": "Object;", $isMap: true, $asMap: null};

$$.Object = {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  },
  $isObject: true,
  $asObject: null
};

$$.Stopwatch = {"": "Object;_liblib3$_start,_stop",
  start$0: function(_) {
    if (this.get$isRunning())
      return;
    if (this._liblib3$_start == null)
      this._liblib3$_start = $.intTypeCheck($.Primitives_numMicroseconds());
    else {
      this._liblib3$_start = $.intTypeCheck($.$sub$n($.intTypeCheck($.Primitives_numMicroseconds()), $.$sub$n(this._stop, this._liblib3$_start)));
      this._stop = null;
    }
  },
  reset$0: function(_) {
    if (this._liblib3$_start == null)
      return;
    this._liblib3$_start = $.intTypeCheck($.Primitives_numMicroseconds());
    if (this._stop != null)
      this._stop = $.intTypeCheck(this._liblib3$_start);
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._liblib3$_start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    return $.intTypeCheck(t2 == null ? $.$sub$n($.Stopwatch__now(), this._liblib3$_start) : $.$sub$n(t2, t1));
  },
  get$elapsedMilliseconds: function() {
    return $.intTypeCheck($.JSNumber_methods.$tdiv(this.get$elapsedTicks() * 1000, this.get$frequency(this)));
  },
  get$frequency: function(_) {
    return $.intTypeCheck($.Stopwatch__frequency());
  },
  get$isRunning: function() {
    return this._liblib3$_start != null && this._stop == null;
  },
  $isStopwatch: true
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(_, obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = $.stringTypeCheck(typeof obj === "string" ? obj : $.S(obj));
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = $.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if ($.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator.get$current();
        str = $.stringTypeCheck(typeof str === "string" ? str : $.S(str));
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      str = iterator.get$current();
      str = $.stringTypeCheck(typeof str === "string" ? str : $.S(str));
      this._contents = this._contents + str;
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = $.stringTypeCheck(typeof str === "string" ? str : $.S(str));
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  $isStringBuffer: true,
  $asObject: null
};

$$.Object_ListMixin = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin = {"": "Object_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }, $asObject: null};

$$._ChildrenElementList = {"": "ListBase;_element,_childElements",
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return $.interceptedTypeCheck(t1[index], "$isElement");
  },
  $indexSet: function(_, index, value) {
    var t1;
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isElement");
    t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.$$dom_replaceChild$2$x(this._element, value, t1[index]);
  },
  set$length: function(_, newLength) {
    $.intTypeCheck(newLength);
    throw $.wrapException($.UnsupportedError$("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    $.interceptedTypeCheck(value, "$isElement");
    $.append$1$x(this._element, value);
    return value;
  },
  get$iterator: function(_) {
    return $.propertyTypeCheck($.get$iterator$ax(this.toList$0(this)), "$isIterator");
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    $.intTypeCheck(skipCount);
    throw $.wrapException($.UnimplementedError$(null));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.$$dom_removeChild$1$x(this._element, result);
    return result;
  },
  get$first: function(_) {
    var result = this._element.firstElementChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  $asObject: null,
  $asListMixin: function() { return [$.Element]; },
  $asList: function() { return [$.Element]; },
  $asIterable: function() { return [$.Element]; }
};

$$.Entry_remove_closure = {"": "Closure;completer_0",
  call$0: function() {
    var t1 = this.completer_0;
    null;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureValue$1(null);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.Entry_remove_closure0 = {"": "Closure;completer_1",
  call$1: function(error) {
    var t1 = this.completer_1;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureError$1(error);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.Object_ListMixin0 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.File]; }, $isIterable: true, $asIterable: function() { return [$.File]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin0 = {"": "Object_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.File]; }, $isIterable: true, $asIterable: function() { return [$.File]; }, $asObject: null};

$$.Object_ListMixin1 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin1 = {"": "Object_ListMixin1+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }, $asObject: null};

$$.Object_ListMixin2 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin2 = {"": "Object_ListMixin2+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }, $asObject: null};

$$.HttpRequest_getString_closure = {"": "Closure;",
  call$1: function(xhr) {
    return $.get$responseText$x(xhr);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.HttpRequest_request_closure = {"": "Closure;completer_0,xhr_1",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_1;
    t2 = t1.status;
    t3 = $.getInterceptor$n(t2);
    t2 = t3.$ge(t2, 200) && t3.$lt(t2, 300) || t2 === 0 || t2 === 304;
    t3 = this.completer_0;
    if (t2) {
      t1;
      if (t3._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t3._isComplete = true;
      t3._setFutureValue$1(t1);
    } else {
      if (t3._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t3._isComplete = true;
      t3._setFutureError$1(e);
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.HttpRequest_request_closure0 = {"": "Closure;completer_2",
  call$1: function(e) {
    var t1 = this.completer_2;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureError$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.Object_ListMixin3 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.MimeType]; }, $isIterable: true, $asIterable: function() { return [$.MimeType]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin3 = {"": "Object_ListMixin3+ImmutableListMixin;", $isList: true, $asList: function() { return [$.MimeType]; }, $isIterable: true, $asIterable: function() { return [$.MimeType]; }, $asObject: null};

$$._ChildNodeListLazy = {"": "ListBase;_this",
  get$first: function(_) {
    var result = this._this.firstChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    $.append$1$x(this._this, $.interceptedTypeCheck(value, "$isNode"));
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.$$dom_removeChild$1$x(this._this, result);
    return result;
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    $.$$dom_replaceChild$2$x(t1, value, $.interceptedTypeCheck(t2[index], "$isNode"));
  },
  get$iterator: function(_) {
    return $.propertyTypeCheck($.NodeList_methods.get$iterator(this._this.childNodes), "$isIterator");
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    $.intTypeCheck(skipCount);
    throw $.wrapException($.UnsupportedError$("Cannot setRange on Node list"));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return $.interceptedTypeCheck(t1[index], "$isNode");
  },
  $asObject: null,
  $asListMixin: function() { return [$.Node]; },
  $asList: function() { return [$.Node]; },
  $asIterable: function() { return [$.Node]; }
};

$$.Object_ListMixin4 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin4 = {"": "Object_ListMixin4+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }, $asObject: null};

$$.Object_ListMixin5 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Plugin]; }, $isIterable: true, $asIterable: function() { return [$.Plugin]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin5 = {"": "Object_ListMixin5+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Plugin]; }, $isIterable: true, $asIterable: function() { return [$.Plugin]; }, $asObject: null};

$$.EventTarget_ListMixin = {"": "EventTarget+ListMixin;", $isList: true, $asList: function() { return [$.SourceBuffer]; }, $isIterable: true, $asIterable: function() { return [$.SourceBuffer]; }, $asObject: null};

$$.EventTarget_ListMixin_ImmutableListMixin = {"": "EventTarget_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SourceBuffer]; }, $isIterable: true, $asIterable: function() { return [$.SourceBuffer]; }, $asObject: null};

$$.Object_ListMixin6 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.SpeechGrammar]; }, $isIterable: true, $asIterable: function() { return [$.SpeechGrammar]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin6 = {"": "Object_ListMixin6+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SpeechGrammar]; }, $isIterable: true, $asIterable: function() { return [$.SpeechGrammar]; }, $asObject: null};

$$.Storage_keys_closure = {"": "Closure;keys_0",
  call$2: function(k, v) {
    return $.JSArray_methods.add$1(this.keys_0, k);
  },
  $isFunction: true,
  $asObject: null,
  $isGameLoopTouchEventFunction: true
};

$$.Storage_values_closure = {"": "Closure;values_0",
  call$2: function(k, v) {
    return $.JSArray_methods.add$1(this.values_0, v);
  },
  $isFunction: true,
  $asObject: null,
  $isGameLoopTouchEventFunction: true
};

$$.Object_ListMixin7 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.TextTrackCue]; }, $isIterable: true, $asIterable: function() { return [$.TextTrackCue]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin7 = {"": "Object_ListMixin7+ImmutableListMixin;", $isList: true, $asList: function() { return [$.TextTrackCue]; }, $isIterable: true, $asIterable: function() { return [$.TextTrackCue]; }, $asObject: null};

$$.EventTarget_ListMixin0 = {"": "EventTarget+ListMixin;", $isList: true, $asList: function() { return [$.TextTrack]; }, $isIterable: true, $asIterable: function() { return [$.TextTrack]; }, $asObject: null};

$$.EventTarget_ListMixin_ImmutableListMixin0 = {"": "EventTarget_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.TextTrack]; }, $isIterable: true, $asIterable: function() { return [$.TextTrack]; }, $asObject: null};

$$.Object_ListMixin8 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Touch]; }, $isIterable: true, $asIterable: function() { return [$.Touch]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin8 = {"": "Object_ListMixin8+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Touch]; }, $isIterable: true, $asIterable: function() { return [$.Touch]; }, $asObject: null};

$$.Object_ListMixin9 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Rect]; }, $isIterable: true, $asIterable: function() { return [$.Rect]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin9 = {"": "Object_ListMixin9+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Rect]; }, $isIterable: true, $asIterable: function() { return [$.Rect]; }, $asObject: null};

$$.Object_ListMixin10 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.CssRule]; }, $isIterable: true, $asIterable: function() { return [$.CssRule]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin10 = {"": "Object_ListMixin10+ImmutableListMixin;", $isList: true, $asList: function() { return [$.CssRule]; }, $isIterable: true, $asIterable: function() { return [$.CssRule]; }, $asObject: null};

$$._CSSValue_ListMixin = {"": "_CSSValue+ListMixin;", $isList: true, $asList: function() { return [$._CSSValue]; }, $isIterable: true, $asIterable: function() { return [$._CSSValue]; }, $asObject: null};

$$._CSSValue_ListMixin_ImmutableListMixin = {"": "_CSSValue_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$._CSSValue]; }, $isIterable: true, $asIterable: function() { return [$._CSSValue]; }, $asObject: null};

$$.Object_ListMixin11 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Entry]; }, $isIterable: true, $asIterable: function() { return [$.Entry]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin11 = {"": "Object_ListMixin11+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Entry]; }, $isIterable: true, $asIterable: function() { return [$.Entry]; }, $asObject: null};

$$.Object_ListMixin12 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$._EntrySync]; }, $isIterable: true, $asIterable: function() { return [$._EntrySync]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin12 = {"": "Object_ListMixin12+ImmutableListMixin;", $isList: true, $asList: function() { return [$._EntrySync]; }, $isIterable: true, $asIterable: function() { return [$._EntrySync]; }, $asObject: null};

$$.Object_ListMixin13 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Gamepad]; }, $isIterable: true, $asIterable: function() { return [$.Gamepad]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin13 = {"": "Object_ListMixin13+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Gamepad]; }, $isIterable: true, $asIterable: function() { return [$.Gamepad]; }, $asObject: null};

$$.Object_ListMixin14 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin14 = {"": "Object_ListMixin14+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }, $asObject: null};

$$.Object_ListMixin15 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.SpeechInputResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechInputResult]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin15 = {"": "Object_ListMixin15+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SpeechInputResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechInputResult]; }, $asObject: null};

$$.Object_ListMixin16 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.SpeechRecognitionResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechRecognitionResult]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin16 = {"": "Object_ListMixin16+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SpeechRecognitionResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechRecognitionResult]; }, $asObject: null};

$$.Object_ListMixin17 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.StyleSheet]; }, $isIterable: true, $asIterable: function() { return [$.StyleSheet]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin17 = {"": "Object_ListMixin17+ImmutableListMixin;", $isList: true, $asList: function() { return [$.StyleSheet]; }, $isIterable: true, $asIterable: function() { return [$.StyleSheet]; }, $asObject: null};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    $.functionTypeCheck(onData);
    $.functionTypeCheck(onDone);
    $.functionTypeCheck(onError);
    return $.propertyTypeCheck($._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture, $.getRuntimeTypeArgument(this, this.$as_EventStream, 0)), "$isStreamSubscription");
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  $asStream: null,
  $asObject: null
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function(_) {
    var t1;
    if (this.get$_canceled())
      return;
    t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture, T) {
    this._tryResume$0();
  },
  $asStreamSubscription: null,
  $asObject: null
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $.propertyTypeCheck($._EventStream$(e, this._eventType, useCapture, null), "$isStream");
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._CustomEventStreamProvider = {"": "Object;_eventTypeGetter",
  _eventTypeGetter$1: function(arg0) {
    return this._eventTypeGetter.call$1(arg0);
  },
  forTarget$2$useCapture: function(e, useCapture) {
    return $.propertyTypeCheck($._EventStream$(e, this._eventTypeGetter$1(e), useCapture, null), "$isStream");
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  },
  $asObject: null
};

$$.ImmutableListMixin = {"": "Object;",
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.FixedSizeListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver.$asImmutableListMixin, 0)), "$isIterator");
  },
  add$1: function(receiver, value) {
    value;
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.intTypeCheck(end);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, null);
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null,
  $asObject: null
};

$$.Point = {"": "Object;x,y",
  toString$0: function(_) {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isPoint)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  $add: function(_, other) {
    $.propertyTypeCheck(other, "$isPoint");
    return $.Point$($.$add$ns(this.x, other.x), $.$add$ns(this.y, other.y));
  },
  $sub: function(_, other) {
    $.propertyTypeCheck(other, "$isPoint");
    return $.Point$($.$sub$n(this.x, other.x), $.$sub$n(this.y, other.y));
  },
  toInt$0: function(_) {
    return $.Point$($.toInt$0$nx(this.x), $.toInt$0$nx(this.y));
  },
  $isPoint: true
};

$$.Rect = {"": "Object;left>,top>,width>,height>",
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = this.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = this.top;
      t3 = t2.get$top(other);
      t1 = (t1 == null ? t3 == null : t1 === t3) && $.boolConversionCheck($.$eq(this.width, t2.get$width(other))) && $.boolConversionCheck($.$eq(this.height, t2.get$height(other)));
    } else
      t1 = false;
    return t1;
  },
  toInt$0: function(_) {
    return $.Rect$($.toInt$0$nx(this.left), $.toInt$0$nx(this.top), $.toInt$0$nx(this.width), $.toInt$0$nx(this.height));
  },
  $isRect: true,
  $asRect: null
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (t1 !== (t1 | 0))
      throw $.iae(t1);
    if (nextPosition < t1) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        $.intTypeCheck(nextPosition);
      case 2:
        state0 = 0;
        t1 = this._length;
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if ($.$lt$n(nextPosition, t1)) {
          this._current = $.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  },
  $isIterator: true,
  $asObject: null
};

$$.convertDartToNative_Dictionary_closure = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[$.stringTypeCheck(key)] = value;
  },
  $isFunction: true,
  $asObject: null
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; $.$lt$n(i, $length); ++i) {
      if (i < 0 || i >= $length)
        throw $.ioore(i);
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    $.JSArray_methods.add$1(t1, value);
    $.JSArray_methods.add$1(this.copies_2, null);
    return $length;
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1;
    $.intTypeCheck(i);
    t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isRequestAnimationFrameCallback: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1;
    $.intTypeCheck(i);
    t1 = this.copies_4;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true,
  $asObject: null
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isDateTime)
      throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFile)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isBlob)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFileList)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isImageData)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isByteBuffer)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTypedData)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || !!$.getInterceptor(e).$isList)) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(1, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      t1 = this.readSlot_6;
      copy = t1.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t2 = e instanceof Array && !!!e.immutable$list;
      t3 = this.writeSlot_7;
      if (t2) {
        t3.call$2(slot, true);
        for (i = 0; t2 = $.getInterceptor$n(i), t2.$lt(i, $length); ++i) {
          if (i >>> 0 !== i || i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (elementCopy == null ? element != null : elementCopy !== element) {
            copy0 = t1.call$1(slot);
            if (true === copy0) {
              copy0 = new Array($length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !$.getInterceptor(copy0).$isJavaScriptIndexingBehavior)
              return this.call$1$bailout(3, e, $length, $.JSArray_methods, i, t2, elementCopy, t3, slot, copy0, t1, copy);
            for (t1 = e.length, t2 = copy0.length, j = 0; $.$lt$n(j, i); ++j) {
              if (j >>> 0 !== j || j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array($length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (i !== (i | 0))
        return this.call$1$bailout(5, e, $length, $.JSArray_methods, i, 0, 0, 0, 0, 0, 0, copy);
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(4, e, $length, $.JSArray_methods, i, 0, 0, 0, 0, 0, 0, copy);
      for (; $.$lt$n(i, $length); ++i) {
        if (i >>> 0 !== i || i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.wrapException($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, $length, t1, i, t3, elementCopy, t4, slot, copy0, t2, copy) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isDateTime)
          throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFile)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isBlob)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFileList)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isImageData)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isByteBuffer)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTypedData)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
          return t1.copy_0;
        }
      default:
        var element, j, t5;
        if (state0 === 4 || state0 === 5 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || !!$.getInterceptor(e).$isList))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t1 = $.getInterceptor$asx(e);
              $length = t1.get$length(e);
              $.intTypeCheck($length);
            case 2:
              state0 = 0;
              slot = this.findSlot_5.call$1(e);
              t2 = this.readSlot_6;
              copy = t2.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t3 = e instanceof Array && !!!e.immutable$list;
              t4 = this.writeSlot_7;
            case 3:
              if (state0 === 3 || state0 === 0 && t3)
                switch (state0) {
                  case 0:
                    t4.call$2(slot, true);
                    i = 0;
                  case 3:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            t3 = $.getInterceptor$n(i);
                            if (!t3.$lt(i, $length))
                              break L0;
                            element = t1.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 3:
                            if (state0 === 3 || state0 === 0 && (elementCopy == null ? element != null : elementCopy !== element))
                              switch (state0) {
                                case 0:
                                  copy0 = t2.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array($length);
                                    t4.call$2(slot, copy0);
                                  }
                                case 3:
                                  state0 = 0;
                                  for (t2 = $.getInterceptor$ax(copy0), j = 0; t5 = $.getInterceptor$n(j), t5.$lt(j, i); j = $.intTypeCheck(t5.$add(j, 1)))
                                    t2.$indexSet(copy0, j, t1.$index(e, j));
                                  t2.$indexSet(copy0, i, elementCopy);
                                  i = $.intTypeCheck(t3.$add(i, 1));
                                  copy = copy0;
                                  break L0;
                              }
                            i = $.intTypeCheck(t3.$add(i, 1));
                        }
                    if (copy == null) {
                      t4.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array($length);
                t4.call$2(slot, copy);
                i = 0;
              }
            case 5:
              state0 = 0;
            case 4:
              state0 = 0;
              for (t2 = $.getInterceptor$ax(copy); t3 = $.getInterceptor$n(i), t3.$lt(i, $length); i = $.intTypeCheck(t3.$add(i, 1)))
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        throw $.wrapException($.UnimplementedError$("structured clone of other type"));
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_closure = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  $isFunction: true,
  $asObject: null,
  $isGameLoopTouchEventFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; $.$lt$n(i, $length); ++i) {
      if (i < 0 || i >= $length)
        throw $.ioore(i);
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    $.JSArray_methods.add$1(t1, value);
    $.JSArray_methods.add$1(this.copies_1, null);
    return $length;
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    var t1;
    $.intTypeCheck(i);
    t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isRequestAnimationFrameCallback: true
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1;
    $.intTypeCheck(i);
    t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true,
  $asObject: null
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, key, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior)
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        key = t1.get$current();
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(3, e, $length, slot, $.JSArray_methods, copy);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; $.$lt$n(i, $length); ++i) {
        if (i >>> 0 !== i || i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, $length, slot, t1, copy) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            key = t1.get$current();
            copy.$indexSet(copy, key, this.call$1(e[key]));
          }
          return copy;
        }
      default:
        var key, t2, i, t3;
        if (state0 === 3 || state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              $length = t1.get$length(e);
              $.intTypeCheck($length);
            case 2:
              state0 = 0;
              copy = this.mustCopy_4 ? new Array($length) : e;
            case 3:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$ax(copy), i = 0; t3 = $.getInterceptor$n(i), t3.$lt(i, $length); i = $.intTypeCheck(t3.$add(i, 1)))
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.FilteredElementList = {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.listTypeCheck($.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true, $.Element));
  },
  forEach$1: function(_, f) {
    $.functionTypeCheck(f);
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1;
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isElement");
    t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x($.interceptedTypeCheck(t1[index], "$isElement"), value);
  },
  set$length: function(_, newLength) {
    var len;
    $.intTypeCheck(newLength);
    if (newLength !== (newLength | 0))
      return this.set$length$bailout(1, newLength);
    len = this.get$length(this);
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$length(this);
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    $.append$1$x(this._childNodes._this, $.interceptedTypeCheck(value, "$isElement"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    $.listSuperNativeTypeCheck(iterable, "$isIterable");
    $.intTypeCheck(skipCount);
    throw $.wrapException($.UnsupportedError$("Cannot setRange on filtered list"));
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  removeRange$2: function(_, start, end) {
    $.JSArray_methods.forEach$1($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return $.interceptedTypeCheck(result, "$isElement");
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1;
    $.intTypeCheck(index);
    t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return $.interceptedTypeCheck(t1[index], "$isElement");
  },
  get$iterator: function(_) {
    return $.propertyTypeCheck($.JSArray_methods.get$iterator(this.get$_filtered()), "$isIterator");
  },
  $asListBase: null,
  $asObject: null,
  $asListMixin: null,
  $asList: null,
  $asIterable: null
};

$$.FilteredElementList__filtered_closure = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.FilteredElementList_removeRange_closure = {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$._completeRequest_closure = {"": "Closure;request_0,completer_1",
  call$1: function(e) {
    var t1, t2;
    t1 = this.completer_1;
    t2 = $.get$result$x(this.request_0);
    t2;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureValue$1(t2);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$._completeRequest_closure0 = {"": "Closure;completer_2",
  call$1: function(e) {
    var t1 = this.completer_2;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureError$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.SendPort = {"": "Object;", $isSendPort: true, $isFunction: true, $asObject: null, $is_FutureOnError: true, $is_ErrorCallback: true, $isRequestAnimationFrameCallback: true, $isEventListener: true, $isGameLoopUpdateFunction: true, $isGameLoopRenderFunction: true, $isGameLoopResizeFunction: true, $isGameLoopFullscreenChangeFunction: true, $isGameLoopPointerLockChangeFunction: true};

$$.ReceivePort = {"": "Object;", $isReceivePort: true};

$$.JsonUnsupportedObjectError = {"": "Object;unsupportedObject,cause",
  toString$0: function(_) {
    if (this.cause != null)
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  },
  $asObject: null
};

$$.JsonCyclicError = {"": "JsonUnsupportedObjectError;unsupportedObject,cause",
  toString$0: function(_) {
    return "Cyclic error in JSON stringify";
  }
};

$$._JsonStringifier = {"": "Object;sb<,seen",
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; $.$lt$n(i, t2); ++i) {
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw $.wrapException($.JsonCyclicError$(object));
    }
    $.JSArray_methods.add$1(t1, object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!this.stringifyJsonValue$1(object)) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!this.stringifyJsonValue$1(customJson)) {
          t1 = $.JsonUnsupportedObjectError$(object, null);
          throw $.wrapException(t1);
        }
        t1 = this.seen;
        if (0 >= t1.length)
          throw $.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        throw $.wrapException($.JsonUnsupportedObjectError$(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i;
    t1 = {};
    if (typeof object === "number") {
      t1 = this.sb;
      t2 = $.JSNumber_methods.toString$0(object);
      t1._contents = t1._contents + t2;
      return true;
    } else if (object === true) {
      t1 = this.sb;
      t1._contents = t1._contents + "true";
      return true;
    } else if (object === false) {
      t1 = this.sb;
      t1._contents = t1._contents + "false";
      return true;
    } else if (object == null) {
      t1 = this.sb;
      t1._contents = t1._contents + "null";
      return true;
    } else if (typeof object === "string") {
      t1 = this.sb;
      t1._contents = t1._contents + "\"";
      $._JsonStringifier_escape(t1, object);
      t1._contents = t1._contents + "\"";
      return true;
    } else if (typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList)) {
      if (typeof object !== "string" && (typeof object !== "object" || object === null || object.constructor !== Array && !$.getInterceptor(object).$isJavaScriptIndexingBehavior))
        return this.stringifyJsonValue$1$bailout(1, object);
      this.checkCycle$1(object);
      t1 = this.sb;
      t1._contents = t1._contents + "[";
      if (object.length > 0) {
        this.stringifyValue$1(object[0]);
        for (i = 1; $.$lt$n(i, object.length); ++i) {
          t1._contents = t1._contents + ",";
          if (i >>> 0 !== i || i >= object.length)
            throw $.ioore(i);
          this.stringifyValue$1(object[i]);
        }
      }
      t1._contents = t1._contents + "]";
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
      this.checkCycle$1(object);
      object = $.interceptedTypeCheck(object, "$isMap");
      t2 = this.sb;
      t2._contents = t2._contents + "{";
      t1.first_0 = true;
      $.forEach$1$ax(object, new $._JsonStringifier_stringifyJsonValue_closure(t1, this));
      t2._contents = t2._contents + "}";
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else
      return false;
  },
  stringifyJsonValue$1$bailout: function(state0, object) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, t2, i, t3;
        if (state0 === 0 && typeof object === "number") {
          t1 = this.sb;
          t2 = $.JSNumber_methods.toString$0(object);
          t1._contents = t1._contents + t2;
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                t1 = this.sb;
                t1._contents = t1._contents + "true";
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      t1 = this.sb;
                      t1._contents = t1._contents + "false";
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            t1 = this.sb;
                            t1._contents = t1._contents + "null";
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sb;
                                  t1._contents = t1._contents + "\"";
                                  $._JsonStringifier_escape(t1, object);
                                  t1._contents = t1._contents + "\"";
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t1 = this.sb;
                                            t1._contents = t1._contents + "[";
                                            t2 = $.getInterceptor$asx(object);
                                            if ($.$gt$n(t2.get$length(object), 0)) {
                                              this.stringifyValue$1(t2.$index(object, 0));
                                              for (i = 1; t3 = $.getInterceptor$n(i), t3.$lt(i, t2.get$length(object)); i = $.intTypeCheck(t3.$add(i, 1))) {
                                                t1._contents = t1._contents + ",";
                                                this.stringifyValue$1(t2.$index(object, i));
                                              }
                                            }
                                            t1._contents = t1._contents + "]";
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw $.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
                                        this.checkCycle$1(object);
                                        object = $.interceptedTypeCheck(object, "$isMap");
                                        t2 = this.sb;
                                        t2._contents = t2._contents + "{";
                                        t1.first_0 = true;
                                        $.forEach$1$ax(object, new $._JsonStringifier_stringifyJsonValue_closure(t1, this));
                                        t2._contents = t2._contents + "}";
                                        t1 = this.seen;
                                        if (0 >= t1.length)
                                          throw $.ioore(0);
                                        t1.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  }
};

$$._JsonStringifier_stringifyJsonValue_closure = {"": "Closure;box_0,this_1",
  call$2: function(key, value) {
    var t1, t2, t3;
    $.stringTypeCheck(key);
    t1 = this.box_0;
    t2 = this.this_1;
    if (!t1.first_0) {
      t2 = t2.get$sb();
      t2._contents = t2._contents + ",\"";
    } else {
      t2 = t2.get$sb();
      t2._contents = t2._contents + "\"";
    }
    t2 = this.this_1;
    $._JsonStringifier_escape(t2.get$sb(), key);
    t3 = t2.get$sb();
    t3._contents = t3._contents + "\":";
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  },
  $isFunction: true,
  $asObject: null
};

$$.Object_ListMixin18 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Length]; }, $isIterable: true, $asIterable: function() { return [$.Length]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin18 = {"": "Object_ListMixin18+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Length]; }, $isIterable: true, $asIterable: function() { return [$.Length]; }, $asObject: null};

$$.Object_ListMixin19 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Number]; }, $isIterable: true, $asIterable: function() { return [$.Number]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin19 = {"": "Object_ListMixin19+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Number]; }, $isIterable: true, $asIterable: function() { return [$.Number]; }, $asObject: null};

$$.Object_ListMixin20 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.PathSeg]; }, $isIterable: true, $asIterable: function() { return [$.PathSeg]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin20 = {"": "Object_ListMixin20+ImmutableListMixin;", $isList: true, $asList: function() { return [$.PathSeg]; }, $isIterable: true, $asIterable: function() { return [$.PathSeg]; }, $asObject: null};

$$.Object_ListMixin21 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin21 = {"": "Object_ListMixin21+ImmutableListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }, $asObject: null};

$$.Object_ListMixin22 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Transform]; }, $isIterable: true, $asIterable: function() { return [$.Transform]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin22 = {"": "Object_ListMixin22+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Transform]; }, $isIterable: true, $asIterable: function() { return [$.Transform]; }, $asObject: null};

$$.Object_ListMixin23 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.ElementInstance]; }, $isIterable: true, $asIterable: function() { return [$.ElementInstance]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin23 = {"": "Object_ListMixin23+ImmutableListMixin;", $isList: true, $asList: function() { return [$.ElementInstance]; }, $isIterable: true, $asIterable: function() { return [$.ElementInstance]; }, $asObject: null};

$$._ListRange = {"": "IterableBase;_source,_liblib5$_offset,_liblib5$_length",
  get$iterator: function(_) {
    var t1, t2;
    t1 = this._liblib5$_offset;
    t2 = this._liblib5$_length;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return $._ListRangeIteratorImpl$(this._source, t1, t1 + t2);
  },
  get$length: function(_) {
    return this._liblib5$_length;
  },
  _ListRange$3: function(source, offset, $length) {
    var t1, t2, t3;
    t1 = this._liblib5$_offset;
    if (t1 < 0 || t1 > this._source.length)
      throw $.wrapException($.RangeError$value(t1));
    t2 = this._liblib5$_length;
    if (t2 != null && $.$lt$n(t2, 0))
      throw $.wrapException($.RangeError$value(t2));
    t3 = $.getInterceptor$ns(t2);
    if (t3.$add(t2, t1) > this._source.length)
      throw $.wrapException($.RangeError$value(t3.$add(t2, t1)));
  },
  $asIterableBase: function() { return [null]; },
  $asObject: null,
  $asIterable: function() { return [null]; }
};

$$._ListRangeIteratorImpl = {"": "Object;_source,_liblib5$_offset,_liblib5$_end",
  get$current: function() {
    var t1, t2;
    t1 = this._source;
    t2 = this._liblib5$_offset;
    if (t2 !== (t2 | 0))
      return this.get$current$bailout(1, t1, t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return $.intTypeCheck(t1[t2]);
  },
  get$current$bailout: function(state0, t1, t2) {
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return $.intTypeCheck(t1[t2]);
  },
  moveNext$0: function() {
    var t1 = this._liblib5$_offset + 1;
    this._liblib5$_offset = $.intTypeCheck(t1);
    return t1 < this._liblib5$_end;
  },
  get$remaining: function() {
    return $.intTypeCheck(this._liblib5$_end - this._liblib5$_offset - 1);
  },
  $is_ListRangeIterator: true,
  $isIterator: true,
  $asIterator: function() { return [$.JSInt]; },
  $asObject: null
};

$$.Utf8Decoder = {"": "Object;utf8EncodedBytesIterator,replacementCodepoint,_liblib5$_current",
  decodeRest$0: function() {
    var codepoints, i, i0, t1, truncCodepoints;
    codepoints = $.List_List(this.utf8EncodedBytesIterator.get$remaining(), $.JSInt);
    $.setRuntimeTypeInfo(codepoints, [$.JSInt]);
    $.listTypeCheck(codepoints);
    if (typeof codepoints !== "object" || codepoints === null || (codepoints.constructor !== Array || !!codepoints.immutable$list) && !$.getInterceptor(codepoints).$isJavaScriptIndexingBehavior)
      return this.decodeRest$0$bailout(1, codepoints);
    for (i = 0; this.moveNext$0(); i = i0) {
      i0 = $.intTypeCheck($.$add$ns(i, 1));
      t1 = this.get$current();
      if (i >>> 0 !== i || i >= codepoints.length)
        throw $.ioore(i);
      codepoints[i] = t1;
    }
    if (i === codepoints.length)
      return $.listTypeCheck(codepoints);
    else {
      truncCodepoints = $.List_List(i, $.JSInt);
      $.setRuntimeTypeInfo(truncCodepoints, [$.JSInt]);
      $.listTypeCheck(truncCodepoints);
      $.setRange$3$ax(truncCodepoints, 0, i, codepoints);
      return $.listTypeCheck(truncCodepoints);
    }
  },
  decodeRest$0$bailout: function(state0, codepoints) {
    var t1, i, i0, truncCodepoints;
    for (t1 = $.getInterceptor$ax(codepoints), i = 0; this.moveNext$0(); i = i0) {
      i0 = $.intTypeCheck($.$add$ns(i, 1));
      t1.$indexSet(codepoints, i, this.get$current());
    }
    if (i === $.get$length$asx(codepoints))
      return $.listTypeCheck(codepoints);
    else {
      truncCodepoints = $.List_List(i, $.JSInt);
      $.setRuntimeTypeInfo(truncCodepoints, [$.JSInt]);
      $.listTypeCheck(truncCodepoints);
      $.setRange$3$ax(truncCodepoints, 0, i, codepoints);
      return $.listTypeCheck(truncCodepoints);
    }
  },
  get$current: function() {
    return this._liblib5$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3, value, additionalBytes, j, nextValue, validSequence, nonOverlong, inRange;
    this._liblib5$_current = null;
    t1 = this.utf8EncodedBytesIterator;
    t2 = t1._liblib5$_offset + 1;
    t1._liblib5$_offset = $.intTypeCheck(t2);
    t3 = t1._liblib5$_end;
    if (!(t2 < t3))
      return false;
    value = t1.get$current();
    $.intTypeCheck(value);
    if (value !== (value | 0))
      return this.moveNext$0$bailout(1, t1, value, t3);
    if (value < 0) {
      this._liblib5$_current = this.replacementCodepoint;
      return true;
    } else if (value <= 127) {
      this._liblib5$_current = value;
      return true;
    } else if (value < 192) {
      this._liblib5$_current = this.replacementCodepoint;
      return true;
    } else if (value < 224) {
      value -= 192;
      additionalBytes = 1;
    } else if (value < 240) {
      value -= 224;
      additionalBytes = 2;
    } else if (value < 248) {
      value -= 240;
      additionalBytes = 3;
    } else if (value < 252) {
      value -= 248;
      additionalBytes = 4;
    } else {
      if (value < 254)
        value -= 252;
      else {
        this._liblib5$_current = this.replacementCodepoint;
        return true;
      }
      additionalBytes = 5;
    }
    j = 0;
    while (true) {
      if (j < additionalBytes) {
        t2 = t1._liblib5$_offset + 1;
        t1._liblib5$_offset = $.intTypeCheck(t2);
        t2 = t2 < t3;
      } else
        t2 = false;
      if (!t2)
        break;
      nextValue = t1.get$current();
      $.intTypeCheck(nextValue);
      if (nextValue !== (nextValue | 0))
        return this.moveNext$0$bailout(7, t1, value, t3, j, $.JSInt_methods, nextValue, additionalBytes);
      if (nextValue > 127 && nextValue < 192)
        value = (value << 6 | nextValue & 63) >>> 0;
      else {
        if (nextValue >= 192)
          t1._liblib5$_offset = $.intTypeCheck(t1._liblib5$_offset - 1);
        break;
      }
      ++j;
    }
    if (j === additionalBytes)
      validSequence = value < 55296 || value > 57343;
    else
      validSequence = false;
    if (!(additionalBytes === 1 && value > 127))
      if (!(additionalBytes === 2 && value > 2047)) {
        t2 = additionalBytes === 3 && value > 65535;
        nonOverlong = t2;
      } else
        nonOverlong = true;
    else
      nonOverlong = true;
    inRange = value <= 1114111;
    if (validSequence && nonOverlong && inRange) {
      this._liblib5$_current = value;
      return true;
    } else {
      this._liblib5$_current = this.replacementCodepoint;
      return true;
    }
  },
  moveNext$0$bailout: function(state0, t1, value, t3, j, t2, nextValue, additionalBytes) {
    switch (state0) {
      case 0:
        this._liblib5$_current = null;
        t1 = this.utf8EncodedBytesIterator;
        t2 = t1._liblib5$_offset + 1;
        t1._liblib5$_offset = $.intTypeCheck(t2);
        t3 = t1._liblib5$_end;
        if (!(t2 < t3))
          return false;
        value = t1.get$current();
        $.intTypeCheck(value);
      case 1:
        state0 = 0;
        t2 = $.getInterceptor$n(value);
      default:
        if (state0 === 0 && t2.$lt(value, 0)) {
          this._liblib5$_current = this.replacementCodepoint;
          return true;
        } else
          switch (state0) {
            case 0:
            default:
              if (state0 === 0 && t2.$le(value, 127)) {
                this._liblib5$_current = value;
                return true;
              } else
                switch (state0) {
                  case 0:
                  default:
                    if (state0 === 0 && t2.$lt(value, 192)) {
                      this._liblib5$_current = this.replacementCodepoint;
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        default:
                          if (state0 === 2 || state0 === 0 && t2.$lt(value, 224))
                            switch (state0) {
                              case 0:
                                value = t2.$sub(value, 192);
                                $.intTypeCheck(value);
                              case 2:
                                state0 = 0;
                                additionalBytes = 1;
                            }
                          else
                            switch (state0) {
                              case 0:
                              default:
                                if (state0 === 3 || state0 === 0 && t2.$lt(value, 240))
                                  switch (state0) {
                                    case 0:
                                      value = t2.$sub(value, 224);
                                      $.intTypeCheck(value);
                                    case 3:
                                      state0 = 0;
                                      additionalBytes = 2;
                                  }
                                else
                                  switch (state0) {
                                    case 0:
                                    default:
                                      if (state0 === 4 || state0 === 0 && t2.$lt(value, 248))
                                        switch (state0) {
                                          case 0:
                                            value = t2.$sub(value, 240);
                                            $.intTypeCheck(value);
                                          case 4:
                                            state0 = 0;
                                            additionalBytes = 3;
                                        }
                                      else
                                        switch (state0) {
                                          case 0:
                                          default:
                                            if (state0 === 5 || state0 === 0 && t2.$lt(value, 252))
                                              switch (state0) {
                                                case 0:
                                                  value = t2.$sub(value, 248);
                                                  $.intTypeCheck(value);
                                                case 5:
                                                  state0 = 0;
                                                  additionalBytes = 4;
                                              }
                                            else
                                              switch (state0) {
                                                case 0:
                                                case 6:
                                                  if (state0 === 6 || state0 === 0 && t2.$lt(value, 254))
                                                    switch (state0) {
                                                      case 0:
                                                        value = t2.$sub(value, 252);
                                                        $.intTypeCheck(value);
                                                      case 6:
                                                        state0 = 0;
                                                    }
                                                  else {
                                                    this._liblib5$_current = this.replacementCodepoint;
                                                    return true;
                                                  }
                                                  additionalBytes = 5;
                                              }
                                        }
                                  }
                            }
                      }
                }
          }
        j = 0;
      case 7:
      case 8:
        var t4, validSequence, nonOverlong, inRange;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = $.getInterceptor$n(j);
                if (t2.$lt(j, additionalBytes)) {
                  t4 = t1._liblib5$_offset + 1;
                  t1._liblib5$_offset = $.intTypeCheck(t4);
                  t4 = t4 < t3;
                } else
                  t4 = false;
                if (!t4)
                  break L0;
                nextValue = t1.get$current();
                $.intTypeCheck(nextValue);
              case 7:
                state0 = 0;
                t4 = $.getInterceptor$n(nextValue);
                if (t4.$gt(nextValue, 127) && t4.$lt(nextValue, 192))
                  value = ($.$shl$n(value, 6) | t4.$and(nextValue, 63)) >>> 0;
                else {
                  if (t4.$ge(nextValue, 192))
                    t1._liblib5$_offset = $.intTypeCheck(t1._liblib5$_offset - 1);
                  break L0;
                }
                j = t2.$add(j, 1);
                $.intTypeCheck(j);
              case 8:
                state0 = 0;
            }
        if (j === additionalBytes) {
          t2 = $.getInterceptor$n(value);
          validSequence = t2.$lt(value, 55296) || t2.$gt(value, 57343);
        } else
          validSequence = false;
        if (!(additionalBytes === 1 && $.$gt$n(value, 127)))
          if (!(additionalBytes === 2 && $.$gt$n(value, 2047))) {
            t2 = additionalBytes === 3 && $.$gt$n(value, 65535);
            nonOverlong = t2;
          } else
            nonOverlong = true;
        else
          nonOverlong = true;
        inRange = $.$le$n(value, 1114111);
        if (validSequence && nonOverlong && inRange) {
          this._liblib5$_current = value;
          return true;
        } else {
          this._liblib5$_current = this.replacementCodepoint;
          return true;
        }
    }
  },
  $isIterator: true,
  $asIterator: function() { return [$.JSInt]; },
  $asObject: null
};

$$.Object_ListMixin24 = {"": "Object+ListMixin;", $isList: true, $asList: function() { return [$.Map]; }, $isIterable: true, $asIterable: function() { return [$.Map]; }, $asObject: null};

$$.Object_ListMixin_ImmutableListMixin24 = {"": "Object_ListMixin24+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Map]; }, $isIterable: true, $asIterable: function() { return [$.Map]; }, $asObject: null};

$$.Instance = {"": "Object;model>,center,scale,MV",
  update$1: function(_, gameLoop) {
    $.propertyTypeCheck(gameLoop, "$isGameLoopHtml");
  },
  draw$2: function(gameLoop, cam) {
    var t1, t2, t3, t4, t5, prog, gl;
    $.propertyTypeCheck(gameLoop, "$isGameLoopHtml");
    t1 = this.MV;
    $.setViewMatrix(t1, cam.eye, cam.center, cam.up);
    t2 = this.center.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = $.doubleTypeCheck(t2[0]);
    if (1 >= t3)
      throw $.ioore(1);
    t5 = $.doubleTypeCheck(t2[1]);
    if (2 >= t3)
      throw $.ioore(2);
    t1.translate$3(t1, t4, t5, $.doubleTypeCheck(t2[2]));
    t2 = this.scale;
    t1.scale$3(t1, t2, t2, t2);
    t2 = this.model;
    prog = t2.program;
    gl = $.interceptedTypeCheck(prog.gl, "$isRenderingContext");
    t5 = $.getInterceptor$x(gl);
    t5.uniformMatrix4fv$3(gl, prog.u_MV, false, t1.storage);
    t5.bindBuffer$2(gl, 34962, t2.vertexPositionBuffer);
    t5.vertexAttribPointer$6(gl, prog.a_Position, t2.vertexPositionBufferItemSize, 5126, false, 0, 0);
    t5.bindBuffer$2(gl, 34963, t2.vertexIndexBuffer);
    t1 = t2.vertexIndexLength;
    t2 = t2.vertexIndexBufferItemSize;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t5.drawElements$4(gl, 4, t1, 5123, 0 * t2);
  },
  $isInstance: true
};

$$.Model = {"": "Object;vertexPositionBuffer,vertexIndexBuffer,vertexPositionBufferItemSize,vertexIndexBufferItemSize<,vertexIndexLength,instanceList,program<",
  set$program: function(v) {
    this.program = $.propertyTypeCheck(v, "$isShaderProgram");
  },
  _createBuffers$5: function(gl, indices, vertCoord, textCoord, normCoord) {
    var t1;
    $.interceptedTypeCheck(gl, "$isRenderingContext");
    $.listTypeCheck(indices);
    $.listTypeCheck(vertCoord);
    $.listTypeCheck(textCoord);
    $.listTypeCheck(normCoord);
    t1 = $.getInterceptor$x(gl);
    this.vertexPositionBuffer = gl.createBuffer();
    t1.bindBuffer$2(gl, 34962, this.vertexPositionBuffer);
    $.listTypeCheck(vertCoord);
    t1.bufferData$3(gl, 34962, new Float32Array(vertCoord), 35044);
    this.vertexPositionBufferItemSize = 3;
    this.vertexIndexBuffer = gl.createBuffer();
    t1.bindBuffer$2(gl, 34963, this.vertexIndexBuffer);
    $.listTypeCheck(indices);
    $.listTypeCheck(indices);
    t1.bufferData$3(gl, 34963, new Uint16Array(indices), 35044);
    this.vertexIndexBufferItemSize = 2;
    this.vertexIndexLength = $.intTypeCheck($.get$length$asx(indices));
    $.Primitives_printString("Model._createBuffers: vertex index length: " + $.S(this.vertexIndexLength));
    t1.bindBuffer$2(gl, 34962, null);
    t1.bindBuffer$2(gl, 34963, null);
  },
  drawInstances$2: function(gameLoop, cam) {
    $.JSArray_methods.forEach$1(this.instanceList, new $.Model_drawInstances_closure($.propertyTypeCheck(gameLoop, "$isGameLoopHtml"), cam));
  },
  update$1: function(_, gameLoop) {
    $.JSArray_methods.forEach$1(this.instanceList, new $.Model_update_closure($.propertyTypeCheck(gameLoop, "$isGameLoopHtml")));
  },
  Model$fromOBJ$3: function(gl, program, URL) {
    $.interceptedTypeCheck(gl, "$isRenderingContext");
    $.HttpRequest_getString(URL, null, null).then$1(new $.Model$fromOBJ_handleResponse(this, gl, URL)).catchError$1(new $.Model$fromOBJ_handleError(URL));
  },
  Model$fromJson$3: function(gl, program, URL) {
    $.interceptedTypeCheck(gl, "$isRenderingContext");
    $.HttpRequest_getString(URL, null, null).then$1(new $.Model$fromJson_handleResponse(this, gl)).catchError$1(new $.Model$fromJson_handleError(URL));
  },
  $isModel: true
};

$$.Model$fromJson_handleResponse = {"": "Closure;this_0,gl_1",
  call$1: function(response) {
    var m, e, exception, t1;
    $.stringTypeCheck(response);
    m = null;
    try {
      m = $.interceptedTypeCheck($.parse(response, null), "$isMap");
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      $.Primitives_printString("Model.fromJson: failure parsing JSON: " + $.S(e));
      return;
    }

    this.this_0._createBuffers$5(this.gl_1, $.listTypeCheck($.$index$asx(m, "vertInd")), $.listTypeCheck($.$index$asx(m, "vertCoord")), null, null);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true
};

$$.Model$fromJson_handleError = {"": "Closure;URL_2",
  call$1: function(err) {
    $.Primitives_printString("Model.fromJson: failure fetching JSON from URL: " + this.URL_2 + ": " + $.S(err));
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.Model$fromOBJ_handleResponse = {"": "Closure;this_0,gl_1,URL_2",
  call$1: function(response) {
    var t1, obj;
    $.stringTypeCheck(response);
    t1 = this.URL_2;
    $.Primitives_printString("Model.fromOBJ: fetched OBJ from URL: " + t1);
    obj = $.Obj$fromString(t1, response);
    this.this_0._createBuffers$5(this.gl_1, obj.indices, obj.vertCoord, obj.textCoord, obj.normCoord);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true
};

$$.Model$fromOBJ_handleError = {"": "Closure;URL_3",
  call$1: function(err) {
    $.Primitives_printString("Model.fromOBJ: failure fetching OBJ from URL: " + this.URL_3 + ": " + $.S(err));
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.Model_drawInstances_closure = {"": "Closure;gameLoop_0,cam_1",
  call$1: function(i) {
    return $.propertyTypeCheck(i, "$isInstance").draw$2(this.gameLoop_0, this.cam_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.Model_update_closure = {"": "Closure;gameLoop_0",
  call$1: function(i) {
    $.propertyTypeCheck(i, "$isInstance");
    return i.update$1(i, this.gameLoop_0);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.Camera = {"": "Object;degreesPerSec,camOrbitRadius,eye,center,up,oldAngle,angle",
  getRad$1: function(interpolation) {
    var t1, t2;
    $.doubleTypeCheck(interpolation);
    t1 = this.angle;
    t2 = this.oldAngle;
    t1 = $.$mul$n(interpolation, $.$sub$n(t1, t2));
    if (typeof t2 !== "number")
      throw $.iae(t2);
    return $.$mul$n($.doubleTypeCheck(t1 + t2), 3.141592653589793) / 180;
  },
  render$1: function(gameLoop) {
    var r, t1, t2, t3;
    r = $.doubleTypeCheck(this.getRad$1(gameLoop.get$renderInterpolationFactor()));
    t1 = this.eye;
    t2 = this.camOrbitRadius;
    t3 = typeof r !== "number";
    if (t3)
      $.throwExpression($.ArgumentError$(r));
    t1.$indexSet(t1, 0, t2 * Math.sin(r));
    if (t3)
      $.throwExpression($.ArgumentError$(r));
    t1.$indexSet(t1, 2, t2 * Math.cos(r));
  }
};

$$.Cookie__readCookie_closure = {"": "Closure;cookie_0",
  call$1: function(t) {
    var t1, k, t2;
    t1 = $.getInterceptor$asx(t);
    k = t1.indexOf$1(t, "=");
    if (k > 0) {
      t2 = this.cookie_0;
      t2.$indexSet(t2, $._uriDecode(t1.substring$2(t, 0, k)), $._uriDecode(t1.substring$1(t, k + 1)));
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.initDebugLostContext_closure = {"": "Closure;",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.Primitives_printString("lose context button: FIXME");
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isEventListener: true
};

$$.initDebugLostContext_closure0 = {"": "Closure;",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.Primitives_printString("restore context button: FIXME");
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isEventListener: true
};

$$.initSquares_closure = {"": "Closure;squareProgram2_0",
  call$0: function() {
    this.squareProgram2_0.fetch$3($.shaderCache, "/shader/clip_vs.txt", "/shader/clip2_fs.txt");
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.initAirshipTex_onModelDone = {"": "Closure;temporaryColor_0",
  call$2: function(gl, airshipModel) {
    $.interceptedTypeCheck(gl, "$isRenderingContext");
    $.propertyTypeCheck(airshipModel, "$isTexModel");
    airshipModel.addTexture$1($.TextureInfo$(gl, $.textureTable, 0, airshipModel.vertexIndexLength, "/texture/airship_all_diffuse.jpg", this.temporaryColor_0));
  },
  $isFunction: true,
  $asObject: null
};

$$.initAirshipTex_onModelDone2 = {"": "Closure;temporaryColor_1",
  call$2: function(gl, airshipModel) {
    $.interceptedTypeCheck(gl, "$isRenderingContext");
    $.propertyTypeCheck(airshipModel, "$isTexModel");
    airshipModel.addTexture$1($.TextureInfo$(gl, $.textureTable, 0, airshipModel.vertexIndexLength, "INTENTIONAL-BAD-TEXTURE-NAME", this.temporaryColor_1));
  },
  $isFunction: true,
  $asObject: null
};

$$.initContext_closure = {"": "Closure;gl_0",
  call$1: function(p) {
    return $.propertyTypeCheck(p, "$isShaderProgram").initContext$2(this.gl_0, $.textureTable);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.draw_closure = {"": "Closure;gameLoop_0",
  call$1: function(p) {
    return $.propertyTypeCheck(p, "$isShaderProgram").drawModels$3(this.gameLoop_0, $.get$cam(), $.get$pMatrix());
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.update_closure = {"": "Closure;gameLoop_0",
  call$1: function(p) {
    $.propertyTypeCheck(p, "$isShaderProgram");
    return p.update$1(p, this.gameLoop_0);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.main_closure = {"": "Closure;",
  call$1: function(gameLoop) {
    $.update($.propertyTypeCheck(gameLoop, "$isGameLoopHtml"));
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.main_closure0 = {"": "Closure;gl_0",
  call$1: function(gameLoop) {
    var t1, t2;
    $.propertyTypeCheck(gameLoop, "$isGameLoopHtml");
    t1 = this.gl_0;
    $.interceptedTypeCheck(t1, "$isRenderingContext");
    t2 = $.stats._timer;
    t2.start$0(t2);
    $.draw(t1, gameLoop);
    t1 = $.stats;
    t1.end$0(t1);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.Obj = {"": "Object;indices<,vertCoord<,textCoord<,normCoord",
  Obj$fromString$2: function(url, str, box_0) {
    var indexTable, _vertCoord, _textCoord;
    $.stringTypeCheck(str);
    indexTable = $.interceptedTypeCheck($.Map_Map($.JSString, $.JSInt), "$isMap");
    _vertCoord = $.List_List($, $.JSDouble);
    $.setRuntimeTypeInfo(_vertCoord, [$.JSDouble]);
    $.listTypeCheck(_vertCoord);
    _textCoord = $.List_List($, $.JSDouble);
    $.setRuntimeTypeInfo(_textCoord, [$.JSDouble]);
    $.listTypeCheck(_textCoord);
    box_0.indexCounter_0 = 0;
    box_0.lineNum_1 = 0;
    $.forEach$1$ax($.listTypeCheck($.split$1$s(str, "\n")), new $.Obj$fromString_closure(new $.Obj$fromString_parseLine(box_0, this, url, indexTable, _vertCoord, _textCoord)));
    $.print("Obj.fromString: indices.length = " + this.indices.length);
    $.print("Obj.fromString: vertCoord.length = " + this.vertCoord.length);
    $.print("Obj.fromString: textCoord.length = " + this.textCoord.length);
    $.print("Obj.fromString: normCoord.length = " + this.normCoord.length);
  }
};

$$.Obj$fromString_parseLine = {"": "Closure;box_0,this_1,url_2,indexTable_3,_vertCoord_4,_textCoord_5",
  call$1: function(rawLine) {
    var t1, line, v, t2, t3, t, f, t4, t5, t6, i, t7, ind, index, t8, vi, vIndex, vOffset, t9, t10, t11, ti, tIndex, tOffset, ni;
    $.stringTypeCheck(rawLine);
    t1 = this.box_0;
    t1.lineNum_1 = $.intTypeCheck($.$add$ns(t1.lineNum_1, 1));
    line = $.trim$0$s(rawLine);
    if ($.JSString_methods.get$isEmpty(line))
      return;
    if (0 >= line.length)
      throw $.ioore(0);
    if (line[0] === "#")
      return;
    if ($.JSString_methods.startsWith$1(line, "v ")) {
      v = $.listTypeCheck(line.split(" "));
      t2 = $.getInterceptor$asx(v);
      if (!$.boolConversionCheck($.$eq(t2.get$length(v), 4))) {
        $.Primitives_printString("OBJ: wrong number of vertex coordinates (" + $.S($.$sub$n(t2.get$length(v), 1)) + " != 3) at line=" + $.S(t1.lineNum_1) + " from url=" + this.url_2 + ": [" + $.S(rawLine) + "]");
        return;
      }
      t1 = this._vertCoord_4;
      t3 = t2.$index(v, 1);
      $.stringTypeCheck(t3);
      $.functionTypeCheck(null);
      $.JSArray_methods.add$1(t1, $.doubleTypeCheck($.Primitives_parseDouble(t3, null)));
      t3 = t2.$index(v, 2);
      $.stringTypeCheck(t3);
      $.JSArray_methods.add$1(t1, $.doubleTypeCheck($.Primitives_parseDouble(t3, null)));
      t2 = t2.$index(v, 3);
      $.stringTypeCheck(t2);
      $.JSArray_methods.add$1(t1, $.doubleTypeCheck($.Primitives_parseDouble(t2, null)));
      return;
    }
    if ($.JSString_methods.startsWith$1(line, "vt ")) {
      t = $.listTypeCheck(line.split(" "));
      t2 = $.getInterceptor$asx(t);
      if (!$.boolConversionCheck($.$eq(t2.get$length(t), 3))) {
        $.Primitives_printString("OBJ: wrong number of texture coordinates (" + $.S($.$sub$n(t2.get$length(t), 1)) + " != 2) at line=" + $.S(t1.lineNum_1) + " from url=" + this.url_2 + ": [" + $.S(rawLine) + "]");
        return;
      }
      t1 = this._textCoord_5;
      t3 = t2.$index(t, 1);
      $.stringTypeCheck(t3);
      $.functionTypeCheck(null);
      $.JSArray_methods.add$1(t1, $.doubleTypeCheck($.Primitives_parseDouble(t3, null)));
      t2 = t2.$index(t, 2);
      $.stringTypeCheck(t2);
      $.JSArray_methods.add$1(t1, $.doubleTypeCheck($.Primitives_parseDouble(t2, null)));
      return;
    }
    if ($.JSString_methods.startsWith$1(line, "vn "))
      return;
    if ($.JSString_methods.startsWith$1(line, "f ")) {
      f = $.listTypeCheck(line.split(" "));
      t2 = $.getInterceptor$asx(f);
      if (!$.boolConversionCheck($.$eq(t2.get$length(f), 4))) {
        $.Primitives_printString("OBJ: wrong number of face indices (" + $.S($.$sub$n(t2.get$length(f), 1)) + " != 3) at line=" + $.S(t1.lineNum_1) + " from url=" + this.url_2 + ": [" + $.S(rawLine) + "]");
        return;
      }
      for (t3 = this.this_1, t4 = this.indexTable_3, t5 = this._textCoord_5, t6 = this._vertCoord_4, i = 1; t7 = $.getInterceptor$n(i), t7.$lt(i, t2.get$length(f)); i = $.intTypeCheck(t7.$add(i, 1))) {
        ind = $.stringTypeCheck(t2.$index(f, i));
        index = $.intTypeCheck(t4.$index(t4, ind));
        if (index != null) {
          $.JSArray_methods.add$1(t3.get$indices(), index);
          continue;
        }
        v = $.listTypeCheck($.split$1$s(ind, "/"));
        t8 = $.getInterceptor$asx(v);
        vi = $.stringTypeCheck(t8.$index(v, 0));
        $.functionTypeCheck(null);
        vIndex = $.intTypeCheck($.$sub$n($.intTypeCheck($.Primitives_parseInt(vi, null, null)), 1));
        if (typeof vIndex !== "number")
          throw $.iae(vIndex);
        vOffset = $.intTypeCheck(3 * vIndex);
        t9 = t3.get$vertCoord();
        t10 = $.getInterceptor$ns(vOffset);
        t11 = t10.$add(vOffset, 0);
        if (t11 >>> 0 !== t11 || t11 >= t6.length)
          throw $.ioore(t11);
        $.JSArray_methods.add$1(t9, t6[t11]);
        t11 = t3.get$vertCoord();
        t9 = t10.$add(vOffset, 1);
        if (t9 >>> 0 !== t9 || t9 >= t6.length)
          throw $.ioore(t9);
        $.JSArray_methods.add$1(t11, t6[t9]);
        t9 = t3.get$vertCoord();
        t10 = t10.$add(vOffset, 2);
        if (t10 >>> 0 !== t10 || t10 >= t6.length)
          throw $.ioore(t10);
        $.JSArray_methods.add$1(t9, t6[t10]);
        if ($.$gt$n(t8.get$length(v), 1)) {
          ti = $.stringTypeCheck(t8.$index(v, 1));
          if (ti != null && !$.get$isEmpty$asx(ti)) {
            tIndex = $.intTypeCheck($.$sub$n($.intTypeCheck($.Primitives_parseInt(ti, null, null)), 1));
            if (typeof tIndex !== "number")
              throw $.iae(tIndex);
            tOffset = $.intTypeCheck(2 * tIndex);
            t9 = t3.get$textCoord();
            t10 = $.getInterceptor$ns(tOffset);
            t11 = t10.$add(tOffset, 0);
            if (t11 >>> 0 !== t11 || t11 >= t5.length)
              throw $.ioore(t11);
            $.JSArray_methods.add$1(t9, t5[t11]);
            t11 = t3.get$textCoord();
            t10 = t10.$add(tOffset, 1);
            if (t10 >>> 0 !== t10 || t10 >= t5.length)
              throw $.ioore(t10);
            $.JSArray_methods.add$1(t11, t5[t10]);
          }
        }
        if ($.$gt$n(t8.get$length(v), 2)) {
          ni = $.stringTypeCheck(t8.$index(v, 2));
          if (ni != null && !$.get$isEmpty$asx(ni))
            $.intTypeCheck($.$sub$n($.intTypeCheck($.Primitives_parseInt(ni, null, null)), 1));
        }
        $.JSArray_methods.add$1(t3.get$indices(), t1.indexCounter_0);
        t4.$indexSet(t4, ind, t1.indexCounter_0);
        t1.indexCounter_0 = $.intTypeCheck($.$add$ns(t1.indexCounter_0, 1));
      }
      return;
    }
    $.Primitives_printString("OBJ: unknown pattern at line=" + $.S(t1.lineNum_1) + " from url=" + this.url_2 + ": [" + $.S(rawLine) + "]");
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true
};

$$.Obj$fromString_closure = {"": "Closure;parseLine_6",
  call$1: function(line) {
    return this.parseLine_6.call$1($.stringTypeCheck(line));
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.ShaderProgram = {"": "Object;program<,gl<,a_Position,u_MV,u_P,modelList",
  set$program: function(v) {
    this.program = $.interceptedTypeCheck(v, "$isProgram");
  },
  initContext$2: function(gl, textureTable) {
    $.interceptedTypeCheck(gl, "$isRenderingContext");
    $.interceptedTypeCheck(textureTable, "$isMap");
  },
  getLocations$0: function() {
    var t1, t2;
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    this.a_Position = t2.getAttribLocation$2(t1, this.program, "a_Position");
    this.u_MV = t2.getUniformLocation$2(t1, this.program, "u_MV");
    this.u_P = t2.getUniformLocation$2(t1, this.program, "u_P");
    $.Primitives_printString("ShaderProgram: locations ready");
  },
  fetch$3: function(shaderCache, vertexShaderURL, fragmentShaderURL) {
    var t1, t2, t3;
    t1 = {};
    $.interceptedTypeCheck(shaderCache, "$isMap");
    $.Primitives_printString("Program.fetch: vsUrl=" + vertexShaderURL + " fsURL=" + fragmentShaderURL);
    t2 = new $.ShaderProgram_fetch_compileShader(this, shaderCache);
    t1.vertexShader_0 = null;
    t1.fragmentShader_1 = null;
    t3 = new $.ShaderProgram_fetch_tryLink(t1, this);
    t1.vertexShader_0 = $.interceptedTypeCheck($.$index$asx(shaderCache, vertexShaderURL), "$isShader");
    if (t1.vertexShader_0 == null) {
      $.Primitives_printString($.JSString_methods.$add($.JSString_methods.$add("vertexShader: ", vertexShaderURL), ": cache MISS"));
      new $.ShaderProgram_fetch_fetchVertexShader(t1, vertexShaderURL, t2, t3).call$0();
    } else
      $.Primitives_printString($.JSString_methods.$add($.JSString_methods.$add("vertexShader: ", vertexShaderURL), ": cache HIT"));
    if (t1.fragmentShader_1 == null) {
      $.Primitives_printString($.JSString_methods.$add($.JSString_methods.$add("fragmentShader: ", fragmentShaderURL), ": cache MISS"));
      new $.ShaderProgram_fetch_fetchFragmentShader(t1, fragmentShaderURL, t2, t3).call$0();
    } else
      $.Primitives_printString($.JSString_methods.$add($.JSString_methods.$add("fragmentShader: ", fragmentShaderURL), ": cache HIT"));
    t3.call$0();
  },
  drawModels$3: function(gameLoop, cam, pMatrix) {
    var t1, t2;
    $.propertyTypeCheck(gameLoop, "$isGameLoopHtml");
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    t2.useProgram$1(t1, this.program);
    t2.enableVertexAttribArray$1(t1, this.a_Position);
    t2.uniformMatrix4fv$3(t1, this.u_P, false, pMatrix.storage);
    $.JSArray_methods.forEach$1(this.modelList, new $.ShaderProgram_drawModels_closure(gameLoop, cam));
    t2.bindBuffer$2(t1, 34962, null);
    t2.bindBuffer$2(t1, 34963, null);
  },
  update$1: function(_, gameLoop) {
    $.JSArray_methods.forEach$1(this.modelList, new $.ShaderProgram_update_closure($.propertyTypeCheck(gameLoop, "$isGameLoopHtml")));
  },
  $isShaderProgram: true
};

$$.ShaderProgram_fetch_compileShader = {"": "Closure;this_1,shaderCache_2",
  call$3: function(shaderURL, shaderSource, shaderType) {
    var t1, shader;
    $.stringTypeCheck(shaderURL);
    $.stringTypeCheck(shaderSource);
    $.intTypeCheck(shaderType);
    t1 = this.this_1;
    shader = $.createShader$1$x(t1.get$gl(), shaderType);
    $.shaderSource$2$x(t1.get$gl(), shader, shaderSource);
    $.compileShader$1$x(t1.get$gl(), shader);
    if (!$.boolConversionCheck($.getShaderParameter$2$x(t1.get$gl(), shader, 35713)) && !$.boolConversionCheck($.isContextLost$0$x(t1.get$gl()))) {
      $.Primitives_printString($.JSString_methods.$add($.JSString_methods.$add($.JSString_methods.$add("compileShader: compilation FAILURE: ", shaderURL), ": "), $.getShaderInfoLog$1$x(t1.get$gl(), shader)));
      return;
    }
    t1 = this.shaderCache_2;
    t1.$indexSet(t1, shaderURL, shader);
    $.Primitives_printString($.JSString_methods.$add($.JSString_methods.$add("compileShader: ", shaderURL), ": compiled and cached"));
    return shader;
  },
  $isFunction: true,
  $asObject: null
};

$$.ShaderProgram_fetch_tryLink = {"": "Closure;box_0,this_3",
  call$0: function() {
    var t1, t2, p;
    t1 = this.box_0;
    if (t1.vertexShader_0 == null || t1.fragmentShader_1 == null)
      return;
    t2 = this.this_3;
    p = $.createProgram$0$x(t2.get$gl());
    $.attachShader$2$x(t2.get$gl(), p, t1.vertexShader_0);
    $.attachShader$2$x(t2.get$gl(), p, t1.fragmentShader_1);
    $.linkProgram$1$x(t2.get$gl(), p);
    if (!$.boolConversionCheck($.getProgramParameter$2$x(t2.get$gl(), p, 35714)) && !$.boolConversionCheck($.isContextLost$0$x(t2.get$gl())))
      $.Primitives_printString($.toString$0($.getProgramInfoLog$1$x(t2.get$gl(), p)));
    $.Primitives_printString("ShaderProgram: program ready");
    t2.set$program(p);
    t2.getLocations$0();
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.ShaderProgram_fetch_fetchVertexShader = {"": "Closure;box_0,vertexShaderURL_4,compileShader_5,tryLink_6",
  call$0: function() {
    var requestVert, t1, t2;
    requestVert = new XMLHttpRequest();
    t1 = this.vertexShaderURL_4;
    $.HttpRequest_methods.open$2(requestVert, "GET", t1);
    t2 = $.HttpRequest_methods.get$onLoad(requestVert);
    t1 = new $.ShaderProgram_fetch_fetchVertexShader_closure(this.box_0, t1, this.compileShader_5, this.tryLink_6, requestVert);
    $.functionTypeCheck(t1);
    $.functionTypeCheck(null);
    $.functionTypeCheck(null);
    $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t1, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
    t2 = $.HttpRequest_methods.get$onError(requestVert);
    t1 = new $.ShaderProgram_fetch_fetchVertexShader_closure0();
    $.functionTypeCheck(t1);
    $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t1, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
    requestVert.send();
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.ShaderProgram_fetch_fetchVertexShader_closure = {"": "Closure;box_0,vertexShaderURL_7,compileShader_8,tryLink_9,requestVert_10",
  call$1: function(e) {
    var t1, response;
    $.interceptedTypeCheck(e, "$isProgressEvent");
    t1 = this.requestVert_10;
    response = t1.responseText;
    if (t1.status !== 200) {
      $.Primitives_printString("vertexShader: error: [" + $.S(response) + "]");
      return;
    }
    this.box_0.vertexShader_0 = $.interceptedTypeCheck(this.compileShader_8.call$3(this.vertexShaderURL_7, response, 35633), "$isShader");
    this.tryLink_9.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isEventListener: true
};

$$.ShaderProgram_fetch_fetchVertexShader_closure0 = {"": "Closure;",
  call$1: function(e) {
    $.Primitives_printString("vertexShader: error: [" + $.S(e) + "]");
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.ShaderProgram_fetch_fetchFragmentShader = {"": "Closure;box_0,fragmentShaderURL_11,compileShader_12,tryLink_13",
  call$0: function() {
    var requestFrag, t1, t2;
    requestFrag = new XMLHttpRequest();
    t1 = this.fragmentShaderURL_11;
    $.HttpRequest_methods.open$2(requestFrag, "GET", t1);
    t2 = $.HttpRequest_methods.get$onLoad(requestFrag);
    t1 = new $.ShaderProgram_fetch_fetchFragmentShader_closure(this.box_0, t1, this.compileShader_12, this.tryLink_13, requestFrag);
    $.functionTypeCheck(t1);
    $.functionTypeCheck(null);
    $.functionTypeCheck(null);
    $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t1, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
    t2 = $.HttpRequest_methods.get$onError(requestFrag);
    t1 = new $.ShaderProgram_fetch_fetchFragmentShader_closure0();
    $.functionTypeCheck(t1);
    $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t1, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
    requestFrag.send();
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.ShaderProgram_fetch_fetchFragmentShader_closure = {"": "Closure;box_0,fragmentShaderURL_14,compileShader_15,tryLink_16,requestFrag_17",
  call$1: function(e) {
    var t1, response;
    $.interceptedTypeCheck(e, "$isProgressEvent");
    t1 = this.requestFrag_17;
    response = t1.responseText;
    if (t1.status !== 200) {
      $.Primitives_printString("fragmentShader: error: [" + $.S(response) + "]");
      return;
    }
    this.box_0.fragmentShader_1 = $.interceptedTypeCheck(this.compileShader_15.call$3(this.fragmentShaderURL_14, response, 35632), "$isShader");
    this.tryLink_16.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isEventListener: true
};

$$.ShaderProgram_fetch_fetchFragmentShader_closure0 = {"": "Closure;",
  call$1: function(e) {
    $.Primitives_printString("fragmentShader: error: [" + $.S(e) + "]");
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.ShaderProgram_drawModels_closure = {"": "Closure;gameLoop_0,cam_1",
  call$1: function(m) {
    return $.propertyTypeCheck(m, "$isModel").drawInstances$2(this.gameLoop_0, this.cam_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.ShaderProgram_update_closure = {"": "Closure;gameLoop_0",
  call$1: function(m) {
    $.propertyTypeCheck(m, "$isModel");
    return m.update$1(m, this.gameLoop_0);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.TexShaderProgram = {"": "ShaderProgram;a_TextureCoord,u_Sampler,program,gl,a_Position,u_MV,u_P,modelList",
  initContext$2: function(gl, textureTable) {
    $.JSArray_methods.forEach$1(this.modelList, new $.TexShaderProgram_initContext_closure($.interceptedTypeCheck(gl, "$isRenderingContext"), $.interceptedTypeCheck(textureTable, "$isMap")));
  },
  getLocations$0: function() {
    var t1, t2;
    $.ShaderProgram.prototype.getLocations$0.call(this);
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    this.a_TextureCoord = t2.getAttribLocation$2(t1, this.program, "a_TextureCoord");
    this.u_Sampler = t2.getUniformLocation$2(t1, this.program, "u_Sampler");
    $.Primitives_printString("TexShaderProgram: locations ready");
  },
  drawModels$3: function(gameLoop, cam, pMatrix) {
    var t1, t2;
    $.propertyTypeCheck(gameLoop, "$isGameLoopHtml");
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    t2.useProgram$1(t1, this.program);
    t2.enableVertexAttribArray$1(t1, this.a_Position);
    t2.enableVertexAttribArray$1(t1, this.a_TextureCoord);
    t2.uniformMatrix4fv$3(t1, this.u_P, false, pMatrix.storage);
    $.JSArray_methods.forEach$1(this.modelList, new $.TexShaderProgram_drawModels_closure(gameLoop, cam));
    t2.bindBuffer$2(t1, 34962, null);
    t2.bindBuffer$2(t1, 34963, null);
    t2.bindTexture$2(t1, 3553, null);
  },
  $isTexShaderProgram: true
};

$$.TexShaderProgram_initContext_closure = {"": "Closure;gl_0,textureTable_1",
  call$1: function(m) {
    return $.propertyTypeCheck(m, "$isTexModel").initContext$2(this.gl_0, this.textureTable_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.TexShaderProgram_drawModels_closure = {"": "Closure;gameLoop_0,cam_1",
  call$1: function(m) {
    return $.propertyTypeCheck(m, "$isTexModel").drawInstances$2(this.gameLoop_0, this.cam_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.TexModel = {"": "Model;textureCoordBuffer,textureCoordBufferItemSize,textureInfoList,vertexPositionBuffer,vertexIndexBuffer,vertexPositionBufferItemSize,vertexIndexBufferItemSize,vertexIndexLength,instanceList,program",
  initContext$2: function(gl, textureTable) {
    $.JSArray_methods.forEach$1(this.textureInfoList, new $.TexModel_initContext_closure($.interceptedTypeCheck(gl, "$isRenderingContext"), $.interceptedTypeCheck(textureTable, "$isMap")));
  },
  _liblib4$_createBuffers$5: function(gl, indices, vertCoord, textCoord, normCoord) {
    var t1;
    $.interceptedTypeCheck(gl, "$isRenderingContext");
    $.listTypeCheck(indices);
    $.listTypeCheck(vertCoord);
    $.listTypeCheck(textCoord);
    $.listTypeCheck(normCoord);
    t1 = $.getInterceptor$x(gl);
    this.vertexPositionBuffer = gl.createBuffer();
    t1.bindBuffer$2(gl, 34962, this.vertexPositionBuffer);
    $.listTypeCheck(vertCoord);
    t1.bufferData$3(gl, 34962, new Float32Array(vertCoord), 35044);
    this.vertexPositionBufferItemSize = 3;
    this.textureCoordBuffer = gl.createBuffer();
    t1.bindBuffer$2(gl, 34962, this.textureCoordBuffer);
    $.listTypeCheck(textCoord);
    t1.bufferData$3(gl, 34962, new Float32Array(textCoord), 35044);
    this.textureCoordBufferItemSize = 2;
    this.vertexIndexBuffer = gl.createBuffer();
    t1.bindBuffer$2(gl, 34963, this.vertexIndexBuffer);
    $.listTypeCheck(indices);
    $.listTypeCheck(indices);
    t1.bufferData$3(gl, 34963, new Uint16Array(indices), 35044);
    this.vertexIndexBufferItemSize = 2;
    this.vertexIndexLength = $.intTypeCheck($.get$length$asx(indices));
    $.Primitives_printString("TexModel._createBuffers: vertex index length: " + $.S(this.vertexIndexLength));
    t1.bindBuffer$2(gl, 34962, null);
    t1.bindBuffer$2(gl, 34963, null);
  },
  addTexture$1: function(tex) {
    $.JSArray_methods.add$1(this.textureInfoList, tex);
  },
  drawInstances$2: function(gameLoop, cam) {
    var gl, t1;
    $.propertyTypeCheck(gameLoop, "$isGameLoopHtml");
    gl = $.interceptedTypeCheck(this.program.gl, "$isRenderingContext");
    t1 = $.getInterceptor$x(gl);
    t1.bindBuffer$2(gl, 34962, this.vertexPositionBuffer);
    t1.vertexAttribPointer$6(gl, this.program.a_Position, this.vertexPositionBufferItemSize, 5126, false, 0, 0);
    t1.bindBuffer$2(gl, 34962, this.textureCoordBuffer);
    t1.vertexAttribPointer$6(gl, $.propertyTypeCast(this.program, "$isTexShaderProgram").a_TextureCoord, this.textureCoordBufferItemSize, 5126, false, 0, 0);
    t1.bindBuffer$2(gl, 34963, this.vertexIndexBuffer);
    $.JSArray_methods.forEach$1(this.instanceList, new $.TexModel_drawInstances_closure(gameLoop, cam));
  },
  TexModel$fromOBJ$4: function(gl, program, URL, onDone) {
    $.interceptedTypeCheck(gl, "$isRenderingContext");
    $.functionTypeCheck(onDone);
    this.program = program;
    $.HttpRequest_getString(URL, null, null).then$1(new $.TexModel$fromOBJ_handleResponse(this, gl, URL, onDone)).catchError$1(new $.TexModel$fromOBJ_handleError(URL));
  },
  $isTexModel: true
};

$$.TexModel_initContext_closure = {"": "Closure;gl_0,textureTable_1",
  call$1: function(ti) {
    return $.propertyTypeCheck(ti, "$isTextureInfo").forceCreateTexture$2(this.gl_0, this.textureTable_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.TexModel$fromOBJ_handleResponse = {"": "Closure;this_0,gl_1,URL_2,onDone_3",
  call$1: function(response) {
    var t1, obj, t2;
    $.stringTypeCheck(response);
    t1 = this.URL_2;
    $.Primitives_printString("TexModel.fromOBJ: fetched OBJ from URL: " + t1);
    obj = $.Obj$fromString(t1, response);
    t1 = this.this_0;
    t2 = this.gl_1;
    t1._liblib4$_createBuffers$5(t2, obj.indices, obj.vertCoord, obj.textCoord, obj.normCoord);
    this.onDone_3.call$2(t2, t1);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true
};

$$.TexModel$fromOBJ_handleError = {"": "Closure;URL_4",
  call$1: function(err) {
    $.Primitives_printString("TexModel.fromOBJ: failure fetching OBJ from URL: " + this.URL_4 + ": " + $.S(err));
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.TexModel_drawInstances_closure = {"": "Closure;gameLoop_0,cam_1",
  call$1: function(i) {
    return $.propertyTypeCheck(i, "$isInstance").draw$2(this.gameLoop_0, this.cam_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.TexInstance = {"": "Instance;model,center,scale,MV",
  draw$2: function(gameLoop, cam) {
    var t1, t2, t3, t4, t5, prog, gl;
    $.propertyTypeCheck(gameLoop, "$isGameLoopHtml");
    t1 = this.MV;
    $.setViewMatrix(t1, cam.eye, cam.center, cam.up);
    t2 = this.center.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = $.doubleTypeCheck(t2[0]);
    if (1 >= t3)
      throw $.ioore(1);
    t5 = $.doubleTypeCheck(t2[1]);
    if (2 >= t3)
      throw $.ioore(2);
    t1.translate$3(t1, t4, t5, $.doubleTypeCheck(t2[2]));
    t2 = this.scale;
    t1.scale$3(t1, t2, t2, t2);
    t2 = this.model;
    prog = t2.program;
    gl = $.interceptedTypeCheck(prog.gl, "$isRenderingContext");
    $.uniformMatrix4fv$3$x(gl, prog.u_MV, false, t1.storage);
    $.JSArray_methods.forEach$1($.propertyTypeCast(t2, "$isTexModel").textureInfoList, new $.TexInstance_draw_closure(this, prog, gl));
  }
};

$$.TexInstance_draw_closure = {"": "Closure;this_0,prog_1,gl_2",
  call$1: function(ti) {
    var t1, t2, t3, t4, t5;
    $.propertyTypeCheck(ti, "$isTextureInfo");
    t1 = this.gl_2;
    t2 = $.getInterceptor$x(t1);
    t2.activeTexture$1(t1, 33985);
    t2.bindTexture$2(t1, 3553, ti.texture);
    t2.uniform1i$2(t1, $.propertyTypeCast(this.prog_1, "$isTexShaderProgram").u_Sampler, 1);
    t3 = ti.indexNumber;
    t4 = ti.indexOffset;
    t5 = $.get$model$x(this.this_0).get$vertexIndexBufferItemSize();
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t2.drawElements$4(t1, 4, t3, 5123, t4 * t5);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.SkyboxProgram = {"": "ShaderProgram;u_Skybox,program,gl,a_Position,u_MV,u_P,modelList",
  getLocations$0: function() {
    $.ShaderProgram.prototype.getLocations$0.call(this);
    this.u_Skybox = $.getUniformLocation$2$x(this.gl, this.program, "u_Skybox");
    $.Primitives_printString("SkyboxProgram: locations ready");
  },
  drawModels$3: function(gameLoop, cam, pMatrix) {
    var t1, t2;
    $.propertyTypeCheck(gameLoop, "$isGameLoopHtml");
    t1 = this.gl;
    t2 = $.getInterceptor$x(t1);
    t2.useProgram$1(t1, this.program);
    t2.enableVertexAttribArray$1(t1, this.a_Position);
    t2.activeTexture$1(t1, 33984);
    t2.uniform1i$2(t1, this.u_Skybox, 0);
    t2.uniformMatrix4fv$3(t1, this.u_P, false, pMatrix.storage);
    $.JSArray_methods.forEach$1(this.modelList, new $.SkyboxProgram_drawModels_closure(gameLoop, cam));
    t2.bindBuffer$2(t1, 34962, null);
    t2.bindBuffer$2(t1, 34963, null);
  }
};

$$.SkyboxProgram_drawModels_closure = {"": "Closure;gameLoop_0,cam_1",
  call$1: function(m) {
    return $.propertyTypeCheck(m, "$isModel").drawInstances$2(this.gameLoop_0, this.cam_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.SkyboxModel = {"": "Model;cubemapTexture<,vertexPositionBuffer,vertexIndexBuffer,vertexPositionBufferItemSize,vertexIndexBufferItemSize,vertexIndexLength,instanceList,program",
  addCubemapFace$2: function(face, URL) {
    var image, t1, t2, t3;
    image = $.interceptedTypeCheck($.ImageElement_ImageElement(null, null, null), "$isImageElement");
    t1 = new $.SkyboxModel_addCubemapFace_handleDone(this, face, URL, image);
    t2 = $.getInterceptor$x(image);
    t3 = t2.get$onLoad(image);
    $.functionTypeCheck(t1);
    $.functionTypeCheck(null);
    $.functionTypeCheck(null);
    $.propertyTypeCheck($._EventStreamSubscription$(t3._target, t3._eventType, t1, t3._useCapture, $.getRuntimeTypeArgument(t3, t3.$as_EventStream, 0)), "$isStreamSubscription");
    t2.get$onError(image).listen$1(new $.SkyboxModel_addCubemapFace_handleError(URL));
    image.src = URL;
  },
  drawInstances$2: function(gameLoop, cam) {
    var gl, t1;
    $.propertyTypeCheck(gameLoop, "$isGameLoopHtml");
    gl = $.interceptedTypeCheck(this.program.gl, "$isRenderingContext");
    t1 = $.getInterceptor$x(gl);
    t1.bindTexture$2(gl, 34067, this.cubemapTexture);
    $.JSArray_methods.forEach$1(this.instanceList, new $.SkyboxModel_drawInstances_closure(gameLoop, cam));
    t1.bindTexture$2(gl, 34067, null);
  },
  SkyboxModel$fromJson$5: function(gl, prog, URL, reverse, rescale) {
    this.cubemapTexture = $.interceptedTypeCheck(gl, "$isRenderingContext").createTexture();
  }
};

$$.SkyboxModel_addCubemapFace_handleDone = {"": "Closure;this_0,face_1,URL_2,image_3",
  call$1: function(e) {
    var t1, gl, t2;
    $.interceptedTypeCheck(e, "$isEvent");
    $.Primitives_printString("addCubemapFace: handleDone: loaded image from URL: " + this.URL_2);
    t1 = this.this_0;
    gl = $.interceptedTypeCheck(t1.get$program().get$gl(), "$isRenderingContext");
    t2 = $.getInterceptor$x(gl);
    t2.bindTexture$2(gl, 34067, t1.get$cubemapTexture());
    t2.texParameteri$3(gl, 34067, 10240, 9728);
    t2.texParameteri$3(gl, 34067, 10241, 9728);
    t2.texImage2D$6(gl, this.face_1, 0, 6408, 6408, 5121, this.image_3);
    t2.texParameteri$3(gl, 34067, 10242, 33071);
    t2.texParameteri$3(gl, 34067, 10243, 33071);
    t2.bindTexture$2(gl, 34067, null);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.SkyboxModel_addCubemapFace_handleError = {"": "Closure;URL_4",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.Primitives_printString("addCubemapFace: handleError: failure loading image from URL: " + this.URL_4 + ": " + $.S(e));
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.SkyboxModel_drawInstances_closure = {"": "Closure;gameLoop_0,cam_1",
  call$1: function(i) {
    return $.propertyTypeCheck(i, "$isInstance").draw$2(this.gameLoop_0, this.cam_1);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.SkyboxInstance = {"": "Instance;model,center,scale,MV",
  draw$2: function(gameLoop, cam) {
    var r, size, t1, t2, t3, t4, t5, s, prog, gl;
    r = $.doubleTypeCheck(cam.getRad$1($.propertyTypeCheck(gameLoop, "$isGameLoopHtml").get$renderInterpolationFactor()));
    if (typeof r !== "number")
      $.throwExpression($.ArgumentError$(r));
    size = $.doubleTypeCheck(15 * $.JSDouble_methods.abs$0(Math.sin(r)) + 1);
    t1 = this.MV;
    $.setViewMatrix(t1, cam.eye, cam.center, cam.up);
    t2 = this.center.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = $.doubleTypeCheck(t2[0]);
    if (1 >= t3)
      throw $.ioore(1);
    t5 = $.doubleTypeCheck(t2[1]);
    if (2 >= t3)
      throw $.ioore(2);
    t1.translate$3(t1, t4, t5, $.doubleTypeCheck(t2[2]));
    if (typeof size !== "number")
      throw $.iae(size);
    s = this.scale * size;
    t1.scale$3(t1, s, s, s);
    t2 = this.model;
    prog = t2.program;
    gl = $.interceptedTypeCheck(prog.gl, "$isRenderingContext");
    t5 = $.getInterceptor$x(gl);
    t5.uniformMatrix4fv$3(gl, prog.u_MV, false, t1.storage);
    t5.bindBuffer$2(gl, 34962, t2.vertexPositionBuffer);
    t5.vertexAttribPointer$6(gl, prog.a_Position, t2.vertexPositionBufferItemSize, 5126, false, 0, 0);
    t5.bindBuffer$2(gl, 34963, t2.vertexIndexBuffer);
    t1 = t2.vertexIndexLength;
    t2 = t2.vertexIndexBufferItemSize;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t5.drawElements$4(gl, 4, t1, 5123, 0 * t2);
  }
};

$$.TextureInfo = {"": "Object;indexOffset,indexNumber,textureName<,texture<",
  loadTexture2D$6: function(gl, textureTable, textureName, temporaryColor, handleDone, handleError) {
    var image, t1, t2, t3, fail, e;
    $.interceptedTypeCheck(textureTable, "$isMap");
    $.listTypeCheck(temporaryColor);
    $.functionTypeCheck(handleDone);
    $.functionTypeCheck(handleError);
    image = $.interceptedTypeCheck($.ImageElement_ImageElement(null, null, null), "$isImageElement");
    t1 = $.getInterceptor$x(gl);
    this.texture = gl.createTexture();
    t2 = new $.TextureInfo_loadTexture2D_onDone(this, gl, handleDone, image);
    t3 = this.texture;
    if (t3 == null) {
      fail = "could not create texture for: " + textureName;
      $.Primitives_printString("loadTexture2D: " + fail);
      e = $.HtmlDocument_methods.$$dom_createEvent$1(document, "Event");
      $.$$dom_initEvent$3$x(e, fail, true, true);
      handleError.call$1(e);
      return;
    }
    $.$indexSet$ax(textureTable, textureName, t3);
    t1.bindTexture$2(gl, 3553, this.texture);
    $.listTypeCheck(temporaryColor);
    $.listTypeCheck(temporaryColor);
    t1.texImage2D$9(gl, 3553, 0, 6408, 1, 1, 0, 6408, 5121, new Uint8Array(temporaryColor));
    t1.texParameteri$3(gl, 3553, 10240, 9728);
    t1.texParameteri$3(gl, 3553, 10241, 9728);
    t1.texParameteri$3(gl, 3553, 10242, 33071);
    t1.texParameteri$3(gl, 3553, 10243, 33071);
    t1.bindTexture$2(gl, 3553, null);
    t1 = $.getInterceptor$x(image);
    t3 = t1.get$onLoad(image);
    $.functionTypeCheck(t2);
    $.functionTypeCheck(null);
    $.functionTypeCheck(null);
    $.propertyTypeCheck($._EventStreamSubscription$(t3._target, t3._eventType, t2, t3._useCapture, $.getRuntimeTypeArgument(t3, t3.$as_EventStream, 0)), "$isStreamSubscription");
    t1.get$onError(image).listen$1(handleError);
    image.src = textureName;
  },
  forceCreateTexture$3: function(gl, textureTable, temporaryColor) {
    this.loadTexture2D$6(gl, $.interceptedTypeCheck(textureTable, "$isMap"), this.textureName, $.listTypeCheck(temporaryColor), new $.TextureInfo_forceCreateTexture_handleDone(this), new $.TextureInfo_forceCreateTexture_handleError(this));
  },
  TextureInfo$6: function(gl, textureTable, indexOffset, indexNumber, textureName, temporaryColor) {
    var t1;
    $.interceptedTypeCheck(gl, "$isRenderingContext");
    $.interceptedTypeCheck(textureTable, "$isMap");
    $.listTypeCheck(temporaryColor);
    t1 = this.textureName;
    this.texture = $.interceptedTypeCheck($.$index$asx(textureTable, t1), "$isTexture");
    if (this.texture != null) {
      $.print("TextureInfo: texture table HIT: " + t1);
      return;
    }
    this.forceCreateTexture$3(gl, textureTable, temporaryColor);
  },
  $isTextureInfo: true
};

$$.TextureInfo_loadTexture2D_onDone = {"": "Closure;this_0,gl_1,handleDone_2,image_3",
  call$1: function(e) {
    var t1, t2;
    $.interceptedTypeCheck(e, "$isEvent");
    t1 = this.gl_1;
    t2 = $.getInterceptor$x(t1);
    t2.bindTexture$2(t1, 3553, this.this_0.get$texture());
    t2.pixelStorei$2(t1, 37440, 1);
    t2.texImage2D$6(t1, 3553, 0, 6408, 6408, 5121, this.image_3);
    t2.texParameteri$3(t1, 3553, 10240, 9728);
    t2.texParameteri$3(t1, 3553, 10241, 9728);
    t2.texParameteri$3(t1, 3553, 10242, 33071);
    t2.texParameteri$3(t1, 3553, 10243, 33071);
    t2.bindTexture$2(t1, 3553, null);
    this.handleDone_2.call$1(e);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.TextureInfo_forceCreateTexture_handleDone = {"": "Closure;this_0",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.Primitives_printString("TextureInfo: handleDone: loaded image from URL: " + this.this_0.get$textureName());
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.TextureInfo_forceCreateTexture_handleError = {"": "Closure;this_1",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.Primitives_printString("TextureInfo: handleError: failure loading image from URL: " + this.this_1.get$textureName() + ": " + $.S(e));
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.initWebSocket_closure = {"": "Closure;box_0,wsUri_1,sid_2,status_3",
  call$1: function(e) {
    var msg, output, jsonMsg, t1;
    $.set$text$x(this.status_3, "connected to " + $.S(this.wsUri_1));
    $.Primitives_printString("websocket: CONNECTED");
    msg = $.HashMap$(null, null);
    msg.$indexSet(msg, "Code", 2);
    msg.$indexSet(msg, "Data", this.sid_2);
    output = $.StringBuffer$("");
    $._JsonStringifier$(output).stringifyValue$1(msg);
    jsonMsg = output._contents;
    t1 = this.box_0.w_1;
    $.Primitives_printString("websocket: sending: [" + jsonMsg + "]");
    $.send$1$x(t1, jsonMsg);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.initWebSocket_scheduleReconnect = {"": "Closure;box_0,wsUri_4,sid_5,status_6",
  call$0: function() {
    var t1, t2, t3, milliseconds;
    t1 = this.box_0;
    if (t1.reconnectScheduled_6)
      return;
    $.Primitives_printString("websocket: retrying in " + $.S(t1.retrySeconds_0) + " seconds");
    t2 = $.Duration$(0, 0, 0, 0, 0, t1.retrySeconds_0);
    t3 = new $.initWebSocket_scheduleReconnect_closure(t1, this.wsUri_4, this.sid_5, this.status_6);
    $.functionTypeCheck(t3);
    milliseconds = $.intTypeCheck(t2.get$inMilliseconds());
    if ($.$lt$n(milliseconds, 0))
      milliseconds = 0;
    $.TimerImpl$(milliseconds, t3);
    t1.reconnectScheduled_6 = true;
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.initWebSocket_scheduleReconnect_closure = {"": "Closure;box_0,wsUri_7,sid_8,status_9",
  call$0: function() {
    return $.initWebSocket(this.wsUri_7, this.sid_8, 2 * this.box_0.retrySeconds_0, this.status_9);
  },
  $isFunction: true,
  $asObject: null,
  $isVoidCallback: true
};

$$.initWebSocket_closure0 = {"": "Closure;wsUri_10,status_11,scheduleReconnect_12",
  call$1: function(e) {
    $.interceptedTypeCheck(e, "$isEvent");
    $.set$text$x(this.status_11, "disconnected from " + $.S(this.wsUri_10));
    $.Primitives_printString("websocket: DISCONNECTED");
    this.scheduleReconnect_12.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isEventListener: true
};

$$.initWebSocket_closure1 = {"": "Closure;scheduleReconnect_13",
  call$1: function(e) {
    $.Primitives_printString("websocket: error: [" + $.S($.interceptedTypeCheck(e, "$isEvent")) + "]");
    this.scheduleReconnect_13.call$0();
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isEventListener: true
};

$$.initWebSocket_closure2 = {"": "Closure;box_0,status_14",
  call$1: function(e) {
    var t1, msg, m, output, t2;
    $.interceptedTypeCheck(e, "$isMessageEvent");
    $.Primitives_printString("websocket: received: w.onMessage.listen");
    t1 = $.getInterceptor$x(e);
    $.Primitives_printString("websocket: received: [" + $.S(t1.get$data(e)) + "]");
    msg = $.interceptedTypeCheck($.parse(t1.get$data(e), null), "$isMap");
    t1 = $.getInterceptor$asx(msg);
    if ($.boolConversionCheck($.$eq(t1.$index(msg, "Code"), 1)) && $.startsWith$1$s(t1.$index(msg, "Data"), "welcome")) {
      m = $.HashMap$(null, null);
      m.$indexSet(m, "Code", 3);
      m.$indexSet(m, "Data", "hi there");
      t1 = this.box_0.w_1;
      output = $.StringBuffer$("");
      $._JsonStringifier$(output).stringifyValue$1(m);
      t2 = output._contents;
      $.Primitives_printString("websocket: sending: [" + t2 + "]");
      $.send$1$x(t1, t2);
      return;
    }
    if ($.boolConversionCheck($.$eq(t1.$index(msg, "Code"), 4))) {
      m = "server killed our session: " + $.S($.stringTypeCheck(t1.$index(msg, "Data")));
      $.Primitives_printString(m);
      $.set$text$x(this.status_14, m);
      t1 = this.box_0;
      t2 = t1.subOpen_2;
      t2.cancel$0(t2);
      t2 = t1.subClose_3;
      t2.cancel$0(t2);
      t2 = t1.subMessage_5;
      t2.cancel$0(t2);
      t2 = t1.subError_4;
      t2.cancel$0(t2);
      t1.w_1.close();
      t1.w_1 = null;
      return;
    }
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true,
  $isEventListener: true
};

$$.GameLoop = {"": "Object;",
  get$dt: function() {
    return this.updateTimeStep;
  },
  get$time: function() {
    return $.doubleTypeCheck($.GameLoop_timeStampToSeconds($.DateTime_DateTime$now().get$millisecondsSinceEpoch()));
  },
  processTimers$0: function() {
    var t1, _timersLength, i, t2, lastElement;
    t1 = this._timers;
    _timersLength = t1.length;
    for (i = 0; $.$lt$n(i, _timersLength); ++i) {
      if (i < 0 || i >= _timersLength)
        throw $.ioore(i);
      t1[i]._update$1(this.get$dt());
    }
    for (i = _timersLength - 1; $.$ge$n(i, 0); --i) {
      t2 = t1.length;
      lastElement = t2 - 1;
      if (i < 0 || i >= t2)
        throw $.ioore(i);
      if ($.boolConversionCheck(t1[i].get$_isDead())) {
        if (i !== lastElement) {
          if (lastElement < 0)
            throw $.ioore(lastElement);
          t1[i] = t1[lastElement];
        }
        if (0 >= t2)
          throw $.ioore(0);
        t1.pop();
      }
    }
  },
  onUpdate$1: function(arg0) {
    return this.onUpdate.call$1(arg0);
  },
  $isGameLoop: true
};

$$.DigitalButton = {"": "Object;buttonId,framePressed,frameReleased,timePressed,timeReleased",
  get$down: function() {
    return this.framePressed > this.frameReleased;
  },
  $isDigitalButton: true
};

$$.DigitalButtonEvent = {"": "Object;down,frame,buttonId,time",
  toString$0: function(_) {
    return "Button: " + $.S(this.buttonId) + " DOWN: " + this.down + " [" + $.S(this.frame) + "@" + $.S(this.time) + "]";
  }
};

$$.DigitalInput = {"": "Object;gameLoop<",
  digitalButtonEvent$1: function($event) {
    var t1, button;
    t1 = this.buttons;
    button = $.propertyTypeCheck(t1.$index(t1, $event.buttonId), "$isDigitalButton");
    if (button == null)
      return;
    if ($event.down) {
      if (!button.get$down()) {
        button.framePressed = $.intTypeCheck($event.frame);
        button.timePressed = $event.time;
      }
    } else {
      button.frameReleased = $.intTypeCheck($event.frame);
      button.timeReleased = $event.time;
    }
  },
  DigitalInput$2: function(gameLoop, buttonIds) {
    var t1, t2, buttonId;
    for (t1 = $.get$iterator$ax($.listTypeCheck(buttonIds)), t2 = this.buttons; $.boolConversionCheck(t1.moveNext$0());) {
      buttonId = $.intTypeCheck(t1.get$current());
      t2.$indexSet(t2, buttonId, $.DigitalButton$(buttonId));
    }
  },
  $isDigitalInput: true
};

$$.GameLoopTimer = {"": "Object;gameLoop<", $isGameLoopTimer: true};

$$.GameLoopGamepad = {"": "Object;gameLoop<,buttons,sticks", $isGameLoopGamepad: true};

$$.GameLoopHtml = {"": "GameLoop;element,_frameCounter,_initialized,_interrupt,_previousFrameTime,_frameTime,_resizePending,_nextResize,maxAccumulatedTime,_accumulatedTime,_gameTime,_renderInterpolationFactor,resizeLimit,_pointerLock,_keyboard,_mouse,_gamepad0,_touchSet,_touchEvents,_keyboardEvents,_mouseEvents,onRender,onResize,onFullscreenChange,onPointerLockChange,onTouchStart,onTouchEnd,updateTimeStep,lib6$GameLoop$maxAccumulatedTime,_timers,onUpdate",
  get$frame: function() {
    return $.intTypeCheck(this._frameCounter);
  },
  get$width: function(_) {
    return $.intTypeCheck($.get$client$x(this.element).width);
  },
  get$height: function(_) {
    return $.intTypeCheck($.get$client$x(this.element).height);
  },
  get$gameTime: function() {
    return $.doubleTypeCheck(this._gameTime);
  },
  get$renderInterpolationFactor: function() {
    return $.doubleTypeCheck(this._renderInterpolationFactor);
  },
  get$mouse: function() {
    return this._mouse;
  },
  _processInputEvents$0: function() {
    var t1, t2, keyboardEvent, t3, time, $event, canvasX, canvasY, t4, mouseEvent, t5, t6, mouseX, mouseY, x, t7, y, clampX, withinCanvas, clampY, touchEvent;
    for (t1 = this._keyboardEvents, t2 = $.JSArray_methods.get$iterator(t1); t2.moveNext$0();) {
      keyboardEvent = $.interceptedTypeCheck(t2.get$current(), "$isKeyboardEvent");
      t3 = keyboardEvent.type;
      time = $.doubleTypeCheck($.$div$n(keyboardEvent.timeStamp, 1000));
      $event = $.DigitalButtonEvent$($.get$keyCode$x(keyboardEvent), t3 === "keydown", this.get$frame(), time);
      this._keyboard.digitalButtonEvent$1($event);
    }
    $.JSArray_methods.clear$0(t1);
    t1 = this.get$mouse();
    t1._wheelDx = 0;
    t1._wheelDy = 0;
    t1._dx = 0;
    t1._dy = 0;
    t1 = this.element;
    t2 = $.getInterceptor$x(t1);
    canvasX = $.intTypeCheck(t2.get$offset(t1).left);
    canvasY = $.intTypeCheck(t2.get$offset(t1).top);
    for (t1 = this._mouseEvents, t2 = $.JSArray_methods.get$iterator(t1), t3 = $.getInterceptor$ns(canvasX), t4 = $.getInterceptor$ns(canvasY); t2.moveNext$0();) {
      mouseEvent = $.interceptedTypeCheck(t2.get$current(), "$isMouseEvent");
      t5 = $.getInterceptor$x(mouseEvent);
      t6 = mouseEvent.type;
      time = $.doubleTypeCheck($.$div$n(mouseEvent.timeStamp, 1000));
      if (t6 === "mousemove") {
        mouseX = $.intTypeCheck(t5.get$page(mouseEvent).x);
        mouseY = $.intTypeCheck(t5.get$page(mouseEvent).y);
        t6 = $.getInterceptor$n(mouseX);
        x = $.intTypeCheck(t6.$sub(mouseX, canvasX));
        t7 = $.getInterceptor$n(mouseY);
        y = $.intTypeCheck(t7.$sub(mouseY, canvasY));
        if (t6.$lt(mouseX, canvasX)) {
          clampX = 0;
          withinCanvas = false;
        } else if (t6.$gt(mouseX, t3.$add(canvasX, this.get$width(this)))) {
          clampX = $.intTypeCheck(this.get$width(this));
          withinCanvas = false;
        } else {
          clampX = x;
          withinCanvas = true;
        }
        if (t7.$lt(mouseY, canvasY)) {
          clampY = 0;
          withinCanvas = false;
        } else if (t7.$gt(mouseY, t4.$add(canvasY, this.get$height(this)))) {
          clampY = $.intTypeCheck(this.get$height(this));
          withinCanvas = false;
        } else
          clampY = y;
        $event = $.GameLoopMouseEvent$(x, y, $.intTypeCheck(t5.get$movement(mouseEvent).x), $.intTypeCheck(t5.get$movement(mouseEvent).y), clampX, clampY, withinCanvas, time, this.get$frame());
        this._mouse.gameLoopMouseEvent$1($event);
      } else {
        t5 = this._mouse;
        if (t6 === "mousewheel") {
          $.interceptedTypeCast(mouseEvent, "$isWheelEvent");
          t6 = $.getInterceptor$x(mouseEvent);
          t7 = t6.get$deltaX(mouseEvent);
          t6 = t6.get$deltaY(mouseEvent);
          $.intTypeCheck(t7);
          $.intTypeCheck(t6);
          t5._wheelDx = $.intTypeCheck(t5._wheelDx + t7);
          t5._wheelDy = $.intTypeCheck(t5._wheelDy + t6);
        } else
          t5.digitalButtonEvent$1($.DigitalButtonEvent$(mouseEvent.button, t6 === "mousedown", this.get$frame(), time));
      }
    }
    $.JSArray_methods.clear$0(t1);
    for (t1 = this._touchEvents, t2 = $.JSArray_methods.get$iterator(t1); t2.moveNext$0();) {
      touchEvent = $.propertyTypeCheck(t2.get$current(), "$is_GameLoopTouchEvent");
      switch (touchEvent.type) {
        case 3:
          this._touchSet._liblib2$_start$1(touchEvent.event);
          break;
        case 2:
          this._touchSet._end$1(touchEvent.event);
          break;
        case 1:
          this._touchSet._move$1(touchEvent.event);
          break;
        default:
          throw $.wrapException($.StateError$("Invalid _GameLoopTouchEven type."));
      }
    }
    $.JSArray_methods.clear$0(t1);
  },
  _requestAnimationFrame$1: function(_, _0) {
    var t1, t2, t3;
    $.numTypeCheck(_0);
    if (this._previousFrameTime == null) {
      this._frameTime = $.doubleTypeCheck(this.get$time());
      this._previousFrameTime = this._frameTime;
      this._processInputEvents$0();
      $.Window_methods.requestAnimationFrame$1(window, this.get$_requestAnimationFrame(this));
      return;
    }
    if (this._interrupt)
      return;
    $.Window_methods.requestAnimationFrame$1(window, this.get$_requestAnimationFrame(this));
    this._frameCounter = $.intTypeCheck(this._frameCounter + 1);
    this._previousFrameTime = this._frameTime;
    this._frameTime = $.doubleTypeCheck(this.get$time());
    t1 = this._frameTime;
    if (typeof t1 !== "number")
      return this._requestAnimationFrame$1$bailout(1, t1);
    t2 = this._previousFrameTime;
    if (typeof t2 !== "number")
      return this._requestAnimationFrame$1$bailout(2, t1, t2);
    this._accumulatedTime = $.doubleTypeCheck(this._accumulatedTime + (t1 - t2));
    t1 = this.maxAccumulatedTime;
    if (this._accumulatedTime > t1)
      this._accumulatedTime = t1;
    this._processInputEvents$0();
    for (t1 = this.updateTimeStep; this._accumulatedTime >= t1;) {
      this.processTimers$0();
      this._gameTime = $.doubleTypeCheck(this._gameTime + t1);
      if (this.onUpdate != null)
        this.onUpdate$1(this);
      this._accumulatedTime = $.doubleTypeCheck(this._accumulatedTime - t1);
    }
    if (this._resizePending)
      if (this.onResize != null) {
        t2 = this._nextResize;
        if (typeof t2 !== "number")
          return this._requestAnimationFrame$1$bailout(3, t1, t2);
        t3 = this._frameTime;
        if (typeof t3 !== "number")
          return this._requestAnimationFrame$1$bailout(4, t1, t2, t3);
        t3 = t2 <= t3;
        t2 = t3;
      } else
        t2 = false;
    else
      t2 = false;
    if (t2) {
      this.onResize$1(this, this);
      t2 = this._frameTime;
      if (typeof t2 !== "number")
        return this._requestAnimationFrame$1$bailout(5, t1, t2);
      this._nextResize = t2 + this.resizeLimit;
      this._resizePending = false;
    }
    if (this.onRender != null) {
      this._renderInterpolationFactor = $.doubleTypeCheck(this._accumulatedTime / t1);
      this.onRender$1(this);
    }
  },
  _requestAnimationFrame$1$bailout: function(state0, t1, t2, t3) {
    switch (state0) {
      case 0:
        $.numTypeCheck(_0);
        if (this._previousFrameTime == null) {
          this._frameTime = $.doubleTypeCheck(this.get$time());
          this._previousFrameTime = this._frameTime;
          this._processInputEvents$0();
          $.Window_methods.requestAnimationFrame$1(window, this.get$_requestAnimationFrame(this));
          return;
        }
        if (this._interrupt)
          return;
        $.Window_methods.requestAnimationFrame$1(window, this.get$_requestAnimationFrame(this));
        this._frameCounter = $.intTypeCheck(this._frameCounter + 1);
        this._previousFrameTime = this._frameTime;
        this._frameTime = $.doubleTypeCheck(this.get$time());
        t1 = this._frameTime;
      case 1:
        state0 = 0;
        t2 = this._previousFrameTime;
      case 2:
        state0 = 0;
        timeDelta = $.doubleTypeCheck($.$sub$n(t1, t2));
        t2 = this._accumulatedTime;
        if (typeof timeDelta !== "number")
          throw $.iae(timeDelta);
        this._accumulatedTime = $.doubleTypeCheck(t2 + timeDelta);
        t1 = this.maxAccumulatedTime;
        if (this._accumulatedTime > t1)
          this._accumulatedTime = t1;
        this._processInputEvents$0();
        for (t1 = this.updateTimeStep; this._accumulatedTime >= t1;) {
          this.processTimers$0();
          this._gameTime = $.doubleTypeCheck(this._gameTime + t1);
          if (this.onUpdate != null)
            this.onUpdate$1(this);
          this._accumulatedTime = $.doubleTypeCheck(this._accumulatedTime - t1);
        }
      default:
        if (state0 === 4 || state0 === 3 || state0 === 0 && this._resizePending)
          switch (state0) {
            case 0:
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && this.onResize != null)
                switch (state0) {
                  case 0:
                    t2 = this._nextResize;
                  case 3:
                    state0 = 0;
                    t3 = this._frameTime;
                  case 4:
                    state0 = 0;
                    t3 = $.$le$n(t2, t3);
                    t2 = t3;
                }
              else
                t2 = false;
          }
        else
          t2 = false;
      case 5:
        var timeDelta;
        if (state0 === 5 || state0 === 0 && t2)
          switch (state0) {
            case 0:
              this.onResize$1(this, this);
              t2 = this._frameTime;
            case 5:
              state0 = 0;
              this._nextResize = $.doubleTypeCheck($.$add$ns(t2, this.resizeLimit));
              this._resizePending = false;
          }
        if (this.onRender != null) {
          this._renderInterpolationFactor = $.doubleTypeCheck(this._accumulatedTime / t1);
          this.onRender$1(this);
        }
    }
  },
  get$_requestAnimationFrame: function(receiver) {
    return new $.Bound__requestAnimationFrame_GameLoopHtml(this, "_requestAnimationFrame$1", receiver);
  },
  _fullscreenChange$1: function(_) {
    $.interceptedTypeCheck(_, "$isEvent");
    if (this.onFullscreenChange == null)
      return;
    this.onFullscreenChange$1(this, this);
  },
  get$_fullscreenChange: function() {
    return new $.Bound__fullscreenChange_GameLoopHtml(this, "_fullscreenChange$1");
  },
  _fullscreenError$1: function(_) {
    $.interceptedTypeCheck(_, "$isEvent");
    if (this.onFullscreenChange == null)
      return;
    this.onFullscreenChange$1(this, this);
  },
  get$_fullscreenError: function() {
    return new $.Bound__fullscreenError_GameLoopHtml(this, "_fullscreenError$1");
  },
  _touchStartEvent$1: function($event) {
    $.JSArray_methods.add$1(this._touchEvents, $._GameLoopTouchEvent$($.interceptedTypeCheck($event, "$isTouchEvent"), 3));
  },
  get$_touchStartEvent: function() {
    return new $.Bound__touchStartEvent_GameLoopHtml(this, "_touchStartEvent$1");
  },
  _touchMoveEvent$1: function($event) {
    $.JSArray_methods.add$1(this._touchEvents, $._GameLoopTouchEvent$($.interceptedTypeCheck($event, "$isTouchEvent"), 1));
  },
  get$_touchMoveEvent: function() {
    return new $.Bound__touchMoveEvent_GameLoopHtml(this, "_touchMoveEvent$1");
  },
  _touchEndEvent$1: function($event) {
    $.JSArray_methods.add$1(this._touchEvents, $._GameLoopTouchEvent$($.interceptedTypeCheck($event, "$isTouchEvent"), 2));
  },
  get$_touchEndEvent: function() {
    return new $.Bound__touchEndEvent_GameLoopHtml(this, "_touchEndEvent$1");
  },
  _keyDown$1: function($event) {
    $.JSArray_methods.add$1(this._keyboardEvents, $.interceptedTypeCheck($event, "$isKeyboardEvent"));
  },
  get$_keyDown: function() {
    return new $.Bound__keyDown_GameLoopHtml(this, "_keyDown$1");
  },
  _keyUp$1: function($event) {
    $.JSArray_methods.add$1(this._keyboardEvents, $.interceptedTypeCheck($event, "$isKeyboardEvent"));
  },
  get$_keyUp: function() {
    return new $.Bound__keyUp_GameLoopHtml(this, "_keyUp$1");
  },
  _mouseDown$1: function($event) {
    $.JSArray_methods.add$1(this._mouseEvents, $.interceptedTypeCheck($event, "$isMouseEvent"));
  },
  get$_mouseDown: function() {
    return new $.Bound__mouseDown_GameLoopHtml(this, "_mouseDown$1");
  },
  _mouseUp$1: function($event) {
    $.JSArray_methods.add$1(this._mouseEvents, $.interceptedTypeCheck($event, "$isMouseEvent"));
  },
  get$_mouseUp: function() {
    return new $.Bound__mouseUp_GameLoopHtml(this, "_mouseUp$1");
  },
  _mouseMove$1: function($event) {
    $.JSArray_methods.add$1(this._mouseEvents, $.interceptedTypeCheck($event, "$isMouseEvent"));
  },
  get$_mouseMove: function() {
    return new $.Bound__mouseMove_GameLoopHtml(this, "_mouseMove$1");
  },
  _mouseWheel$1: function($event) {
    $.interceptedTypeCheck($event, "$isMouseEvent");
    $.JSArray_methods.add$1(this._mouseEvents, $event);
    $event.preventDefault();
  },
  get$_mouseWheel: function() {
    return new $.Bound__mouseWheel_GameLoopHtml(this, "_mouseWheel$1");
  },
  _resize$1: function(_) {
    $.interceptedTypeCheck(_, "$isEvent");
    if (!this._resizePending)
      this._resizePending = true;
  },
  get$_resize: function() {
    return new $.Bound__resize_GameLoopHtml(this, "_resize$1");
  },
  start$0: function(_) {
    var t1, t2;
    if (!this._initialized) {
      t1 = $.HtmlDocument_methods.get$onFullscreenError(document);
      t2 = this.get$_fullscreenError();
      $.functionTypeCheck(t2);
      $.functionTypeCheck(null);
      $.functionTypeCheck(null);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.HtmlDocument_methods.get$onFullscreenChange(document);
      t2 = this.get$_fullscreenChange();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.Window_methods.get$onTouchStart(window);
      t2 = this.get$_touchStartEvent();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.Window_methods.get$onTouchEnd(window);
      t2 = this.get$_touchEndEvent();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.Window_methods.get$onTouchMove(window);
      t2 = this.get$_touchMoveEvent();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.Window_methods.get$onKeyDown(window);
      t2 = this.get$_keyDown();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.Window_methods.get$onKeyUp(window);
      t2 = this.get$_keyUp();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.Window_methods.get$onResize(window);
      t2 = this.get$_resize();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.Window_methods.get$onMouseMove(window);
      t2 = this.get$_mouseMove();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.Window_methods.get$onMouseDown(window);
      t2 = this.get$_mouseDown();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.Window_methods.get$onMouseUp(window);
      t2 = this.get$_mouseUp();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      t1 = $.Window_methods.get$onMouseWheel(window);
      t2 = this.get$_mouseWheel();
      $.functionTypeCheck(t2);
      $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
      this._initialized = true;
    }
    this._interrupt = false;
    $.Window_methods.requestAnimationFrame$1(window, this.get$_requestAnimationFrame(this));
  },
  onRender$1: function(arg0) {
    return this.onRender.call$1(arg0);
  },
  onResize$1: function($receiver, arg0) {
    return this.onResize.call$1(arg0);
  },
  onFullscreenChange$1: function($receiver, arg0) {
    return this.onFullscreenChange.call$1(arg0);
  },
  onPointerLockChange$1: function($receiver, arg0) {
    return this.onPointerLockChange.call$1(arg0);
  },
  onTouchStart$2: function($receiver, arg0, arg1) {
    return this.onTouchStart.call$2(arg0, arg1);
  },
  onTouchEnd$2: function($receiver, arg0, arg1) {
    return this.onTouchEnd.call$2(arg0, arg1);
  },
  GameLoopHtml$1: function(element) {
    this._keyboard = $.Keyboard$(this);
    this._mouse = $.Mouse$(this);
    this._gamepad0 = $.GameLoopGamepad$(this);
    this._pointerLock = $.PointerLock$(this);
    this._touchSet = $.GameLoopTouchSet$(this);
  },
  $isGameLoopHtml: true
};

$$.Keyboard = {"": "DigitalInput;gameLoop,buttons", $isKeyboard: true};

$$.GameLoopMouseEvent = {"": "Object;x,y,dx,dy,clampX,clampY,time,withinCanvas,frame"};

$$.Mouse = {"": "DigitalInput;_dx,_dy,_x,_y,_clampX,_clampY,_wheelDx,_wheelDy,_withinCanvas,_time,_frame,gameLoop,buttons",
  gameLoopMouseEvent$1: function($event) {
    var t1, t2;
    this._x = $event.x;
    this._y = $event.y;
    this._time = $event.time;
    this._frame = $.intTypeCheck($event.frame);
    t1 = this._dx;
    t2 = $event.dx;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this._dx = $.intTypeCheck(t1 + t2);
    t2 = this._dy;
    t1 = $event.dy;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this._dy = $.intTypeCheck(t2 + t1);
    this._clampX = $event.clampX;
    this._clampY = $event.clampY;
    this._withinCanvas = $event.withinCanvas;
  },
  $isMouse: true,
  $asObject: null
};

$$.PointerLock = {"": "Object;gameLoop<,lockOnClick",
  _onClick$1: function($event) {
    $.interceptedTypeCheck($event, "$isEvent");
    if (this.lockOnClick)
      this.gameLoop.element.webkitRequestPointerLock();
  },
  get$_onClick: function() {
    return new $.Bound__onClick_PointerLock(this, "_onClick$1");
  },
  _onPointerLockChange$1: function($event) {
    var t1;
    $.interceptedTypeCheck($event, "$isEvent");
    t1 = this.gameLoop;
    if (t1.onPointerLockChange != null)
      t1.onPointerLockChange$1(t1, t1);
  },
  get$_onPointerLockChange: function() {
    return new $.Bound__onPointerLockChange_PointerLock(this, "_onPointerLockChange$1");
  },
  PointerLock$1: function(gameLoop) {
    $.get$onClick$x(this.gameLoop.element).listen$1(this.get$_onClick());
    $.HtmlDocument_methods.get$onPointerLockChange($.document()).listen$1(this.get$_onPointerLockChange());
  },
  $isPointerLock: true
};

$$._GameLoopTouchEvent = {"": "Object;event,type", $is_GameLoopTouchEvent: true};

$$.GameLoopTouchPosition = {"": "Object;x,y,dx,dy,time,frame", $isGameLoopTouchPosition: true, $asObject: null};

$$.GameLoopTouch = {"": "Object;id>,positions<", $isGameLoopTouch: true};

$$.GameLoopTouchSet = {"": "Object;activeTouches<,gameLoop<",
  _liblib2$_start$1: function($event) {
    $.forEach$1$ax($.interceptedTypeCheck($event, "$isTouchEvent").changedTouches, new $.GameLoopTouchSet__start_closure(this));
  },
  _end$1: function($event) {
    $.forEach$1$ax($.interceptedTypeCheck($event, "$isTouchEvent").changedTouches, new $.GameLoopTouchSet__end_closure(this));
  },
  _move$1: function($event) {
    $.forEach$1$ax($.interceptedTypeCheck($event, "$isTouchEvent").changedTouches, new $.GameLoopTouchSet__move_closure(this));
  },
  $isGameLoopTouchSet: true
};

$$.GameLoopTouchSet__start_closure = {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, glTouch, t3, t4;
    $.interceptedTypeCheck(touch, "$isTouch");
    t1 = $.getInterceptor$x(touch);
    t2 = touch.identifier;
    glTouch = $.GameLoopTouch$(t2);
    t3 = this.this_0;
    t4 = t3.get$activeTouches();
    t4.$indexSet(t4, t2, glTouch);
    t2 = t1.get$client(touch);
    t1 = t1.get$client(touch);
    t4 = t3.get$gameLoop();
    $.JSArray_methods.add$1(glTouch.positions, $.GameLoopTouchPosition$(t2.x, t1.y, 0, 0, t4.get$gameTime(), t4.get$frame()));
    t1 = t3.get$gameLoop();
    if (t1.onTouchStart != null)
      t1.onTouchStart$2(t1, t1, glTouch);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.GameLoopTouchSet__end_closure = {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, t3, glTouch, t4, position;
    $.interceptedTypeCheck(touch, "$isTouch");
    t1 = this.this_0;
    t2 = t1.get$activeTouches();
    t3 = $.getInterceptor$x(touch);
    glTouch = t2.$index(t2, touch.identifier);
    t2 = t1.get$activeTouches();
    t2.remove$1(t2, touch.identifier);
    $.propertyTypeCheck(glTouch, "$isGameLoopTouch");
    t2 = t3.get$client(touch);
    t3 = t3.get$client(touch);
    t4 = t1.get$gameLoop();
    position = $.GameLoopTouchPosition$(t2.x, t3.y, 0, 0, t4.get$gameTime(), t4.get$frame());
    $.JSArray_methods.add$1(glTouch.get$positions(), position);
    t1 = t1.get$gameLoop();
    if (t1.onTouchEnd != null)
      t1.onTouchEnd$2(t1, t1, glTouch);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.GameLoopTouchSet__move_closure = {"": "Closure;this_0",
  call$1: function(touch) {
    var t1, t2, t3, glTouch, position;
    $.interceptedTypeCheck(touch, "$isTouch");
    t1 = this.this_0;
    t2 = t1.get$activeTouches();
    t3 = $.getInterceptor$x(touch);
    glTouch = t2.$index(t2, touch.identifier);
    $.propertyTypeCheck(glTouch, "$isGameLoopTouch");
    t2 = t3.get$client(touch);
    t3 = t3.get$client(touch);
    t1 = t1.get$gameLoop();
    position = $.GameLoopTouchPosition$(t2.x, t3.y, 0, 0, t1.get$gameTime(), t1.get$frame());
    $.JSArray_methods.add$1(glTouch.get$positions(), position);
  },
  $isFunction: true,
  $asObject: null,
  $is_FutureOnError: true,
  $is_FutureErrorTest: true
};

$$.Stats = {"": "Object;_timer,_ms,_msMin,_msMax,_fps,_fpsMin,_fpsMax,_frames,_mode,container,fpsDiv,msDiv,msText,msGraph,fpsGraph,fpsText",
  _onContainerMouseDown$1: function(e) {
    var t1;
    $.interceptedTypeCheck(e, "$isMouseEvent").preventDefault();
    t1 = $.$add$ns(this.get$mode(this), 1);
    this.set$mode(this, t1);
    this.set$mode(this, $.$mod$n(t1, 2));
  },
  get$_onContainerMouseDown: function() {
    return new $.Bound__onContainerMouseDown_Stats(this, "_onContainerMouseDown$1");
  },
  _createUi$0: function() {
    var t1, t2, t3, bar;
    t1 = $.HtmlDocument_methods.$$dom_createElement$1(document, "div");
    t2 = $.getInterceptor$x(t1);
    t2.set$id(t1, "stats");
    t2 = t2.get$onMouseDown(t1);
    t3 = this.get$_onContainerMouseDown();
    $.functionTypeCheck(t3);
    $.functionTypeCheck(null);
    $.functionTypeCheck(null);
    $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t3, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
    t1.style.cssText = "width:80px;opacity:0.9;cursor:pointer";
    this.container = $.interceptedTypeCheck(t1, "$isDivElement");
    t1 = $.HtmlDocument_methods.$$dom_createElement$1(document, "div");
    $.set$id$x(t1, "fps");
    t1.style.cssText = "padding:0 0 3px 3px;text-align:left;background-color:#002";
    this.fpsDiv = $.interceptedTypeCheck(t1, "$isDivElement");
    $.append$1$x(this.container, this.fpsDiv);
    t1 = $.HtmlDocument_methods.$$dom_createElement$1(document, "div");
    $.set$id$x(t1, "fpsText");
    t1.style.cssText = "color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
    t1.textContent = "FPS";
    this.fpsText = $.interceptedTypeCheck(t1, "$isDivElement");
    $.append$1$x(this.fpsDiv, this.fpsText);
    t1 = $.HtmlDocument_methods.$$dom_createElement$1(document, "div");
    $.set$id$x(t1, "fpsGraph");
    t1.style.cssText = "position:relative;width:74px;height:30px;background-color:#0ff";
    this.fpsGraph = $.interceptedTypeCheck(t1, "$isDivElement");
    $.append$1$x(this.fpsDiv, this.fpsGraph);
    for (; t1 = $.get$children$x(this.fpsGraph), t1.get$length(t1) < 74;) {
      bar = $.HtmlDocument_methods.$$dom_createElement$1(document, "span");
      bar.style.cssText = "width:1px;height:30px;float:left;background-color:#113";
      $.interceptedTypeCheck(bar, "$isSpanElement");
      $.append$1$x(this.fpsGraph, bar);
    }
    t1 = $.HtmlDocument_methods.$$dom_createElement$1(document, "div");
    $.set$id$x(t1, "ms");
    t1.style.cssText = "padding:0 0 3px 3px;text-align:left;background-color:#020;display:none";
    this.msDiv = $.interceptedTypeCheck(t1, "$isDivElement");
    $.append$1$x(this.container, this.msDiv);
    t1 = $.HtmlDocument_methods.$$dom_createElement$1(document, "div");
    $.set$id$x(t1, "msText");
    t1.style.cssText = "color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px";
    t1.textContent = "MS";
    this.msText = $.interceptedTypeCheck(t1, "$isDivElement");
    $.append$1$x(this.msDiv, this.msText);
    t1 = $.HtmlDocument_methods.$$dom_createElement$1(document, "div");
    $.set$id$x(t1, "msGraph");
    t1.style.cssText = "position:relative;width:74px;height:30px;background-color:#0f0";
    this.msGraph = $.interceptedTypeCheck(t1, "$isDivElement");
    $.append$1$x(this.msDiv, this.msGraph);
    for (; t1 = $.get$children$x(this.msGraph), t1.get$length(t1) < 74;) {
      bar = $.HtmlDocument_methods.$$dom_createElement$1(document, "span");
      bar.style.cssText = "width:1px;height:30px;float:left;background-color:#131";
      $.interceptedTypeCheck(bar, "$isSpanElement");
      $.append$1$x(this.msGraph, bar);
    }
  },
  set$mode: function(_, value) {
    var t1;
    $.intTypeCheck(value);
    t1 = this._mode;
    if (t1 == null ? value != null : t1 !== value) {
      this._mode = value;
      switch (this.get$mode(this)) {
        case 0:
          $.set$display$x(this.fpsDiv.style, "block");
          $.set$display$x(this.msDiv.style, "none");
          break;
        case 1:
          $.set$display$x(this.fpsDiv.style, "none");
          $.set$display$x(this.msDiv.style, "block");
          break;
      }
    }
  },
  get$mode: function(_) {
    return this._mode;
  },
  end$0: function(_) {
    var t1, time, t2, t3, t4, t5, first;
    t1 = this._timer;
    time = t1.get$elapsedMilliseconds();
    $.intTypeCheck(time);
    if (time !== (time | 0))
      return this.end$0$bailout(1, t1, time);
    this._ms = $.intTypeCheck(t1.get$elapsedMilliseconds());
    this._msMin = $.intTypeCheck($.min(this._msMin, this._ms));
    this._msMax = $.intTypeCheck($.max(this._msMax, this._ms));
    this.msText.textContent = $.S(this._ms) + " MS (" + $.S(this._msMin) + " - " + $.S(this._msMax) + ")";
    t2 = this.msGraph;
    t3 = $.min(30, 30 - this._ms / 200 * 30);
    t4 = $.getInterceptor$x(t2);
    t5 = t4.get$children(t2);
    first = t5.get$first(t5);
    t2 = t4.get$children(t2);
    t2.add$1(t2, first);
    $.set$height$x(first.style, $.S($.JSNumber_methods.toInt$0(t3)) + "px");
    this._frames = $.intTypeCheck(this._frames + 1);
    if (time > 1000) {
      this._fps = $.intTypeCheck($.JSNumber_methods.toInt$0($.JSDouble_methods.round$0(this._frames * 1000 / this._ms)));
      this._fpsMin = $.intTypeCheck($.min(this._fpsMin, this._fps));
      this._fpsMax = $.intTypeCheck($.max(this._fpsMax, this._fps));
      this.fpsText.textContent = $.S(this._fps) + " FPS (" + $.S(this._fpsMin) + " - " + $.S(this._fpsMax) + ")";
      t2 = this.fpsGraph;
      t3 = $.min(30, 30 - this._fps / 100 * 30);
      t4 = $.getInterceptor$x(t2);
      t5 = t4.get$children(t2);
      first = t5.get$first(t5);
      t2 = t4.get$children(t2);
      t2.add$1(t2, first);
      $.set$height$x(first.style, $.S($.JSNumber_methods.toInt$0(t3)) + "px");
      t1.reset$0(t1);
      this._frames = 0;
    }
    return time;
  },
  end$0$bailout: function(state0, t1, time) {
    var t2, t3, t4, t5, first;
    this._ms = $.intTypeCheck(t1.get$elapsedMilliseconds());
    this._msMin = $.intTypeCheck($.min(this._msMin, this._ms));
    this._msMax = $.intTypeCheck($.max(this._msMax, this._ms));
    this.msText.textContent = $.S(this._ms) + " MS (" + $.S(this._msMin) + " - " + $.S(this._msMax) + ")";
    t2 = this.msGraph;
    t3 = $.min(30, 30 - this._ms / 200 * 30);
    t4 = $.getInterceptor$x(t2);
    t5 = t4.get$children(t2);
    first = t5.get$first(t5);
    t2 = t4.get$children(t2);
    t2.add$1(t2, first);
    $.set$height$x(first.style, $.S($.JSNumber_methods.toInt$0(t3)) + "px");
    this._frames = $.intTypeCheck(this._frames + 1);
    if ($.$gt$n(time, 1000)) {
      this._fps = $.intTypeCheck($.JSNumber_methods.toInt$0($.JSDouble_methods.round$0(this._frames * 1000 / this._ms)));
      this._fpsMin = $.intTypeCheck($.min(this._fpsMin, this._fps));
      this._fpsMax = $.intTypeCheck($.max(this._fpsMax, this._fps));
      this.fpsText.textContent = $.S(this._fps) + " FPS (" + $.S(this._fpsMin) + " - " + $.S(this._fpsMax) + ")";
      t2 = this.fpsGraph;
      t3 = $.min(30, 30 - this._fps / 100 * 30);
      t4 = $.getInterceptor$x(t2);
      t5 = t4.get$children(t2);
      first = t5.get$first(t5);
      t2 = t4.get$children(t2);
      t2.add$1(t2, first);
      $.set$height$x(first.style, $.S($.JSNumber_methods.toInt$0(t3)) + "px");
      t1.reset$0(t1);
      this._frames = 0;
    }
    return time;
  },
  Stats$0: function() {
    this._createUi$0();
  }
};

$$.mat4 = {"": "Object;storage",
  toString$0: function(_) {
    return "[0] " + $.S(this.getRow$1(0)) + "\n[1] " + $.S(this.getRow$1(1)) + "\n[2] " + $.S(this.getRow$1(2)) + "\n[3] " + $.S(this.getRow$1(3)) + "\n";
  },
  $index: function(_, i) {
    var t1;
    $.intTypeCheck(i);
    t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return $.doubleTypeCheck(t1[i]);
  },
  $indexSet: function(_, i, v) {
    var t1;
    $.intTypeCheck(i);
    $.doubleTypeCheck(v);
    t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var r, t1, t2, t3, t4, t5;
    r = $.vec4$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    t4 = t2.length;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    t5 = t1.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3;
    t3 = 4 + row;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t3;
    t3 = 8 + row;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (2 >= t5)
      throw $.ioore(2);
    t1[2] = t3;
    t3 = 12 + row;
    if (t3 < 0 || t3 >= t4)
      throw $.ioore(t3);
    t3 = t2[t3];
    if (3 >= t5)
      throw $.ioore(3);
    t1[3] = t3;
    return r;
  },
  _mul_matrix$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14;
    $.propertyTypeCheck(arg, "$ismat4");
    r = $.mat4$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (4 >= t3)
      throw $.ioore(4);
    t8 = t2[4];
    if (1 >= t6)
      throw $.ioore(1);
    t9 = t5[1];
    if (8 >= t3)
      throw $.ioore(8);
    t10 = t2[8];
    if (2 >= t6)
      throw $.ioore(2);
    t11 = t5[2];
    if (12 >= t3)
      throw $.ioore(12);
    t12 = t2[12];
    if (3 >= t6)
      throw $.ioore(3);
    t13 = t5[3];
    t14 = t1.length;
    if (0 >= t14)
      throw $.ioore(0);
    t1[0] = t4 * t7 + t8 * t9 + t10 * t11 + t12 * t13;
    t13 = t2[0];
    if (4 >= t6)
      throw $.ioore(4);
    t12 = t5[4];
    t11 = t2[4];
    if (5 >= t6)
      throw $.ioore(5);
    t10 = t5[5];
    t9 = t2[8];
    if (6 >= t6)
      throw $.ioore(6);
    t8 = t5[6];
    t7 = t2[12];
    if (7 >= t6)
      throw $.ioore(7);
    t4 = t5[7];
    if (4 >= t14)
      throw $.ioore(4);
    t1[4] = t13 * t12 + t11 * t10 + t9 * t8 + t7 * t4;
    t4 = t2[0];
    if (8 >= t6)
      throw $.ioore(8);
    t7 = t5[8];
    t8 = t2[4];
    if (9 >= t6)
      throw $.ioore(9);
    t9 = t5[9];
    t10 = t2[8];
    if (10 >= t6)
      throw $.ioore(10);
    t11 = t5[10];
    t12 = t2[12];
    if (11 >= t6)
      throw $.ioore(11);
    t13 = t5[11];
    if (8 >= t14)
      throw $.ioore(8);
    t1[8] = t4 * t7 + t8 * t9 + t10 * t11 + t12 * t13;
    t13 = t2[0];
    if (12 >= t6)
      throw $.ioore(12);
    t12 = t5[12];
    t11 = t2[4];
    if (13 >= t6)
      throw $.ioore(13);
    t10 = t5[13];
    t9 = t2[8];
    if (14 >= t6)
      throw $.ioore(14);
    t8 = t5[14];
    t7 = t2[12];
    if (15 >= t6)
      throw $.ioore(15);
    t6 = t5[15];
    if (12 >= t14)
      throw $.ioore(12);
    t1[12] = t13 * t12 + t11 * t10 + t9 * t8 + t7 * t6;
    t6 = t2[1];
    t7 = t5[0];
    t8 = t2[5];
    t9 = t5[1];
    t10 = t2[9];
    t11 = t5[2];
    if (13 >= t3)
      throw $.ioore(13);
    t1[1] = t6 * t7 + t8 * t9 + t10 * t11 + t2[13] * t5[3];
    t1[5] = t2[1] * t5[4] + t2[5] * t5[5] + t2[9] * t5[6] + t2[13] * t5[7];
    t1[9] = t2[1] * t5[8] + t2[5] * t5[9] + t2[9] * t5[10] + t2[13] * t5[11];
    t11 = t2[1];
    t10 = t5[12];
    t9 = t2[5];
    t8 = t5[13];
    t7 = t2[9];
    t6 = t5[14];
    t12 = t2[13];
    t13 = t5[15];
    if (13 >= t14)
      throw $.ioore(13);
    t1[13] = t11 * t10 + t9 * t8 + t7 * t6 + t12 * t13;
    t13 = t2[2];
    t12 = t5[0];
    t6 = t2[6];
    t7 = t5[1];
    t8 = t2[10];
    t9 = t5[2];
    if (14 >= t3)
      throw $.ioore(14);
    t1[2] = t13 * t12 + t6 * t7 + t8 * t9 + t2[14] * t5[3];
    t1[6] = t2[2] * t5[4] + t2[6] * t5[5] + t2[10] * t5[6] + t2[14] * t5[7];
    t1[10] = t2[2] * t5[8] + t2[6] * t5[9] + t2[10] * t5[10] + t2[14] * t5[11];
    t9 = t2[2];
    t8 = t5[12];
    t7 = t2[6];
    t6 = t5[13];
    t12 = t2[10];
    t13 = t5[14];
    t10 = t2[14];
    t11 = t5[15];
    if (14 >= t14)
      throw $.ioore(14);
    t1[14] = t9 * t8 + t7 * t6 + t12 * t13 + t10 * t11;
    t11 = t2[3];
    t10 = t5[0];
    t13 = t2[7];
    t12 = t5[1];
    t6 = t2[11];
    t7 = t5[2];
    if (15 >= t3)
      throw $.ioore(15);
    t1[3] = t11 * t10 + t13 * t12 + t6 * t7 + t2[15] * t5[3];
    t1[7] = t2[3] * t5[4] + t2[7] * t5[5] + t2[11] * t5[6] + t2[15] * t5[7];
    t1[11] = t2[3] * t5[8] + t2[7] * t5[9] + t2[11] * t5[10] + t2[15] * t5[11];
    t7 = t2[3];
    t6 = t5[12];
    t12 = t2[7];
    t13 = t5[13];
    t10 = t2[11];
    t11 = t5[14];
    t2 = t2[15];
    t5 = t5[15];
    if (15 >= t14)
      throw $.ioore(15);
    t1[15] = t7 * t6 + t12 * t13 + t10 * t11 + t2 * t5;
    return r;
  },
  _mul_vector3$1: function(arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
    r = $.vec3$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    if (4 >= t3)
      throw $.ioore(4);
    t8 = t2[4];
    if (1 >= t6)
      throw $.ioore(1);
    t9 = t5[1];
    if (8 >= t3)
      throw $.ioore(8);
    t10 = t2[8];
    if (2 >= t6)
      throw $.ioore(2);
    t6 = t5[2];
    if (12 >= t3)
      throw $.ioore(12);
    t11 = t2[12];
    t12 = t1.length;
    if (0 >= t12)
      throw $.ioore(0);
    t1[0] = t4 * t7 + t8 * t9 + t10 * t6 + t11;
    t11 = t2[1];
    t6 = t5[0];
    t10 = t2[5];
    t9 = t5[1];
    t8 = t2[9];
    t7 = t5[2];
    if (13 >= t3)
      throw $.ioore(13);
    t4 = t2[13];
    if (1 >= t12)
      throw $.ioore(1);
    t1[1] = t11 * t6 + t10 * t9 + t8 * t7 + t4;
    t4 = t2[2];
    t7 = t5[0];
    t8 = t2[6];
    t9 = t5[1];
    t10 = t2[10];
    t5 = t5[2];
    if (14 >= t3)
      throw $.ioore(14);
    t2 = t2[14];
    if (2 >= t12)
      throw $.ioore(2);
    t1[2] = t4 * t7 + t8 * t9 + t10 * t5 + t2;
    return r;
  },
  $mul: function(_, arg) {
    return this._mul_vector3$1(arg);
    if (4 === arg.get$dimension())
      return this._mul_matrix$1(arg);
    throw $.wrapException($.ArgumentError$(arg));
  },
  $add: function(_, arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8;
    $.propertyTypeCheck(arg, "$ismat4");
    r = $.mat4$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    t8 = t1.length;
    if (0 >= t8)
      throw $.ioore(0);
    t1[0] = t4 + t7;
    if (1 >= t3)
      throw $.ioore(1);
    t7 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t4 = t5[1];
    if (1 >= t8)
      throw $.ioore(1);
    t1[1] = t7 + t4;
    if (2 >= t3)
      throw $.ioore(2);
    t4 = t2[2];
    if (2 >= t6)
      throw $.ioore(2);
    t7 = t5[2];
    if (2 >= t8)
      throw $.ioore(2);
    t1[2] = t4 + t7;
    if (3 >= t3)
      throw $.ioore(3);
    t7 = t2[3];
    if (3 >= t6)
      throw $.ioore(3);
    t4 = t5[3];
    if (3 >= t8)
      throw $.ioore(3);
    t1[3] = t7 + t4;
    if (4 >= t3)
      throw $.ioore(4);
    t4 = t2[4];
    if (4 >= t6)
      throw $.ioore(4);
    t7 = t5[4];
    if (4 >= t8)
      throw $.ioore(4);
    t1[4] = t4 + t7;
    if (5 >= t3)
      throw $.ioore(5);
    t7 = t2[5];
    if (5 >= t6)
      throw $.ioore(5);
    t4 = t5[5];
    if (5 >= t8)
      throw $.ioore(5);
    t1[5] = t7 + t4;
    if (6 >= t3)
      throw $.ioore(6);
    t4 = t2[6];
    if (6 >= t6)
      throw $.ioore(6);
    t7 = t5[6];
    if (6 >= t8)
      throw $.ioore(6);
    t1[6] = t4 + t7;
    if (7 >= t3)
      throw $.ioore(7);
    t7 = t2[7];
    if (7 >= t6)
      throw $.ioore(7);
    t4 = t5[7];
    if (7 >= t8)
      throw $.ioore(7);
    t1[7] = t7 + t4;
    if (8 >= t3)
      throw $.ioore(8);
    t4 = t2[8];
    if (8 >= t6)
      throw $.ioore(8);
    t7 = t5[8];
    if (8 >= t8)
      throw $.ioore(8);
    t1[8] = t4 + t7;
    if (9 >= t3)
      throw $.ioore(9);
    t7 = t2[9];
    if (9 >= t6)
      throw $.ioore(9);
    t4 = t5[9];
    if (9 >= t8)
      throw $.ioore(9);
    t1[9] = t7 + t4;
    if (10 >= t3)
      throw $.ioore(10);
    t4 = t2[10];
    if (10 >= t6)
      throw $.ioore(10);
    t7 = t5[10];
    if (10 >= t8)
      throw $.ioore(10);
    t1[10] = t4 + t7;
    if (11 >= t3)
      throw $.ioore(11);
    t7 = t2[11];
    if (11 >= t6)
      throw $.ioore(11);
    t4 = t5[11];
    if (11 >= t8)
      throw $.ioore(11);
    t1[11] = t7 + t4;
    if (12 >= t3)
      throw $.ioore(12);
    t4 = t2[12];
    if (12 >= t6)
      throw $.ioore(12);
    t7 = t5[12];
    if (12 >= t8)
      throw $.ioore(12);
    t1[12] = t4 + t7;
    if (13 >= t3)
      throw $.ioore(13);
    t7 = t2[13];
    if (13 >= t6)
      throw $.ioore(13);
    t4 = t5[13];
    if (13 >= t8)
      throw $.ioore(13);
    t1[13] = t7 + t4;
    if (14 >= t3)
      throw $.ioore(14);
    t4 = t2[14];
    if (14 >= t6)
      throw $.ioore(14);
    t7 = t5[14];
    if (14 >= t8)
      throw $.ioore(14);
    t1[14] = t4 + t7;
    if (15 >= t3)
      throw $.ioore(15);
    t2 = t2[15];
    if (15 >= t6)
      throw $.ioore(15);
    t5 = t5[15];
    if (15 >= t8)
      throw $.ioore(15);
    t1[15] = t2 + t5;
    return r;
  },
  $sub: function(_, arg) {
    var r, t1, t2, t3, t4, t5, t6, t7, t8;
    $.propertyTypeCheck(arg, "$ismat4");
    r = $.mat4$zero();
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2.length;
    if (0 >= t3)
      throw $.ioore(0);
    t4 = t2[0];
    t5 = arg.storage;
    t6 = t5.length;
    if (0 >= t6)
      throw $.ioore(0);
    t7 = t5[0];
    t8 = t1.length;
    if (0 >= t8)
      throw $.ioore(0);
    t1[0] = t4 - t7;
    if (1 >= t3)
      throw $.ioore(1);
    t7 = t2[1];
    if (1 >= t6)
      throw $.ioore(1);
    t4 = t5[1];
    if (1 >= t8)
      throw $.ioore(1);
    t1[1] = t7 - t4;
    if (2 >= t3)
      throw $.ioore(2);
    t4 = t2[2];
    if (2 >= t6)
      throw $.ioore(2);
    t7 = t5[2];
    if (2 >= t8)
      throw $.ioore(2);
    t1[2] = t4 - t7;
    if (3 >= t3)
      throw $.ioore(3);
    t7 = t2[3];
    if (3 >= t6)
      throw $.ioore(3);
    t4 = t5[3];
    if (3 >= t8)
      throw $.ioore(3);
    t1[3] = t7 - t4;
    if (4 >= t3)
      throw $.ioore(4);
    t4 = t2[4];
    if (4 >= t6)
      throw $.ioore(4);
    t7 = t5[4];
    if (4 >= t8)
      throw $.ioore(4);
    t1[4] = t4 - t7;
    if (5 >= t3)
      throw $.ioore(5);
    t7 = t2[5];
    if (5 >= t6)
      throw $.ioore(5);
    t4 = t5[5];
    if (5 >= t8)
      throw $.ioore(5);
    t1[5] = t7 - t4;
    if (6 >= t3)
      throw $.ioore(6);
    t4 = t2[6];
    if (6 >= t6)
      throw $.ioore(6);
    t7 = t5[6];
    if (6 >= t8)
      throw $.ioore(6);
    t1[6] = t4 - t7;
    if (7 >= t3)
      throw $.ioore(7);
    t7 = t2[7];
    if (7 >= t6)
      throw $.ioore(7);
    t4 = t5[7];
    if (7 >= t8)
      throw $.ioore(7);
    t1[7] = t7 - t4;
    if (8 >= t3)
      throw $.ioore(8);
    t4 = t2[8];
    if (8 >= t6)
      throw $.ioore(8);
    t7 = t5[8];
    if (8 >= t8)
      throw $.ioore(8);
    t1[8] = t4 - t7;
    if (9 >= t3)
      throw $.ioore(9);
    t7 = t2[9];
    if (9 >= t6)
      throw $.ioore(9);
    t4 = t5[9];
    if (9 >= t8)
      throw $.ioore(9);
    t1[9] = t7 - t4;
    if (10 >= t3)
      throw $.ioore(10);
    t4 = t2[10];
    if (10 >= t6)
      throw $.ioore(10);
    t7 = t5[10];
    if (10 >= t8)
      throw $.ioore(10);
    t1[10] = t4 - t7;
    if (11 >= t3)
      throw $.ioore(11);
    t7 = t2[11];
    if (11 >= t6)
      throw $.ioore(11);
    t4 = t5[11];
    if (11 >= t8)
      throw $.ioore(11);
    t1[11] = t7 - t4;
    if (12 >= t3)
      throw $.ioore(12);
    t4 = t2[12];
    if (12 >= t6)
      throw $.ioore(12);
    t7 = t5[12];
    if (12 >= t8)
      throw $.ioore(12);
    t1[12] = t4 - t7;
    if (13 >= t3)
      throw $.ioore(13);
    t7 = t2[13];
    if (13 >= t6)
      throw $.ioore(13);
    t4 = t5[13];
    if (13 >= t8)
      throw $.ioore(13);
    t1[13] = t7 - t4;
    if (14 >= t3)
      throw $.ioore(14);
    t4 = t2[14];
    if (14 >= t6)
      throw $.ioore(14);
    t7 = t5[14];
    if (14 >= t8)
      throw $.ioore(14);
    t1[14] = t4 - t7;
    if (15 >= t3)
      throw $.ioore(15);
    t2 = t2[15];
    if (15 >= t6)
      throw $.ioore(15);
    t5 = t5[15];
    if (15 >= t8)
      throw $.ioore(15);
    t1[15] = t2 - t5;
    return r;
  },
  translate$3: function(_, x, y, z) {
    var t1, tw, tx, ty, tz, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
    $.doubleTypeCheck(y);
    $.doubleTypeCheck(z);
    t1 = typeof x === "object" && x !== null && !!$.getInterceptor(x).$isvec4;
    tw = $.doubleTypeCheck(t1 ? x.get$w() : 1);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isvec3 || t1) {
      tx = $.doubleTypeCheck($.JSNumber_methods.get$x(x));
      ty = $.doubleTypeCheck($.JSNumber_methods.get$y(x));
      tz = $.doubleTypeCheck($.JSNumber_methods.get$z(x));
    } else {
      $.doubleTypeCheck(x);
      tz = z;
      ty = y;
      tx = x;
    }
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof tx !== "number")
      throw $.iae(tx);
    if (4 >= t2)
      throw $.ioore(4);
    t4 = t1[4];
    if (typeof ty !== "number")
      throw $.iae(ty);
    if (8 >= t2)
      throw $.ioore(8);
    t5 = t1[8];
    if (typeof tz !== "number")
      throw $.iae(tz);
    if (12 >= t2)
      throw $.ioore(12);
    t6 = t1[12];
    if (typeof tw !== "number")
      throw $.iae(tw);
    t7 = t1[1];
    t8 = t1[5];
    t9 = t1[9];
    if (13 >= t2)
      throw $.ioore(13);
    t10 = t1[13];
    t11 = t1[2];
    t12 = t1[6];
    t13 = t1[10];
    if (14 >= t2)
      throw $.ioore(14);
    t14 = t1[14];
    t15 = t1[3];
    t16 = t1[7];
    t17 = t1[11];
    if (15 >= t2)
      throw $.ioore(15);
    t2 = t1[15];
    t1[12] = t3 * tx + t4 * ty + t5 * tz + t6 * tw;
    t1[13] = t7 * tx + t8 * ty + t9 * tz + t10 * tw;
    t1[14] = t11 * tx + t12 * ty + t13 * tz + t14 * tw;
    t1[15] = t15 * tx + t16 * ty + t17 * tz + t2 * tw;
    return this;
  },
  scale$3: function(_, x, y, z) {
    var t1, sw, sx, sy, sz, t2, t3;
    $.doubleTypeCheck(y);
    $.doubleTypeCheck(z);
    t1 = typeof x === "object" && x !== null && !!$.getInterceptor(x).$isvec4;
    sw = $.doubleTypeCheck(t1 ? x.get$w() : 1);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isvec3 || t1) {
      sx = $.doubleTypeCheck($.JSNumber_methods.get$x(x));
      sy = $.doubleTypeCheck($.JSNumber_methods.get$y(x));
      sz = $.doubleTypeCheck($.JSNumber_methods.get$z(x));
    } else {
      $.doubleTypeCheck(x);
      sy = $.doubleTypeCheck(y == null ? x : $.toDouble$0$n(y));
      sz = $.doubleTypeCheck(z == null ? x : $.toDouble$0$n(z));
      sx = x;
    }
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (typeof sx !== "number")
      throw $.iae(sx);
    t1[0] = t3 * sx;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t1[1] * sx;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = t1[2] * sx;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = t1[3] * sx;
    if (4 >= t2)
      throw $.ioore(4);
    t3 = t1[4];
    if (typeof sy !== "number")
      throw $.iae(sy);
    t1[4] = t3 * sy;
    if (5 >= t2)
      throw $.ioore(5);
    t1[5] = t1[5] * sy;
    if (6 >= t2)
      throw $.ioore(6);
    t1[6] = t1[6] * sy;
    if (7 >= t2)
      throw $.ioore(7);
    t1[7] = t1[7] * sy;
    if (8 >= t2)
      throw $.ioore(8);
    t3 = t1[8];
    if (typeof sz !== "number")
      throw $.iae(sz);
    t1[8] = t3 * sz;
    if (9 >= t2)
      throw $.ioore(9);
    t1[9] = t1[9] * sz;
    if (10 >= t2)
      throw $.ioore(10);
    t1[10] = t1[10] * sz;
    if (11 >= t2)
      throw $.ioore(11);
    t1[11] = t1[11] * sz;
    if (12 >= t2)
      throw $.ioore(12);
    t3 = t1[12];
    if (typeof sw !== "number")
      throw $.iae(sw);
    t1[12] = t3 * sw;
    if (13 >= t2)
      throw $.ioore(13);
    t1[13] = t1[13] * sw;
    if (14 >= t2)
      throw $.ioore(14);
    t1[14] = t1[14] * sw;
    if (15 >= t2)
      throw $.ioore(15);
    t1[15] = t1[15] * sw;
    return this;
  },
  setZero$0: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = 0;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = 0;
    if (4 >= t2)
      throw $.ioore(4);
    t1[4] = 0;
    if (5 >= t2)
      throw $.ioore(5);
    t1[5] = 0;
    if (6 >= t2)
      throw $.ioore(6);
    t1[6] = 0;
    if (7 >= t2)
      throw $.ioore(7);
    t1[7] = 0;
    if (8 >= t2)
      throw $.ioore(8);
    t1[8] = 0;
    if (9 >= t2)
      throw $.ioore(9);
    t1[9] = 0;
    if (10 >= t2)
      throw $.ioore(10);
    t1[10] = 0;
    if (11 >= t2)
      throw $.ioore(11);
    t1[11] = 0;
    if (12 >= t2)
      throw $.ioore(12);
    t1[12] = 0;
    if (13 >= t2)
      throw $.ioore(13);
    t1[13] = 0;
    if (14 >= t2)
      throw $.ioore(14);
    t1[14] = 0;
    if (15 >= t2)
      throw $.ioore(15);
    t1[15] = 0;
    return this;
  },
  setIdentity$0: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 1;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = 0;
    if (3 >= t2)
      throw $.ioore(3);
    t1[3] = 0;
    if (4 >= t2)
      throw $.ioore(4);
    t1[4] = 0;
    if (5 >= t2)
      throw $.ioore(5);
    t1[5] = 1;
    if (6 >= t2)
      throw $.ioore(6);
    t1[6] = 0;
    if (7 >= t2)
      throw $.ioore(7);
    t1[7] = 0;
    if (8 >= t2)
      throw $.ioore(8);
    t1[8] = 0;
    if (9 >= t2)
      throw $.ioore(9);
    t1[9] = 0;
    if (10 >= t2)
      throw $.ioore(10);
    t1[10] = 1;
    if (11 >= t2)
      throw $.ioore(11);
    t1[11] = 0;
    if (12 >= t2)
      throw $.ioore(12);
    t1[12] = 0;
    if (13 >= t2)
      throw $.ioore(13);
    t1[13] = 0;
    if (14 >= t2)
      throw $.ioore(14);
    t1[14] = 0;
    if (15 >= t2)
      throw $.ioore(15);
    t1[15] = 1;
    return this;
  },
  transpose$0: function() {
    var t1, t2, temp;
    t1 = this.storage;
    t2 = t1.length;
    if (4 >= t2)
      throw $.ioore(4);
    temp = $.doubleTypeCheck(t1[4]);
    t1[4] = t1[1];
    t1[1] = temp;
    if (8 >= t2)
      throw $.ioore(8);
    temp = $.doubleTypeCheck(t1[8]);
    t1[8] = t1[2];
    t1[2] = temp;
    if (12 >= t2)
      throw $.ioore(12);
    temp = $.doubleTypeCheck(t1[12]);
    t1[12] = t1[3];
    t1[3] = temp;
    temp = $.doubleTypeCheck(t1[9]);
    t1[9] = t1[6];
    t1[6] = temp;
    if (13 >= t2)
      throw $.ioore(13);
    temp = $.doubleTypeCheck(t1[13]);
    t1[13] = t1[7];
    t1[7] = temp;
    if (14 >= t2)
      throw $.ioore(14);
    temp = $.doubleTypeCheck(t1[14]);
    t1[14] = t1[11];
    t1[11] = temp;
    return this;
  },
  add$1: function(_, o) {
    var t1, t2, t3, t4, t5;
    $.propertyTypeCheck(o, "$ismat4");
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = o.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t3 + t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t1[2] = t3 + t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t3 = t1[3];
    if (3 >= t5)
      throw $.ioore(3);
    t1[3] = t3 + t4[3];
    if (4 >= t2)
      throw $.ioore(4);
    t3 = t1[4];
    if (4 >= t5)
      throw $.ioore(4);
    t1[4] = t3 + t4[4];
    if (5 >= t2)
      throw $.ioore(5);
    t3 = t1[5];
    if (5 >= t5)
      throw $.ioore(5);
    t1[5] = t3 + t4[5];
    if (6 >= t2)
      throw $.ioore(6);
    t3 = t1[6];
    if (6 >= t5)
      throw $.ioore(6);
    t1[6] = t3 + t4[6];
    if (7 >= t2)
      throw $.ioore(7);
    t3 = t1[7];
    if (7 >= t5)
      throw $.ioore(7);
    t1[7] = t3 + t4[7];
    if (8 >= t2)
      throw $.ioore(8);
    t3 = t1[8];
    if (8 >= t5)
      throw $.ioore(8);
    t1[8] = t3 + t4[8];
    if (9 >= t2)
      throw $.ioore(9);
    t3 = t1[9];
    if (9 >= t5)
      throw $.ioore(9);
    t1[9] = t3 + t4[9];
    if (10 >= t2)
      throw $.ioore(10);
    t3 = t1[10];
    if (10 >= t5)
      throw $.ioore(10);
    t1[10] = t3 + t4[10];
    if (11 >= t2)
      throw $.ioore(11);
    t3 = t1[11];
    if (11 >= t5)
      throw $.ioore(11);
    t1[11] = t3 + t4[11];
    if (12 >= t2)
      throw $.ioore(12);
    t3 = t1[12];
    if (12 >= t5)
      throw $.ioore(12);
    t1[12] = t3 + t4[12];
    if (13 >= t2)
      throw $.ioore(13);
    t3 = t1[13];
    if (13 >= t5)
      throw $.ioore(13);
    t1[13] = t3 + t4[13];
    if (14 >= t2)
      throw $.ioore(14);
    t3 = t1[14];
    if (14 >= t5)
      throw $.ioore(14);
    t1[14] = t3 + t4[14];
    if (15 >= t2)
      throw $.ioore(15);
    t2 = t1[15];
    if (15 >= t5)
      throw $.ioore(15);
    t1[15] = t2 + t4[15];
    return this;
  },
  mat4$identity$0: function() {
    this.setIdentity$0();
  },
  $ismat4: true
};

$$.vec3 = {"": "Object;storage",
  setValues$3: function(x_, y_, z_) {
    var t1, t2;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = x_;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = y_;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = z_;
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = "[" + $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t2 + $.S(t1[1]) + ",";
    if (2 >= t1.length)
      throw $.ioore(2);
    return t2 + $.S(t1[2]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    return $.vec3$(-t3, -t4, -t1[2]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    $.propertyTypeCheck(other, "$isvec3");
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    return $.vec3$(t3 - t6, t7 - t8, t1 - t4[2]);
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8;
    $.propertyTypeCheck(other, "$isvec3");
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    return $.vec3$(t3 + t6, t7 + t8, t1 + t4[2]);
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4;
    $.doubleTypeCheck(scale);
    if (typeof scale !== "number")
      throw $.iae(scale);
    o = 1 / scale;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    return $.vec3$(t3 * o, t4 * o, t1[2] * o);
  },
  $index: function(_, i) {
    var t1;
    $.intTypeCheck(i);
    t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return $.doubleTypeCheck(t1[i]);
  },
  $indexSet: function(_, i, v) {
    var t1;
    $.intTypeCheck(i);
    $.doubleTypeCheck(v);
    t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, sum;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    sum = $.doubleTypeCheck(t3 * t3);
    if (1 >= t2)
      throw $.ioore(1);
    t3 = t1[1];
    sum = $.doubleTypeCheck($.$add$ns(sum, t3 * t3));
    if (2 >= t2)
      throw $.ioore(2);
    t1 = t1[2];
    return $.doubleTypeCheck($.sqrt($.doubleTypeCheck($.$add$ns(sum, t1 * t1))));
  },
  normalize$0: function(_) {
    var l, t1, t2;
    l = this.get$length(this);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = t1[0] * l;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = t1[1] * l;
    if (2 >= t2)
      throw $.ioore(2);
    t1[2] = t1[2] * l;
    return this;
  },
  cross$1: function(other) {
    var t1, t2, _x, _y, _z, ox, oy, oz, t3;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    _x = $.doubleTypeCheck(t1[0]);
    if (1 >= t2)
      throw $.ioore(1);
    _y = $.doubleTypeCheck(t1[1]);
    if (2 >= t2)
      throw $.ioore(2);
    _z = $.doubleTypeCheck(t1[2]);
    t1 = other.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    ox = $.doubleTypeCheck(t1[0]);
    if (1 >= t2)
      throw $.ioore(1);
    oy = $.doubleTypeCheck(t1[1]);
    if (2 >= t2)
      throw $.ioore(2);
    oz = $.doubleTypeCheck(t1[2]);
    t1 = $.getInterceptor$n(_y);
    t2 = $.getInterceptor$n(_z);
    t3 = $.getInterceptor$n(_x);
    return $.vec3$(t1.$mul(_y, oz) - t2.$mul(_z, oy), t2.$mul(_z, ox) - t3.$mul(_x, oz), t3.$mul(_x, oy) - t1.$mul(_y, ox));
  },
  add$1: function(_, arg) {
    var t1, t2, t3, t4, t5;
    $.propertyTypeCheck(arg, "$isvec3");
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t3 + t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t2 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t1[2] = t2 + t4[2];
    return this;
  },
  get$x: function(_) {
    var t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    return $.doubleTypeCheck(t1[0]);
  },
  get$y: function(_) {
    var t1 = this.storage;
    if (1 >= t1.length)
      throw $.ioore(1);
    return $.doubleTypeCheck(t1[1]);
  },
  get$z: function(_) {
    var t1 = this.storage;
    if (2 >= t1.length)
      throw $.ioore(2);
    return $.doubleTypeCheck(t1[2]);
  },
  vec3$3: function(x_, y_, z_) {
    this.setValues$3($.doubleTypeCheck(x_), $.doubleTypeCheck(y_), $.doubleTypeCheck(z_));
  },
  $isvec3: true
};

$$.vec4 = {"": "Object;storage",
  setValues$4: function(x_, y_, z_, w_) {
    var t1 = this.storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3] = w_;
    t1[2] = z_;
    t1[1] = y_;
    t1[0] = x_;
    return this;
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this.storage;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2 = $.S(t1[0]) + ",";
    if (1 >= t1.length)
      throw $.ioore(1);
    t2 = t2 + $.S(t1[1]) + ",";
    if (2 >= t1.length)
      throw $.ioore(2);
    t2 = t2 + $.S(t1[2]) + ",";
    if (3 >= t1.length)
      throw $.ioore(3);
    return t2 + $.S(t1[3]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    $.propertyTypeCheck(other, "$isvec4");
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t9 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t10 = t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    if (3 >= t5)
      throw $.ioore(3);
    return $.vec4$(t3 - t6, t7 - t8, t9 - t10, t1 - t4[3]);
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    $.propertyTypeCheck(other, "$isvec4");
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = other.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t6 = t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t7 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t8 = t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t9 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t10 = t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    if (3 >= t5)
      throw $.ioore(3);
    return $.vec4$(t3 + t6, t7 + t8, t9 + t10, t1 + t4[3]);
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4, t5;
    $.doubleTypeCheck(scale);
    if (typeof scale !== "number")
      throw $.iae(scale);
    o = 1 / scale;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    if (1 >= t2)
      throw $.ioore(1);
    t4 = t1[1];
    if (2 >= t2)
      throw $.ioore(2);
    t5 = t1[2];
    if (3 >= t2)
      throw $.ioore(3);
    return $.vec4$(t3 * o, t4 * o, t5 * o, t1[3] * o);
  },
  $index: function(_, i) {
    var t1;
    $.intTypeCheck(i);
    t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return $.doubleTypeCheck(t1[i]);
  },
  $indexSet: function(_, i, v) {
    var t1;
    $.intTypeCheck(i);
    $.doubleTypeCheck(v);
    t1 = this.storage;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, sum;
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    sum = $.doubleTypeCheck(t3 * t3);
    if (1 >= t2)
      throw $.ioore(1);
    t3 = t1[1];
    sum = $.doubleTypeCheck($.$add$ns(sum, t3 * t3));
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    sum = $.doubleTypeCheck($.$add$ns(sum, t3 * t3));
    if (3 >= t2)
      throw $.ioore(3);
    t1 = t1[3];
    return $.sqrt($.doubleTypeCheck($.$add$ns(sum, t1 * t1)));
  },
  add$1: function(_, arg) {
    var t1, t2, t3, t4, t5;
    $.propertyTypeCheck(arg, "$isvec4");
    t1 = this.storage;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = arg.storage;
    t5 = t4.length;
    if (0 >= t5)
      throw $.ioore(0);
    t1[0] = t3 + t4[0];
    if (1 >= t2)
      throw $.ioore(1);
    t3 = t1[1];
    if (1 >= t5)
      throw $.ioore(1);
    t1[1] = t3 + t4[1];
    if (2 >= t2)
      throw $.ioore(2);
    t3 = t1[2];
    if (2 >= t5)
      throw $.ioore(2);
    t1[2] = t3 + t4[2];
    if (3 >= t2)
      throw $.ioore(3);
    t2 = t1[3];
    if (3 >= t5)
      throw $.ioore(3);
    t1[3] = t2 + t4[3];
    return this;
  },
  get$w: function() {
    var t1 = this.storage;
    if (3 >= t1.length)
      throw $.ioore(3);
    return $.doubleTypeCheck(t1[3]);
  },
  vec4$4: function(x_, y_, z_, w_) {
    this.setValues$4($.doubleTypeCheck(x_), $.doubleTypeCheck(y_), $.doubleTypeCheck(z_), $.doubleTypeCheck(w_));
  },
  $isvec4: true
};

// Native classes
$$._WorkerStub = {"": "Interceptor;",
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  },
  $is_ManagerStub: true,
  $as_ManagerStub: null,
  $asObject: null
};

$$._HTMLElement = {"": "Element;"};

$$.AbstractWorker = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  }
};

$$.AnchorElement = {"": "Element;",
  set$href: function(receiver, v) {
    receiver.href = $.stringTypeCheck(v);
  },
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.ApplicationCache = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isApplicationCache: true,
  $asApplicationCache: null
};

$$.AreaElement = {"": "Element;",
  set$href: function(receiver, v) {
    receiver.href = $.stringTypeCheck(v);
  }
};

$$.Attr = {"": "Node;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "Element;"};

$$.BarInfo = {"": "Interceptor;", $isBarInfo: true, $asBarInfo: null};

$$.BaseElement = {"": "Element;",
  set$href: function(receiver, v) {
    receiver.href = $.stringTypeCheck(v);
  }
};

$$.BeforeLoadEvent = {"": "Event;"};

$$.Blob = {"": "Interceptor;", $isBlob: true, $asBlob: null};

$$.BodyElement = {"": "Element;", $isBodyElement: true, $asBodyElement: null};

$$.ButtonElement = {"": "Element;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "Element;height=,width=",
  set$height: function(receiver, v) {
    receiver.height = $.intTypeCheck(v);
  },
  set$width: function(receiver, v) {
    receiver.width = $.intTypeCheck(v);
  },
  getContext$2: function(receiver, contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return this._getContext_1$2(receiver, contextId, $.convertDartToNative_Dictionary(attrs));
    return this._getContext_2$1(receiver, contextId);
  },
  _getContext_1$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId, attrs);
  },
  _getContext_2$1: function(receiver, contextId) {
    return receiver.getContext(contextId);
  },
  getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil: function(receiver, alpha, antialias, depth, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    var options, context;
    options = $.makeLiteralMap(["alpha", alpha, "depth", depth, "stencil", stencil, "antialias", antialias, "premultipliedAlpha", premultipliedAlpha, "preserveDrawingBuffer", preserveDrawingBuffer]);
    context = this.getContext$2(receiver, "webgl", options);
    return $.interceptedTypeCheck(context == null ? this.getContext$2(receiver, "experimental-webgl", options) : context, "$isRenderingContext");
  },
  getContext3d$0: function($receiver) {
    return this.getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil($receiver, true, true, true, true, false, false);
  },
  $isCanvasElement: true,
  $asCanvasElement: null,
  $asObject: null
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasProxy = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;"};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "Element;"};

$$.Coordinates = {"": "Interceptor;", $isCoordinates: true, $asCoordinates: null};

$$.Crypto = {"": "Interceptor;", $isCrypto: true, $asCrypto: null};

$$.CssCharsetRule = {"": "CssRule;"};

$$.CssFilterRule = {"": "CssRule;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CssFontFaceRule = {"": "CssRule;", $isCssFontFaceRule: true, $asCssFontFaceRule: null};

$$.CssHostRule = {"": "CssRule;"};

$$.CssImportRule = {"": "CssRule;"};

$$.CssKeyframeRule = {"": "CssRule;"};

$$.CssKeyframesRule = {"": "CssRule;"};

$$.CssMediaRule = {"": "CssRule;"};

$$.CssPageRule = {"": "CssRule;"};

$$.CssRegionRule = {"": "CssRule;"};

$$.CssRule = {"": "Interceptor;", $isCssRule: true, $asCssRule: null};

$$.CssStyleDeclaration = {"": "Interceptor;length=",
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    $.stringTypeCheck(value);
    try {
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  set$backgroundColor: function(receiver, value) {
    this.setProperty$3(receiver, "background-color", value, "");
  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  $isCssStyleDeclaration: true,
  $asCssStyleDeclaration: null
};

$$.CssStyleRule = {"": "CssRule;"};

$$.CssStyleSheet = {"": "StyleSheet;", $isCssStyleSheet: true, $asCssStyleSheet: null};

$$.CssUnknownRule = {"": "CssRule;"};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DataTransfer = {"": "Interceptor;", $isDataTransfer: true, $asDataTransfer: null};

$$.DataTransferItem = {"": "Interceptor;"};

$$.DataTransferItemList = {"": "Interceptor;length=",
  add$2: function(receiver, data_OR_file, type) {
    return receiver.add(data_OR_file, type);
  },
  add$1: function($receiver, data_OR_file) {
    return $receiver.add(data_OR_file);
  },
  $isDataTransferItemList: true,
  $asDataTransferItemList: null
};

$$.DetailsElement = {"": "Element;"};

$$.DeviceAcceleration = {"": "Interceptor;", $isDeviceAcceleration: true, $asDeviceAcceleration: null};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DeviceRotationRate = {"": "Interceptor;", $isDeviceRotationRate: true, $asDeviceRotationRate: null};

$$.DialogElement = {"": "Element;"};

$$.DirectoryEntry = {"": "Entry;", $isDirectoryEntry: true, $asDirectoryEntry: null};

$$.DirectoryReader = {"": "Interceptor;"};

$$.DivElement = {"": "Element;", $isDivElement: true, $asDivElement: null};

$$.Document = {"": "Node;",
  $$dom_createElement$2: function(receiver, localName_OR_tagName, typeExtension) {
    return receiver.createElement(localName_OR_tagName, typeExtension);
  },
  $$dom_createElement$1: function($receiver, localName_OR_tagName) {
    return $receiver.createElement(localName_OR_tagName);
  },
  $$dom_createEvent$1: function(receiver, eventType) {
    return receiver.createEvent(eventType);
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  register$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    $.stringTypeCheck($name);
    $.interceptedTypeCheck(options, "$isMap");
    if (!t1)
      return this._register_1$2(receiver, $name, $.convertDartToNative_Dictionary(options));
    return this._register_2$1(receiver, $name);
  },
  _register_1$2: function(receiver, $name, options) {
    return receiver.webkitRegister($name, options);
  },
  _register_2$1: function(receiver, $name) {
    return receiver.webkitRegister($name);
  },
  get$onFullscreenChange: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_webkitfullscreenchange.forTarget$1(receiver), "$isStream");
  },
  get$onFullscreenError: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_webkitfullscreenerror.forTarget$1(receiver), "$isStream");
  },
  get$onPointerLockChange: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_webkitpointerlockchange.forTarget$1(receiver), "$isStream");
  },
  $isDocument: true,
  $asDocument: null
};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = $.listTypeCheck($.FilteredElementList$(receiver, null));
    return $.listTypeCheck(receiver._children);
  },
  $isDocumentFragment: true,
  $asDocumentFragment: null
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;", $isDomError: true, $asDomError: null};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.DomImplementation = {"": "Interceptor;", $isDomImplementation: true, $asDomImplementation: null};

$$.DomParser = {"": "Interceptor;"};

$$.DomSettableTokenList = {"": "DomTokenList;", $isDomSettableTokenList: true, $asDomSettableTokenList: null};

$$.DomStringList = {"": "Object_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.stringTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.JSString]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSString]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.DomTokenList = {"": "Interceptor;length=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;$$dom_children:children=,id=",
  set$id: function(receiver, v) {
    receiver.id = $.stringTypeCheck(v);
  },
  get$children: function(receiver) {
    return $.listTypeCheck($._ChildrenElementList$_wrap(receiver));
  },
  get$client: function(receiver) {
    return $.Rect$(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
  },
  get$offset: function(receiver) {
    return $.Rect$(receiver.offsetLeft, receiver.offsetTop, receiver.offsetWidth, receiver.offsetHeight);
  },
  get$model: function(receiver) {
    return receiver._model;
  },
  get$onClick: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_click.forTarget$1(receiver), "$isStream");
  },
  get$onError: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_error.forTarget$1(receiver), "$isStream");
  },
  get$onLoad: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_load.forTarget$1(receiver), "$isStream");
  },
  get$onMouseDown: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_mousedown.forTarget$1(receiver), "$isStream");
  },
  $isElement: true,
  $asElement: null,
  $asObject: null
};

$$.EmbedElement = {"": "Element;height=,width=",
  set$height: function(receiver, v) {
    receiver.height = $.stringTypeCheck(v);
  },
  set$src: function(receiver, v) {
    receiver.src = $.stringTypeCheck(v);
  },
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  set$width: function(receiver, v) {
    receiver.width = $.stringTypeCheck(v);
  }
};

$$.Entry = {"": "Interceptor;",
  _remove$2: function(receiver, successCallback, errorCallback) {
    $.propertyTypeCheck(successCallback, "$isVoidCallback");
    $.propertyTypeCheck(errorCallback, "$is_ErrorCallback");
    return receiver.remove($.convertDartClosureToJS(successCallback, 0), $.convertDartClosureToJS(errorCallback, 1));
  },
  remove$0: function(receiver) {
    var completer = $._AsyncCompleter$(null);
    this._remove$2(receiver, new $.Entry_remove_closure(completer), new $.Entry_remove_closure0(completer));
    return completer.future;
  },
  $isEntry: true,
  $asEntry: null
};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;",
  $$dom_initEvent$3: function(receiver, eventTypeArg, canBubbleArg, cancelableArg) {
    return receiver.initEvent(eventTypeArg, canBubbleArg, cancelableArg);
  },
  $isEvent: true,
  $asEvent: null
};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventSource = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  }
};

$$.EventTarget = {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isEventTarget: true,
  $asEventTarget: null
};

$$.FieldSetElement = {"": "Element;"};

$$.File = {"": "Blob;", $isFile: true, $asFile: null};

$$.FileEntry = {"": "Entry;"};

$$.FileError = {"": "Interceptor;", $isFileError: true, $asFileError: null};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FileList = {"": "Object_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isFile");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isFileList: true,
  $asFileList: null,
  $isList: true,
  $asList: function() { return [$.File]; },
  $isIterable: true,
  $asIterable: function() { return [$.File]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.FileReader = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  }
};

$$.FileSystem = {"": "Interceptor;", $isFileSystem: true, $asFileSystem: null};

$$.FileWriter = {"": "EventTarget;length=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  write$1: function(receiver, data) {
    return receiver.write($.interceptedTypeCheck(data, "$isBlob"));
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FontLoader = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isFontLoader: true,
  $asFontLoader: null
};

$$.FormData = {"": "Interceptor;"};

$$.FormElement = {"": "Element;length=", $isFormElement: true, $asFormElement: null};

$$.Gamepad = {"": "Interceptor;id=", $isGamepad: true, $asGamepad: null};

$$.Geolocation = {"": "Interceptor;", $isGeolocation: true, $asGeolocation: null};

$$.Geoposition = {"": "Interceptor;"};

$$.HRElement = {"": "Element;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "Element;", $isHeadElement: true, $asHeadElement: null};

$$.HeadingElement = {"": "Element;"};

$$.History = {"": "Interceptor;length=", $isHistory: true, $asHistory: null, $asObject: null};

$$.HtmlAllCollection = {"": "Object_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlCollection = {"": "Object_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isHtmlCollection: true,
  $asHtmlCollection: null,
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;"};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequest = {"": "EventTarget;responseText=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  open$2: function($receiver, method, url) {
    return $receiver.open(method, url);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  get$onError: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_error.forTarget$1(receiver), "$isStream");
  },
  get$onLoad: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_load.forTarget$1(receiver), "$isStream");
  },
  get$onProgress: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_progress.forTarget$1(receiver), "$isStream");
  },
  $isHttpRequest: true,
  $asHttpRequest: null
};

$$.HttpRequestException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.HttpRequestUpload = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isHttpRequestUpload: true,
  $asHttpRequestUpload: null
};

$$.IFrameElement = {"": "Element;height=,width=",
  set$height: function(receiver, v) {
    receiver.height = $.stringTypeCheck(v);
  },
  set$src: function(receiver, v) {
    receiver.src = $.stringTypeCheck(v);
  },
  set$width: function(receiver, v) {
    receiver.width = $.stringTypeCheck(v);
  }
};

$$.ImageData = {"": "Interceptor;", $isImageData: true, $asImageData: null};

$$.ImageElement = {"": "Element;height=,width=",
  set$height: function(receiver, v) {
    receiver.height = $.intTypeCheck(v);
  },
  set$src: function(receiver, v) {
    receiver.src = $.stringTypeCheck(v);
  },
  set$width: function(receiver, v) {
    receiver.width = $.intTypeCheck(v);
  },
  $isImageElement: true,
  $asImageElement: null,
  $asObject: null
};

$$.InputElement = {"": "Element;height=,width=",
  set$height: function(receiver, v) {
    receiver.height = $.intTypeCheck(v);
  },
  set$src: function(receiver, v) {
    receiver.src = $.stringTypeCheck(v);
  },
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  set$width: function(receiver, v) {
    receiver.width = $.intTypeCheck(v);
  },
  $isInputElement: true,
  $asInputElement: null,
  $isElement: true,
  $asElement: null,
  $asObject: null,
  $isNode: true,
  $asNode: null,
  $isEventTarget: true,
  $asEventTarget: null
};

$$.KeyboardEvent = {"": "UIEvent;",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  $isKeyboardEvent: true,
  $asKeyboardEvent: null
};

$$.KeygenElement = {"": "Element;"};

$$.LIElement = {"": "Element;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;",
  set$href: function(receiver, v) {
    receiver.href = $.stringTypeCheck(v);
  },
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.LocalMediaStream = {"": "MediaStream;", $isEventTarget: true, $asEventTarget: null, $asObject: null};

$$.Location = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $asObject: null
};

$$.MapElement = {"": "Element;"};

$$.MediaController = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isMediaController: true,
  $asMediaController: null
};

$$.MediaElement = {"": "Element;",
  set$src: function(receiver, v) {
    receiver.src = $.stringTypeCheck(v);
  },
  $isMediaElement: true,
  $asMediaElement: null
};

$$.MediaError = {"": "Interceptor;", $isMediaError: true, $asMediaError: null};

$$.MediaKeyError = {"": "Interceptor;", $isMediaKeyError: true, $asMediaKeyError: null};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaList = {"": "Interceptor;length=", $isMediaList: true, $asMediaList: null};

$$.MediaQueryList = {"": "Interceptor;"};

$$.MediaSource = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  }
};

$$.MediaStream = {"": "EventTarget;id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isMediaStream: true,
  $asMediaStream: null
};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrack = {"": "EventTarget;id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isMediaStreamTrack: true,
  $asMediaStreamTrack: null
};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MemoryInfo = {"": "Interceptor;", $isMemoryInfo: true, $asMemoryInfo: null};

$$.MenuElement = {"": "Element;"};

$$.MessageChannel = {"": "Interceptor;"};

$$.MessageEvent = {"": "Event;",
  get$data: function(receiver) {
    return $.convertNativeToDart_SerializedScriptValue(receiver.data);
  },
  $isMessageEvent: true,
  $asMessageEvent: null
};

$$.MessagePort = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isMessagePort: true,
  $asMessagePort: null
};

$$.MetaElement = {"": "Element;"};

$$.Metadata = {"": "Interceptor;"};

$$.MeterElement = {"": "Element;"};

$$.MimeType = {"": "Interceptor;", $isMimeType: true, $asMimeType: null};

$$.MimeTypeArray = {"": "Object_ListMixin_ImmutableListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isMimeType");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isMimeTypeArray: true,
  $asMimeTypeArray: null,
  $isList: true,
  $asList: function() { return [$.MimeType]; },
  $isIterable: true,
  $asIterable: function() { return [$.MimeType]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.ModElement = {"": "Element;"};

$$.MouseEvent = {"": "UIEvent;",
  get$movement: function(receiver) {
    return $.Point$(receiver.webkitMovementX, receiver.webkitMovementY);
  },
  $isMouseEvent: true,
  $asMouseEvent: null
};

$$.MutationEvent = {"": "Event;"};

$$.MutationObserver = {"": "Interceptor;"};

$$.MutationRecord = {"": "Interceptor;"};

$$.NamedFlow = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  }
};

$$.NamedFlowCollection = {"": "Interceptor;length="};

$$.Navigator = {"": "Interceptor;", $isNavigator: true, $asNavigator: null};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;",
  set$text: function(receiver, v) {
    receiver.textContent = $.stringTypeCheck(v);
  },
  get$nodes: function(receiver) {
    return $.listTypeCheck($._ChildNodeListLazy$(receiver));
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      $.$$dom_removeChild$1$x(t1, receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.localName;
    if (t1 == null) {
      t1 = receiver.nodeValue;
      if (t1 == null)
        t1 = $.Interceptor.prototype.toString$0.call(this, receiver);
    }
    return t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  $$dom_removeChild$1: function(receiver, oldChild) {
    return receiver.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild($.interceptedTypeCheck(newChild, "$isNode"), oldChild);
  },
  $isNode: true,
  $asNode: null
};

$$.NodeFilter = {"": "Interceptor;", $isNodeFilter: true, $asNodeFilter: null};

$$.NodeIterator = {"": "Interceptor;"};

$$.NodeList = {"": "Object_ListMixin_ImmutableListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.Notification = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  }
};

$$.NotificationCenter = {"": "Interceptor;", $isNotificationCenter: true, $asNotificationCenter: null};

$$.OListElement = {"": "Element;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.ObjectElement = {"": "Element;height=,width=",
  set$height: function(receiver, v) {
    receiver.height = $.stringTypeCheck(v);
  },
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  set$width: function(receiver, v) {
    receiver.width = $.stringTypeCheck(v);
  }
};

$$.OptGroupElement = {"": "Element;"};

$$.OptionElement = {"": "Element;"};

$$.OutputElement = {"": "Element;"};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;"};

$$.Path = {"": "Interceptor;", $isPath: true, $asPath: null};

$$.Performance = {"": "EventTarget;", $isPerformance: true, $asPerformance: null};

$$.PerformanceEntry = {"": "Interceptor;"};

$$.PerformanceEntryList = {"": "Interceptor;length="};

$$.PerformanceMark = {"": "PerformanceEntry;"};

$$.PerformanceMeasure = {"": "PerformanceEntry;"};

$$.PerformanceNavigation = {"": "Interceptor;", $isPerformanceNavigation: true, $asPerformanceNavigation: null};

$$.PerformanceResourceTiming = {"": "PerformanceEntry;"};

$$.PerformanceTiming = {"": "Interceptor;", $isPerformanceTiming: true, $asPerformanceTiming: null};

$$.Plugin = {"": "Interceptor;length=", $isPlugin: true, $asPlugin: null};

$$.PluginArray = {"": "Object_ListMixin_ImmutableListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isPlugin");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isPluginArray: true,
  $asPluginArray: null,
  $isList: true,
  $asList: function() { return [$.Plugin]; },
  $isIterable: true,
  $asIterable: function() { return [$.Plugin]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "Element;"};

$$.ProgressEvent = {"": "Event;", $isProgressEvent: true, $asProgressEvent: null};

$$.QuoteElement = {"": "Element;"};

$$.Range = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RangeException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RtcDataChannel = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isRtcDataChannel: true,
  $asRtcDataChannel: null
};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfSender = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  }
};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidate = {"": "Interceptor;", $isRtcIceCandidate: true, $asRtcIceCandidate: null};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.RtcPeerConnection = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  }
};

$$.RtcSessionDescription = {"": "Interceptor;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  $isRtcSessionDescription: true,
  $asRtcSessionDescription: null
};

$$.RtcStatsReport = {"": "Interceptor;id=", $isRtcStatsReport: true, $asRtcStatsReport: null};

$$.RtcStatsResponse = {"": "Interceptor;"};

$$.Screen = {"": "Interceptor;", $isScreen: true, $asScreen: null};

$$.ScriptElement = {"": "Element;",
  set$src: function(receiver, v) {
    receiver.src = $.stringTypeCheck(v);
  },
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.ScriptProfile = {"": "Interceptor;"};

$$.ScriptProfileNode = {"": "Interceptor;",
  children$0: function(receiver) {
    return receiver.children();
  },
  get$children: function(receiver) {
    return new $.Bound_children_ScriptProfileNode(this, "children$0", receiver);
  },
  $isScriptProfileNode: true,
  $asScriptProfileNode: null
};

$$.SecurityPolicy = {"": "Interceptor;", $isSecurityPolicy: true, $asSecurityPolicy: null};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "Element;length="};

$$.Selection = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;", $isShadowRoot: true, $asShadowRoot: null};

$$.SourceBuffer = {"": "Interceptor;", $isSourceBuffer: true, $asSourceBuffer: null};

$$.SourceBufferList = {"": "EventTarget_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isSourceBuffer");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isSourceBufferList: true,
  $asSourceBufferList: null,
  $isList: true,
  $asList: function() { return [$.SourceBuffer]; },
  $isIterable: true,
  $asIterable: function() { return [$.SourceBuffer]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SourceElement = {"": "Element;",
  set$src: function(receiver, v) {
    receiver.src = $.stringTypeCheck(v);
  },
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.SpanElement = {"": "Element;", $isSpanElement: true, $asSpanElement: null};

$$.SpeechGrammar = {"": "Interceptor;", $isSpeechGrammar: true, $asSpeechGrammar: null};

$$.SpeechGrammarList = {"": "Object_ListMixin_ImmutableListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isSpeechGrammar");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isSpeechGrammarList: true,
  $asSpeechGrammarList: null,
  $isList: true,
  $asList: function() { return [$.SpeechGrammar]; },
  $isIterable: true,
  $asIterable: function() { return [$.SpeechGrammar]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechInputResult = {"": "Interceptor;", $isSpeechInputResult: true, $asSpeechInputResult: null};

$$.SpeechRecognition = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  }
};

$$.SpeechRecognitionAlternative = {"": "Interceptor;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.SpeechRecognitionResult = {"": "Interceptor;length=", $isSpeechRecognitionResult: true, $asSpeechRecognitionResult: null};

$$.Storage = {"": "Interceptor;",
  $index: function(receiver, key) {
    return this.$$dom_getItem$1(receiver, $.stringTypeCheck(key));
  },
  $indexSet: function(receiver, key, value) {
    this.$$dom_setItem$2(receiver, $.stringTypeCheck(key), $.stringTypeCheck(value));
  },
  forEach$1: function(receiver, f) {
    var i, key;
    $.functionTypeCheck(f);
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(receiver, i);
      if (key == null)
        return;
      f.call$2(key, this.$$dom_getItem$1(receiver, key));
    }
  },
  get$keys: function(receiver) {
    var keys = [];
    this.forEach$1(receiver, new $.Storage_keys_closure(keys));
    return $.listSuperNativeTypeCheck(keys, "$isIterable");
  },
  get$values: function(receiver) {
    var values = [];
    this.forEach$1(receiver, new $.Storage_values_closure(values));
    return $.listSuperNativeTypeCheck(values, "$isIterable");
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $$dom_getItem$1: function(receiver, key) {
    return receiver.getItem(key);
  },
  $$dom_key$1: function(receiver, index) {
    return receiver.key(index);
  },
  $$dom_setItem$2: function(receiver, key, data) {
    return receiver.setItem(key, data);
  },
  $isStorage: true,
  $asStorage: null,
  $isMap: true,
  $asMap: function() { return [$.JSString, $.JSString]; },
  $asObject: null
};

$$.StorageEvent = {"": "Event;"};

$$.StorageInfo = {"": "Interceptor;", $isStorageInfo: true, $asStorageInfo: null};

$$.StorageQuota = {"": "Interceptor;", $isStorageQuota: true, $asStorageQuota: null};

$$.StyleElement = {"": "Element;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.StyleMedia = {"": "Interceptor;", $isStyleMedia: true, $asStyleMedia: null};

$$.StyleSheet = {"": "Interceptor;", $isStyleSheet: true, $asStyleSheet: null};

$$.TableCaptionElement = {"": "Element;", $isTableCaptionElement: true, $asTableCaptionElement: null};

$$.TableCellElement = {"": "Element;"};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;"};

$$.TableRowElement = {"": "Element;"};

$$.TableSectionElement = {"": "Element;", $isTableSectionElement: true, $asTableSectionElement: null};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "Element;"};

$$.TextEvent = {"": "UIEvent;"};

$$.TextMetrics = {"": "Interceptor;"};

$$.TextTrack = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isTextTrack: true,
  $asTextTrack: null
};

$$.TextTrackCue = {"": "EventTarget;id=",
  set$text: function(receiver, v) {
    receiver.text = $.stringTypeCheck(v);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isTextTrackCue: true,
  $asTextTrackCue: null
};

$$.TextTrackCueList = {"": "Object_ListMixin_ImmutableListMixin7;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isTextTrackCue");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isTextTrackCueList: true,
  $asTextTrackCueList: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  $asObject: null,
  $isList: true,
  $asList: function() { return [$.TextTrackCue]; },
  $isIterable: true,
  $asIterable: function() { return [$.TextTrackCue]; }
};

$$.TextTrackList = {"": "EventTarget_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isTextTrack");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isTextTrackList: true,
  $asTextTrackList: null,
  $isList: true,
  $asList: function() { return [$.TextTrack]; },
  $isIterable: true,
  $asIterable: function() { return [$.TextTrack]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TimeRanges = {"": "Interceptor;length=", $isTimeRanges: true, $asTimeRanges: null};

$$.TitleElement = {"": "Element;"};

$$.Touch = {"": "Interceptor;",
  get$client: function(receiver) {
    return $.Point$(receiver.clientX, receiver.clientY);
  },
  $isTouch: true,
  $asTouch: null
};

$$.TouchEvent = {"": "UIEvent;", $isTouchEvent: true, $asTouchEvent: null};

$$.TouchList = {"": "Object_ListMixin_ImmutableListMixin8;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isTouch");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isTouchList: true,
  $asTouchList: null,
  $isList: true,
  $asList: function() { return [$.Touch]; },
  $isIterable: true,
  $asIterable: function() { return [$.Touch]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TrackElement = {"": "Element;",
  set$src: function(receiver, v) {
    receiver.src = $.stringTypeCheck(v);
  }
};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.TreeWalker = {"": "Interceptor;"};

$$.UIEvent = {"": "Event;",
  get$page: function(receiver) {
    return $.Point$(receiver.pageX, receiver.pageY);
  }
};

$$.UListElement = {"": "Element;"};

$$.UnknownElement = {"": "Element;"};

$$.Url = {"": "Interceptor;"};

$$.ValidityState = {"": "Interceptor;", $isValidityState: true, $asValidityState: null};

$$.VideoElement = {"": "MediaElement;height=,width=",
  set$height: function(receiver, v) {
    receiver.height = $.intTypeCheck(v);
  },
  set$width: function(receiver, v) {
    receiver.width = $.intTypeCheck(v);
  },
  $isVideoElement: true,
  $asVideoElement: null,
  $asObject: null
};

$$.WebSocket = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  get$onClose: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_close.forTarget$1(receiver), "$isStream");
  },
  get$onError: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_error.forTarget$1(receiver), "$isStream");
  },
  get$onMessage: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_message.forTarget$1(receiver), "$isStream");
  },
  get$onOpen: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_open.forTarget$1(receiver), "$isStream");
  },
  $isWebSocket: true,
  $asWebSocket: null
};

$$.WheelEvent = {"": "MouseEvent;",
  get$deltaY: function(receiver) {
    var detail;
    if (receiver.deltaY !== undefined)
      return this.get$_deltaY(receiver);
    else if (receiver.wheelDelta !== undefined)
      return -this.get$_wheelDelta(receiver);
    else if (receiver.detail !== undefined) {
      if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
        detail = this.get$_detail(receiver);
        if ($.JSNumber_methods.abs$0(detail) < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw $.wrapException($.UnsupportedError$("deltaY is not supported"));
  },
  get$deltaX: function(receiver) {
    var detail;
    if (receiver.deltaX !== undefined)
      return this.get$_deltaX(receiver);
    else if (receiver.wheelDeltaX !== undefined)
      return -this.get$_wheelDeltaX(receiver);
    else if (receiver.detail !== undefined) {
      if (receiver.axis !== undefined && receiver.axis == MouseScrollEvent.HORIZONTAL_AXIS) {
        detail = this.get$_detail(receiver);
        if (detail < 100)
          return -detail * 40;
        return -detail;
      }
      return 0;
    }
    throw $.wrapException($.UnsupportedError$("deltaX is not supported"));
  },
  get$_deltaY: function(receiver) {
    return receiver.deltaY;
  },
  get$_deltaX: function(receiver) {
    return receiver.deltaX;
  },
  get$_wheelDelta: function(receiver) {
    return receiver.wheelDelta;
  },
  get$_wheelDeltaX: function(receiver) {
    return receiver.wheelDeltaX;
  },
  get$_detail: function(receiver) {
    return receiver.detail;
  },
  $isWheelEvent: true,
  $asWheelEvent: null
};

$$.Window = {"": "EventTarget;",
  requestAnimationFrame$1: function(receiver, callback) {
    $.propertyTypeCheck(callback, "$isRequestAnimationFrameCallback");
    this._ensureRequestAnimationFrame$0(receiver);
    return this._liblib$_requestAnimationFrame$1(receiver, callback);
  },
  _liblib$_requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS($.propertyTypeCheck(callback, "$isRequestAnimationFrameCallback"), 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onKeyDown: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_keydown.forTarget$1(receiver), "$isStream");
  },
  get$onKeyUp: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_keyup.forTarget$1(receiver), "$isStream");
  },
  get$onMouseDown: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_mousedown.forTarget$1(receiver), "$isStream");
  },
  get$onMouseMove: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_mousemove.forTarget$1(receiver), "$isStream");
  },
  get$onMouseUp: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_mouseup.forTarget$1(receiver), "$isStream");
  },
  get$onMouseWheel: function(receiver) {
    return $.propertyTypeCheck($._CustomEventStreamProvider__determineMouseWheelEventType.forTarget$1(receiver), "$isStream");
  },
  get$onResize: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_resize.forTarget$1(receiver), "$isStream");
  },
  get$onTouchEnd: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_touchend.forTarget$1(receiver), "$isStream");
  },
  get$onTouchMove: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_touchmove.forTarget$1(receiver), "$isStream");
  },
  get$onTouchStart: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_touchstart.forTarget$1(receiver), "$isStream");
  },
  $asObject: null
};

$$.Worker = {"": "AbstractWorker;",
  terminate$0: function(receiver) {
    return receiver.terminate();
  }
};

$$.XPathEvaluator = {"": "Interceptor;"};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.XPathExpression = {"": "Interceptor;"};

$$.XPathNSResolver = {"": "Interceptor;"};

$$.XPathResult = {"": "Interceptor;"};

$$.XmlSerializer = {"": "Interceptor;"};

$$.XsltProcessor = {"": "Interceptor;"};

$$._CSSValue = {"": "Interceptor;", $is_CSSValue: true, $as_CSSValue: null};

$$._ClientRect = {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  toInt$0: function(receiver) {
    return $.Rect$($.toInt$0$nx(receiver.left), $.toInt$0$nx(receiver.top), $.toInt$0$nx(receiver.width), $.toInt$0$nx(receiver.height));
  },
  $isRect: true,
  $asRect: null,
  $asObject: null
};

$$._ClientRectList = {"": "Object_ListMixin_ImmutableListMixin9;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isRect");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.Rect]; },
  $isIterable: true,
  $asIterable: function() { return [$.Rect]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._CssRuleList = {"": "Object_ListMixin_ImmutableListMixin10;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isCssRule");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.CssRule]; },
  $isIterable: true,
  $asIterable: function() { return [$.CssRule]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._CssValueList = {"": "_CSSValue_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$is_CSSValue");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$._CSSValue]; },
  $isIterable: true,
  $asIterable: function() { return [$._CSSValue]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._DomPoint = {"": "Interceptor;"};

$$._EntryArray = {"": "Object_ListMixin_ImmutableListMixin11;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isEntry");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.Entry]; },
  $isIterable: true,
  $asIterable: function() { return [$.Entry]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._EntryArraySync = {"": "Object_ListMixin_ImmutableListMixin12;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$is_EntrySync");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$._EntrySync]; },
  $isIterable: true,
  $asIterable: function() { return [$._EntrySync]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._EntrySync = {"": "Interceptor;", $is_EntrySync: true, $as_EntrySync: null};

$$._GamepadList = {"": "Object_ListMixin_ImmutableListMixin13;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isGamepad");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.Gamepad]; },
  $isIterable: true,
  $asIterable: function() { return [$.Gamepad]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._NamedNodeMap = {"": "Object_ListMixin_ImmutableListMixin14;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNode");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $is_NamedNodeMap: true,
  $as_NamedNodeMap: null,
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._SpeechInputResultList = {"": "Object_ListMixin_ImmutableListMixin15;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isSpeechInputResult");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.SpeechInputResult]; },
  $isIterable: true,
  $asIterable: function() { return [$.SpeechInputResult]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._SpeechRecognitionResultList = {"": "Object_ListMixin_ImmutableListMixin16;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isSpeechRecognitionResult");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.SpeechRecognitionResult]; },
  $isIterable: true,
  $asIterable: function() { return [$.SpeechRecognitionResult]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._StyleSheetList = {"": "Object_ListMixin_ImmutableListMixin17;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[$.intTypeCheck(index)];
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isStyleSheet");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  $isList: true,
  $asList: function() { return [$.StyleSheet]; },
  $isIterable: true,
  $asIterable: function() { return [$.StyleSheet]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Cursor = {"": "Interceptor;"};

$$.CursorWithValue = {"": "Cursor;"};

$$.Database = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isDatabase: true,
  $asDatabase: null
};

$$.IdbFactory = {"": "Interceptor;"};

$$.Index = {"": "Interceptor;"};

$$.KeyRange = {"": "Interceptor;"};

$$.ObjectStore = {"": "Interceptor;",
  add$2: function(receiver, value, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = null;
      if (key != null)
        request = this.$$dom_add$2(receiver, value, key);
      else
        request = this.$$dom_add$1(receiver, value);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $._FutureImpl$immediateError(e, stacktrace, null);
    }

  },
  add$1: function($receiver, value) {
    return this.add$2($receiver, value, null);
  },
  $$dom_add$2: function(receiver, value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return this._$dom_add_1$2(receiver, $._convertDartToNative_PrepareForStructuredClone(value), $._convertDartToNative_PrepareForStructuredClone(key));
    return this._$dom_add_2$1(receiver, $._convertDartToNative_PrepareForStructuredClone(value));
  },
  $$dom_add$1: function($receiver, value) {
    return this.$$dom_add$2($receiver, value, $);
  },
  _$dom_add_1$2: function(receiver, value, key) {
    return receiver.add(value, key);
  },
  _$dom_add_2$1: function(receiver, value) {
    return receiver.add(value);
  },
  $isObjectStore: true,
  $asObjectStore: null
};

$$.OpenDBRequest = {"": "Request;", $isEventTarget: true, $asEventTarget: null, $asObject: null};

$$.Request = {"": "EventTarget;",
  get$result: function(receiver) {
    return $._convertNativeToDart_IDBAny(receiver.result);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  get$onError: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_error.forTarget$1(receiver), "$isStream");
  },
  get$onSuccess: function(receiver) {
    return $.propertyTypeCheck($.EventStreamProvider_success.forTarget$1(receiver), "$isStream");
  }
};

$$.Transaction = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener($.stringTypeCheck(type), $.convertDartClosureToJS($.propertyTypeCheck(listener, "$isEventListener"), 1), useCapture);
  },
  $isTransaction: true,
  $asTransaction: null
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;", $asObject: null};

$$.AltGlyphElement = {"": "TextPositioningElement;", $asObject: null};

$$.Angle = {"": "Interceptor;", $isAngle: true, $asAngle: null};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedAngle = {"": "Interceptor;", $isAnimatedAngle: true, $asAnimatedAngle: null};

$$.AnimatedBoolean = {"": "Interceptor;", $isAnimatedBoolean: true, $asAnimatedBoolean: null};

$$.AnimatedEnumeration = {"": "Interceptor;", $isAnimatedEnumeration: true, $asAnimatedEnumeration: null};

$$.AnimatedInteger = {"": "Interceptor;", $isAnimatedInteger: true, $asAnimatedInteger: null};

$$.AnimatedLength = {"": "Interceptor;", $isAnimatedLength: true, $asAnimatedLength: null};

$$.AnimatedLengthList = {"": "Interceptor;", $isAnimatedLengthList: true, $asAnimatedLengthList: null};

$$.AnimatedNumber = {"": "Interceptor;", $isAnimatedNumber: true, $asAnimatedNumber: null};

$$.AnimatedNumberList = {"": "Interceptor;", $isAnimatedNumberList: true, $asAnimatedNumberList: null};

$$.AnimatedPreserveAspectRatio = {"": "Interceptor;", $isAnimatedPreserveAspectRatio: true, $asAnimatedPreserveAspectRatio: null};

$$.AnimatedRect = {"": "Interceptor;", $isAnimatedRect: true, $asAnimatedRect: null};

$$.AnimatedString = {"": "Interceptor;", $isAnimatedString: true, $asAnimatedString: null};

$$.AnimatedTransformList = {"": "Interceptor;", $isAnimatedTransformList: true, $asAnimatedTransformList: null};

$$.AnimationElement = {"": "SvgElement;", $asObject: null};

$$.CircleElement = {"": "StyledElement;", $asObject: null};

$$.ClipPathElement = {"": "StyledElement;", $asObject: null};

$$.DefsElement = {"": "StyledElement;", $asObject: null};

$$.DescElement = {"": "StyledElement;", $asObject: null};

$$.ElementInstance = {"": "EventTarget;", $isElementInstance: true, $asElementInstance: null};

$$.EllipseElement = {"": "StyledElement;", $asObject: null};

$$.FEBlendElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEColorMatrixElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEComponentTransferElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FECompositeElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEConvolveMatrixElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEDiffuseLightingElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEDisplacementMapElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEImageElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEMergeElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEOffsetElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FEPointLightElement = {"": "SvgElement;"};

$$.FESpecularLightingElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FESpotLightElement = {"": "SvgElement;"};

$$.FETileElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FETurbulenceElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.FilterElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.ForeignObjectElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.GElement = {"": "StyledElement;", $asObject: null};

$$.ImageElement0 = {"": "StyledElement;height=,width=", $asObject: null};

$$.Length = {"": "Interceptor;", $isLength: true, $asLength: null};

$$.LengthList = {"": "Object_ListMixin_ImmutableListMixin18;",
  $index: function(receiver, index) {
    return this.getItem$1(receiver, $.intTypeCheck(index));
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isLength");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isLengthList: true,
  $asLengthList: null,
  $isList: true,
  $asList: function() { return [$.Length]; },
  $isIterable: true,
  $asIterable: function() { return [$.Length]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.LineElement = {"": "StyledElement;", $asObject: null};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;", $asObject: null};

$$.MaskElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.Matrix = {"": "Interceptor;", $isMatrix: true, $asMatrix: null};

$$.MetadataElement = {"": "SvgElement;"};

$$.Number = {"": "Interceptor;", $isNumber: true, $asNumber: null};

$$.NumberList = {"": "Object_ListMixin_ImmutableListMixin19;",
  $index: function(receiver, index) {
    return this.getItem$1(receiver, $.intTypeCheck(index));
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isNumber");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isNumberList: true,
  $asNumberList: null,
  $isList: true,
  $asList: function() { return [$.Number]; },
  $isIterable: true,
  $asIterable: function() { return [$.Number]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PathElement = {"": "StyledElement;", $asObject: null};

$$.PathSeg = {"": "Interceptor;", $isPathSeg: true, $asPathSeg: null};

$$.PathSegArcAbs = {"": "PathSeg;"};

$$.PathSegArcRel = {"": "PathSeg;"};

$$.PathSegClosePath = {"": "PathSeg;"};

$$.PathSegCurvetoCubicAbs = {"": "PathSeg;"};

$$.PathSegCurvetoCubicRel = {"": "PathSeg;"};

$$.PathSegCurvetoCubicSmoothAbs = {"": "PathSeg;"};

$$.PathSegCurvetoCubicSmoothRel = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticAbs = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticRel = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticSmoothAbs = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticSmoothRel = {"": "PathSeg;"};

$$.PathSegLinetoAbs = {"": "PathSeg;"};

$$.PathSegLinetoHorizontalAbs = {"": "PathSeg;"};

$$.PathSegLinetoHorizontalRel = {"": "PathSeg;"};

$$.PathSegLinetoRel = {"": "PathSeg;"};

$$.PathSegLinetoVerticalAbs = {"": "PathSeg;"};

$$.PathSegLinetoVerticalRel = {"": "PathSeg;"};

$$.PathSegList = {"": "Object_ListMixin_ImmutableListMixin20;",
  $index: function(receiver, index) {
    return this.getItem$1(receiver, $.intTypeCheck(index));
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isPathSeg");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isPathSegList: true,
  $asPathSegList: null,
  $isList: true,
  $asList: function() { return [$.PathSeg]; },
  $isIterable: true,
  $asIterable: function() { return [$.PathSeg]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PathSegMovetoAbs = {"": "PathSeg;"};

$$.PathSegMovetoRel = {"": "PathSeg;"};

$$.PatternElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.Point0 = {"": "Interceptor;", $isPoint0: true, $asPoint0: null};

$$.PointList = {"": "Interceptor;", $isPointList: true, $asPointList: null};

$$.PolygonElement = {"": "StyledElement;", $asObject: null};

$$.PolylineElement = {"": "StyledElement;", $asObject: null};

$$.PreserveAspectRatio = {"": "Interceptor;", $isPreserveAspectRatio: true, $asPreserveAspectRatio: null};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.Rect0 = {"": "Interceptor;", $isRect0: true, $asRect0: null};

$$.RectElement = {"": "StyledElement;height=,width=", $asObject: null};

$$.RenderingIntent = {"": "Interceptor;"};

$$.ScriptElement0 = {"": "SvgElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  $asObject: null
};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StringList = {"": "Object_ListMixin_ImmutableListMixin21;",
  $index: function(receiver, index) {
    return this.getItem$1(receiver, $.intTypeCheck(index));
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.stringTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isStringList: true,
  $asStringList: null,
  $isList: true,
  $asList: function() { return [$.JSString]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSString]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.StyleElement0 = {"": "SvgElement;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  },
  $asObject: null
};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$children: function(receiver) {
    return $.listTypeCheck($.FilteredElementList$(receiver, null));
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, value) {
    receiver.id = value;
  },
  $isSvgElement: true,
  $asSvgElement: null
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;height=,width=", $isSvgSvgElement: true, $asSvgSvgElement: null, $asObject: null};

$$.SwitchElement = {"": "StyledElement;", $asObject: null};

$$.SymbolElement = {"": "StyledElement;", $asObject: null};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;", $asObject: null};

$$.TextElement = {"": "TextPositioningElement;", $asObject: null};

$$.TextPathElement = {"": "TextContentElement;", $asObject: null};

$$.TextPositioningElement = {"": "TextContentElement;"};

$$.TitleElement0 = {"": "StyledElement;", $asObject: null};

$$.Transform = {"": "Interceptor;", $isTransform: true, $asTransform: null};

$$.TransformList = {"": "Object_ListMixin_ImmutableListMixin22;",
  $index: function(receiver, index) {
    return this.getItem$1(receiver, $.intTypeCheck(index));
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isTransform");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isTransformList: true,
  $asTransformList: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  $asObject: null,
  $isList: true,
  $asList: function() { return [$.Transform]; },
  $isIterable: true,
  $asIterable: function() { return [$.Transform]; }
};

$$.UnitTypes = {"": "Interceptor;"};

$$.UseElement = {"": "StyledElement;height=,width=", $isUseElement: true, $asUseElement: null, $asObject: null};

$$.ViewElement = {"": "SvgElement;", $asObject: null};

$$.ViewSpec = {"": "Interceptor;", $isViewSpec: true, $asViewSpec: null};

$$.ZoomEvent = {"": "UIEvent;"};

$$._ElementInstanceList = {"": "Object_ListMixin_ImmutableListMixin23;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return this.item$1(receiver, $.intTypeCheck(index));
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isElementInstance");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: true,
  $asList: function() { return [$.ElementInstance]; },
  $isIterable: true,
  $asIterable: function() { return [$.ElementInstance]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._GradientElement = {"": "StyledElement;", $asObject: null};

$$._SVGColor = {"": "Interceptor;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.ByteBuffer = {"": "Interceptor;", $isByteBuffer: true, $asByteBuffer: null};

$$.TypedData = {"": "Interceptor;", $isTypedData: true, $asTypedData: null};

$$.ByteData = {"": "TypedData;"};

$$.Float32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.numTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.numTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.FixedSizeListIterator$(receiver, $.JSNumber), "$isIterator");
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.functionTypeCheck(f)));
  },
  toList$1$growable: function(receiver, growable) {
    return $.listTypeCheck($.List_List$from(receiver, growable, $.JSNumber));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, n, null, null), "$isIterable");
  },
  elementAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    $.numTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.intTypeCheck($.Lists_indexOf(receiver, $.numTypeCheck(element), start, receiver.length));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, $.intTypeCheck(end), $.listSuperNativeTypeCheck(iterable, "$isIterable"), skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(receiver, start, end) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    if (end == null)
      end = receiver.length;
    return $.listTypeCheck($.Lists_getRange(receiver, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isFloat32List: true,
  $asFloat32List: null,
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Float64List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.numTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.numTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.FixedSizeListIterator$(receiver, $.JSNumber), "$isIterator");
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.functionTypeCheck(f)));
  },
  toList$1$growable: function(receiver, growable) {
    return $.listTypeCheck($.List_List$from(receiver, growable, $.JSNumber));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, n, null, null), "$isIterable");
  },
  elementAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    $.numTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.intTypeCheck($.Lists_indexOf(receiver, $.numTypeCheck(element), start, receiver.length));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, $.intTypeCheck(end), $.listSuperNativeTypeCheck(iterable, "$isIterable"), skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(receiver, start, end) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    if (end == null)
      end = receiver.length;
    return $.listTypeCheck($.Lists_getRange(receiver, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int16List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.FixedSizeListIterator$(receiver, $.JSInt), "$isIterator");
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.functionTypeCheck(f)));
  },
  toList$1$growable: function(receiver, growable) {
    return $.listTypeCheck($.List_List$from(receiver, growable, $.JSInt));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, n, null, null), "$isIterable");
  },
  elementAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.intTypeCheck($.Lists_indexOf(receiver, $.intTypeCheck(element), start, receiver.length));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, $.intTypeCheck(end), $.listSuperNativeTypeCheck(iterable, "$isIterable"), skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(receiver, start, end) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    if (end == null)
      end = receiver.length;
    return $.listTypeCheck($.Lists_getRange(receiver, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.FixedSizeListIterator$(receiver, $.JSInt), "$isIterator");
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.functionTypeCheck(f)));
  },
  toList$1$growable: function(receiver, growable) {
    return $.listTypeCheck($.List_List$from(receiver, growable, $.JSInt));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, n, null, null), "$isIterable");
  },
  elementAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.intTypeCheck($.Lists_indexOf(receiver, $.intTypeCheck(element), start, receiver.length));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, $.intTypeCheck(end), $.listSuperNativeTypeCheck(iterable, "$isIterable"), skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(receiver, start, end) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    if (end == null)
      end = receiver.length;
    return $.listTypeCheck($.Lists_getRange(receiver, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.FixedSizeListIterator$(receiver, $.JSInt), "$isIterator");
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.functionTypeCheck(f)));
  },
  toList$1$growable: function(receiver, growable) {
    return $.listTypeCheck($.List_List$from(receiver, growable, $.JSInt));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, n, null, null), "$isIterable");
  },
  elementAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.intTypeCheck($.Lists_indexOf(receiver, $.intTypeCheck(element), start, receiver.length));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, $.intTypeCheck(end), $.listSuperNativeTypeCheck(iterable, "$isIterable"), skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(receiver, start, end) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    if (end == null)
      end = receiver.length;
    return $.listTypeCheck($.Lists_getRange(receiver, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint16List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.FixedSizeListIterator$(receiver, $.JSInt), "$isIterator");
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.functionTypeCheck(f)));
  },
  toList$1$growable: function(receiver, growable) {
    return $.listTypeCheck($.List_List$from(receiver, growable, $.JSInt));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, n, null, null), "$isIterable");
  },
  elementAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.intTypeCheck($.Lists_indexOf(receiver, $.intTypeCheck(element), start, receiver.length));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, $.intTypeCheck(end), $.listSuperNativeTypeCheck(iterable, "$isIterable"), skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(receiver, start, end) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    if (end == null)
      end = receiver.length;
    return $.listTypeCheck($.Lists_getRange(receiver, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.FixedSizeListIterator$(receiver, $.JSInt), "$isIterator");
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.functionTypeCheck(f)));
  },
  toList$1$growable: function(receiver, growable) {
    return $.listTypeCheck($.List_List$from(receiver, growable, $.JSInt));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, n, null, null), "$isIterable");
  },
  elementAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.intTypeCheck($.Lists_indexOf(receiver, $.intTypeCheck(element), start, receiver.length));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, $.intTypeCheck(end), $.listSuperNativeTypeCheck(iterable, "$isIterable"), skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(receiver, start, end) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    if (end == null)
      end = receiver.length;
    return $.listTypeCheck($.Lists_getRange(receiver, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8ClampedList = {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$indexSet$bailout1(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.FixedSizeListIterator$(receiver, $.JSInt), "$isIterator");
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.functionTypeCheck(f)));
  },
  toList$1$growable: function(receiver, growable) {
    return $.listTypeCheck($.List_List$from(receiver, growable, $.JSInt));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, n, null, null), "$isIterable");
  },
  elementAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.intTypeCheck($.Lists_indexOf(receiver, $.intTypeCheck(element), start, receiver.length));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, $.intTypeCheck(end), $.listSuperNativeTypeCheck(iterable, "$isIterable"), skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(receiver, start, end) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    if (end == null)
      end = receiver.length;
    return $.listTypeCheck($.Lists_getRange(receiver, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    $.intTypeCheck(index);
    if (index !== (index | 0))
      return this.$$indexSet$bailout(1, index, value, receiver);
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + index));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    $.intTypeCheck(value);
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.propertyTypeCheck($.FixedSizeListIterator$(receiver, $.JSInt), "$isIterator");
  },
  forEach$1: function(receiver, f) {
    return $.voidTypeCheck($.IterableMixinWorkaround_forEach(receiver, $.functionTypeCheck(f)));
  },
  toList$1$growable: function(receiver, growable) {
    return $.listTypeCheck($.List_List$from(receiver, growable, $.JSInt));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(receiver, n) {
    return $.listSuperNativeTypeCheck($.SubListIterable$(receiver, n, null, null), "$isIterable");
  },
  elementAt$1: function(receiver, index) {
    $.intTypeCheck(index);
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.intTypeCheck($.Lists_indexOf(receiver, $.intTypeCheck(element), start, receiver.length));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw $.wrapException($.StateError$("No elements"));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    $.IterableMixinWorkaround_setRangeList(receiver, start, $.intTypeCheck(end), $.listSuperNativeTypeCheck(iterable, "$isIterable"), skipCount);
  },
  setRange$3: function($receiver, start, end, iterable) {
    return this.setRange$4($receiver, start, end, iterable, 0);
  },
  sublist$2: function(receiver, start, end) {
    $.intTypeCheck(start);
    $.intTypeCheck(end);
    if (end == null)
      end = receiver.length;
    return $.listTypeCheck($.Lists_getRange(receiver, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isUint8List: true,
  $asUint8List: null,
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.AnalyserNode = {"": "AudioNode;"};

$$.AudioBuffer = {"": "Interceptor;length=", $isAudioBuffer: true, $asAudioBuffer: null};

$$.AudioBufferSourceNode = {"": "AudioSourceNode;"};

$$.AudioContext = {"": "EventTarget;", $isAudioContext: true, $asAudioContext: null};

$$.AudioDestinationNode = {"": "AudioNode;", $isAudioDestinationNode: true, $asAudioDestinationNode: null};

$$.AudioListener = {"": "Interceptor;", $isAudioListener: true, $asAudioListener: null};

$$.AudioNode = {"": "Interceptor;"};

$$.AudioParam = {"": "Interceptor;", $isAudioParam: true, $asAudioParam: null};

$$.AudioProcessingEvent = {"": "Event;"};

$$.AudioSourceNode = {"": "AudioNode;"};

$$.BiquadFilterNode = {"": "AudioNode;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.ChannelMergerNode = {"": "AudioNode;"};

$$.ChannelSplitterNode = {"": "AudioNode;"};

$$.ConvolverNode = {"": "AudioNode;"};

$$.DelayNode = {"": "AudioNode;"};

$$.DynamicsCompressorNode = {"": "AudioNode;"};

$$.GainNode = {"": "AudioNode;"};

$$.MediaElementAudioSourceNode = {"": "AudioSourceNode;"};

$$.MediaStreamAudioDestinationNode = {"": "AudioSourceNode;"};

$$.MediaStreamAudioSourceNode = {"": "AudioSourceNode;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.OfflineAudioContext = {"": "AudioContext;", $isEventTarget: true, $asEventTarget: null, $asObject: null};

$$.OscillatorNode = {"": "AudioSourceNode;",
  set$type: function(receiver, v) {
    receiver.type = $.stringTypeCheck(v);
  }
};

$$.PannerNode = {"": "AudioNode;"};

$$.ScriptProcessorNode = {"": "AudioNode;"};

$$.WaveShaperNode = {"": "AudioNode;"};

$$.WaveTable = {"": "Interceptor;"};

$$.ActiveInfo = {"": "Interceptor;"};

$$.Buffer = {"": "Interceptor;", $isBuffer: true, $asBuffer: null};

$$.CompressedTextureAtc = {"": "Interceptor;"};

$$.CompressedTexturePvrtc = {"": "Interceptor;"};

$$.CompressedTextureS3TC = {"": "Interceptor;"};

$$.ContextAttributes = {"": "Interceptor;"};

$$.ContextEvent = {"": "Event;"};

$$.DebugRendererInfo = {"": "Interceptor;"};

$$.DebugShaders = {"": "Interceptor;"};

$$.DepthTexture = {"": "Interceptor;"};

$$.ExtDrawBuffers = {"": "Interceptor;"};

$$.ExtTextureFilterAnisotropic = {"": "Interceptor;"};

$$.Framebuffer = {"": "Interceptor;"};

$$.LoseContext = {"": "Interceptor;"};

$$.OesElementIndexUint = {"": "Interceptor;"};

$$.OesStandardDerivatives = {"": "Interceptor;"};

$$.OesTextureFloat = {"": "Interceptor;"};

$$.OesTextureHalfFloat = {"": "Interceptor;"};

$$.OesVertexArrayObject = {"": "Interceptor;"};

$$.Program = {"": "Interceptor;", $isProgram: true, $asProgram: null};

$$.Renderbuffer = {"": "Interceptor;"};

$$.RenderingContext = {"": "CanvasRenderingContext;",
  activeTexture$1: function(receiver, texture) {
    return receiver.activeTexture(texture);
  },
  attachShader$2: function(receiver, program, shader) {
    return receiver.attachShader(program, $.interceptedTypeCheck(shader, "$isShader"));
  },
  bindBuffer$2: function(receiver, target, buffer) {
    return receiver.bindBuffer(target, buffer);
  },
  bindTexture$2: function(receiver, target, texture) {
    return receiver.bindTexture(target, $.interceptedTypeCheck(texture, "$isTexture"));
  },
  bufferData$3: function(receiver, target, data_OR_size, usage) {
    return receiver.bufferData(target, data_OR_size, usage);
  },
  clear$1: function(receiver, mask) {
    return receiver.clear(mask);
  },
  clearColor$4: function(receiver, red, green, blue, alpha) {
    return receiver.clearColor(red, green, blue, alpha);
  },
  compileShader$1: function(receiver, shader) {
    return receiver.compileShader(shader);
  },
  createProgram$0: function(receiver) {
    return receiver.createProgram();
  },
  createShader$1: function(receiver, type) {
    return receiver.createShader(type);
  },
  cullFace$1: function(receiver, mode) {
    return receiver.cullFace(mode);
  },
  depthFunc$1: function(receiver, func) {
    return receiver.depthFunc(func);
  },
  depthRange$2: function(receiver, zNear, zFar) {
    return receiver.depthRange(zNear, zFar);
  },
  drawElements$4: function(receiver, mode, count, type, offset) {
    return receiver.drawElements(mode, $.intTypeCheck(count), type, $.intTypeCheck(offset));
  },
  enable$1: function(receiver, cap) {
    return receiver.enable(cap);
  },
  enableVertexAttribArray$1: function(receiver, index) {
    return receiver.enableVertexAttribArray(index);
  },
  frontFace$1: function(receiver, mode) {
    return receiver.frontFace(mode);
  },
  getAttribLocation$2: function(receiver, program, $name) {
    return receiver.getAttribLocation(program, $name);
  },
  getProgramInfoLog$1: function(receiver, program) {
    return receiver.getProgramInfoLog(program);
  },
  getProgramParameter$2: function(receiver, program, pname) {
    return receiver.getProgramParameter(program, pname);
  },
  getShaderInfoLog$1: function(receiver, shader) {
    return receiver.getShaderInfoLog(shader);
  },
  getShaderParameter$2: function(receiver, shader, pname) {
    return receiver.getShaderParameter(shader, pname);
  },
  getUniformLocation$2: function(receiver, program, $name) {
    return receiver.getUniformLocation(program, $name);
  },
  isContextLost$0: function(receiver) {
    return receiver.isContextLost();
  },
  linkProgram$1: function(receiver, program) {
    return receiver.linkProgram(program);
  },
  pixelStorei$2: function(receiver, pname, param) {
    return receiver.pixelStorei(pname, param);
  },
  shaderSource$2: function(receiver, shader, string) {
    return receiver.shaderSource(shader, string);
  },
  texImage2D$9: function(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
    var t1, t2, t3;
    t1 = $ === format;
    if (t1)
      format = null;
    t2 = $ === type;
    if (t2)
      type = null;
    t3 = $ === pixels;
    if (t3)
      pixels = null;
    if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "number" && Math.floor(border_OR_canvas_OR_image_OR_pixels_OR_video) === border_OR_canvas_OR_image_OR_pixels_OR_video || border_OR_canvas_OR_image_OR_pixels_OR_video == null) {
      this._texImage2D_1$9(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels);
      return;
    }
    if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!$.getInterceptor(border_OR_canvas_OR_image_OR_pixels_OR_video).$isImageData || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
      this._texImage2D_2$6(receiver, target, level, internalformat, format_OR_width, height_OR_type, receiver._convertDartToNative_ImageData$1(border_OR_canvas_OR_image_OR_pixels_OR_video));
      return;
    }
    if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!$.getInterceptor(border_OR_canvas_OR_image_OR_pixels_OR_video).$isImageElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
      this._texImage2D_3$6(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
      return;
    }
    if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!$.getInterceptor(border_OR_canvas_OR_image_OR_pixels_OR_video).$isCanvasElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
      this._texImage2D_4$6(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
      return;
    }
    if ((typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!$.getInterceptor(border_OR_canvas_OR_image_OR_pixels_OR_video).$isVideoElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null) && t1 && t2 && t3) {
      this._texImage2D_5$6(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
      return;
    }
    throw $.wrapException($.ArgumentError$("Incorrect number or type of arguments"));
  },
  texImage2D$6: function($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video) {
    return this.texImage2D$9($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, $, $, $);
  },
  _texImage2D_1$9: function(receiver, target, level, internalformat, width, height, border, format, type, pixels) {
    return receiver.texImage2D(target, level, internalformat, width, height, $.intTypeCheck(border), format, type, pixels);
  },
  _texImage2D_2$6: function(receiver, target, level, internalformat, format, type, pixels) {
    return receiver.texImage2D(target, level, internalformat, format, type, pixels);
  },
  _texImage2D_3$6: function(receiver, target, level, internalformat, format, type, image) {
    return receiver.texImage2D(target, level, internalformat, format, type, $.interceptedTypeCheck(image, "$isImageElement"));
  },
  _texImage2D_4$6: function(receiver, target, level, internalformat, format, type, canvas) {
    return receiver.texImage2D(target, level, internalformat, format, type, $.interceptedTypeCheck(canvas, "$isCanvasElement"));
  },
  _texImage2D_5$6: function(receiver, target, level, internalformat, format, type, video) {
    return receiver.texImage2D(target, level, internalformat, format, type, $.interceptedTypeCheck(video, "$isVideoElement"));
  },
  texParameteri$3: function(receiver, target, pname, param) {
    return receiver.texParameteri(target, pname, param);
  },
  uniform1i$2: function(receiver, $location, x) {
    return receiver.uniform1i($location, x);
  },
  uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
    return receiver.uniformMatrix4fv($location, transpose, array);
  },
  useProgram$1: function(receiver, program) {
    return receiver.useProgram(program);
  },
  vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
    return receiver.vertexAttribPointer(indx, size, type, normalized, stride, offset);
  },
  viewport$4: function(receiver, x, y, width, height) {
    return receiver.viewport(x, y, $.intTypeCheck(width), $.intTypeCheck(height));
  },
  $isRenderingContext: true,
  $asRenderingContext: null
};

$$.Shader = {"": "Interceptor;", $isShader: true, $asShader: null};

$$.ShaderPrecisionFormat = {"": "Interceptor;"};

$$.Texture = {"": "Interceptor;", $isTexture: true, $asTexture: null};

$$.UniformLocation = {"": "Interceptor;", $isUniformLocation: true, $asUniformLocation: null};

$$.VertexArrayObject = {"": "Interceptor;"};

$$.SqlDatabase = {"": "Interceptor;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

$$.SqlResultSet = {"": "Interceptor;"};

$$.SqlResultSetRowList = {"": "Object_ListMixin_ImmutableListMixin24;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return $.convertNativeToDart_Dictionary(this._item_1$1(receiver, $.intTypeCheck(index)));
  },
  $indexSet: function(receiver, index, value) {
    $.intTypeCheck(index);
    $.interceptedTypeCheck(value, "$isMap");
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    $.intTypeCheck(value);
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  _item_1$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isSqlResultSetRowList: true,
  $asSqlResultSetRowList: null,
  $isList: true,
  $asList: function() { return [$.Map]; },
  $isIterable: true,
  $asIterable: function() { return [$.Map]; },
  $asObject: null,
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SqlTransaction = {"": "Interceptor;"};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true,
  $asObject: null
};

// Bound closures
$$.Bound__setValue__FutureImpl = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true
};

$$.Bound__setError__FutureImpl = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $is_ErrorCallback: true,
  $isRequestAnimationFrameCallback: true,
  $isEventListener: true,
  $isGameLoopUpdateFunction: true,
  $isGameLoopRenderFunction: true,
  $isGameLoopResizeFunction: true,
  $isGameLoopFullscreenChangeFunction: true,
  $isGameLoopPointerLockChangeFunction: true
};

$$.Bound__requestAnimationFrame_GameLoopHtml = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  },
  $is_FutureOnError: true,
  $isRequestAnimationFrameCallback: true
};

$$.Bound__fullscreenChange_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__fullscreenError_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__touchStartEvent_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__touchMoveEvent_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__touchEndEvent_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__keyDown_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__keyUp_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__mouseDown_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__mouseUp_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__mouseMove_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__mouseWheel_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__resize_GameLoopHtml = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__onClick_PointerLock = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__onPointerLockChange_PointerLock = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound__onContainerMouseDown_Stats = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  },
  $is_FutureOnError: true,
  $isEventListener: true
};

$$.Bound_children_ScriptProfileNode = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  },
  $isVoidCallback: true
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (srcStart !== (srcStart | 0))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.getInterceptor(dst).$isJavaScriptIndexingBehavior)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (dstStart !== (dstStart | 0))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (count !== (count | 0))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = $.getInterceptor$asx(src); t2 = $.getInterceptor$n(i), t2.$ge(i, srcStart); i = $.intTypeCheck(t2.$sub(i, 1)), --j) {
      t3 = t1.$index(src, i);
      if (j >>> 0 !== j || j >= dst.length)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; t2 = $.getInterceptor$n(i), t2.$lt(i, srcStart + count); i = $.intTypeCheck(t2.$add(i, 1)), ++j) {
      t3 = t1.$index(src, i);
      if (j >>> 0 !== j || j >= dst.length)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count, i, j) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$n(srcStart);
    default:
      var t1, t2, t3, t4;
      if (state0 === 3 || state0 === 2 || state0 === 0 && t1.$lt(srcStart, dstStart))
        switch (state0) {
          case 0:
            i = t1.$add(srcStart, count) - 1;
            $.intTypeCheck(i);
          case 2:
            state0 = 0;
            j = $.$add$ns(dstStart, count) - 1;
            $.intTypeCheck(j);
          case 3:
            state0 = 0;
            t1 = $.getInterceptor$asx(src);
            t2 = $.getInterceptor$ax(dst);
            for (; t3 = $.getInterceptor$n(i), t3.$ge(i, srcStart); i = $.intTypeCheck(t3.$sub(i, 1)), j = $.intTypeCheck($.$sub$n(j, 1)))
              t2.$indexSet(dst, j, t1.$index(src, i));
        }
      else
        for (t2 = $.getInterceptor$asx(src), t3 = $.getInterceptor$ax(dst), j = dstStart, i = srcStart; t4 = $.getInterceptor$n(i), t4.$lt(i, t1.$add(srcStart, count)); i = $.intTypeCheck(t4.$add(i, 1)), j = $.intTypeCheck($.$add$ns(j, 1)))
          t3.$indexSet(dst, j, t2.$index(src, i));
  }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; $.$lt$n(i, endIndex); ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.boolConversionCheck($.$eq(a[i], element)))
      return i;
  }
  return -1;
};

$.SubListIterable$ = function(_iterable, _start, _endOrLength, E) {
  var t1 = new $.SubListIterable($.listSuperNativeTypeCheck(_iterable, "$isIterable"), $.intTypeCheck(_start), _endOrLength);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.ListIterator$ = function(iterable, E) {
  var t1;
  $.listSuperNativeTypeCheck(iterable, "$isIterable");
  t1 = $.get$length$asx(iterable);
  t1 = new $.ListIterator($.listSuperNativeTypeCheck(iterable, "$isIterable"), $.intTypeCheck(t1), 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable($.listSuperNativeTypeCheck(_iterable, "$isIterable"), _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f, S, T) {
  var t1 = new $.MappedIterator(null, $.propertyTypeCheck(_iterator, "$isIterator"), _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable($.listSuperNativeTypeCheck(_iterable, "$isIterable"), _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f, E) {
  var t1 = new $.WhereIterator($.propertyTypeCheck(_iterator, "$isIterator"), _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.SkipIterable$ = function(_iterable, _skipCount, E) {
  var t1 = new $.SkipIterable($.listSuperNativeTypeCheck(_iterable, "$isIterable"), $.intTypeCheck(_skipCount));
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterable$2(_iterable, _skipCount, E);
  return t1;
};

$.SkipIterator$ = function(_iterator, _skipCount, E) {
  var t1 = new $.SkipIterator($.propertyTypeCheck(_iterator, "$isIterator"), $.intTypeCheck(_skipCount));
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterator$2(_iterator, _skipCount, E);
  return t1;
};

$.IterableMixinWorkaround_forEach = function(iterable, f) {
  var t1;
  $.functionTypeCheck(f);
  for (t1 = $.get$iterator$ax(iterable); $.boolConversionCheck(t1.moveNext$0());)
    f.call$1(t1.get$current());
};

$.IterableMixinWorkaround__rangeCheck = function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) || t1.$gt(start, $.get$length$asx(list)))
    throw $.wrapException($.RangeError$range(start, 0, $.get$length$asx(list)));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, $.get$length$asx(list)))
    throw $.wrapException($.RangeError$range(end, start, $.get$length$asx(list)));
};

$.IterableMixinWorkaround_setRangeList = function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList, t1;
  $.listTypeCheck(list);
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.intTypeCheck($.$sub$n(end, start));
  if ($length === 0)
    return;
  if ($.$lt$n(skipCount, 0))
    throw $.wrapException($.ArgumentError$(skipCount));
  if (typeof from === "object" && from !== null && (from.constructor === Array || !!$.getInterceptor(from).$isList)) {
    otherStart = skipCount;
    otherList = from;
  } else {
    t1 = $.skip$1$ax(from, skipCount);
    otherList = $.listTypeCheck(t1.toList$1$growable(t1, false));
    otherStart = 0;
  }
  if ($.JSNumber_methods.$gt($.$add$ns(otherStart, $length), $.get$length$asx(otherList)))
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
};

$.ToString__emitValue = function(i, result, visiting) {
  var t1, isList, t2, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  result.write$1(result, isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(i), first = true; $.boolConversionCheck(t2.moveNext$0()); first = false) {
    e = t2.get$current();
    if (!first)
      result.write$1(result, ", ");
    $.ToString__emitObject(e, result, visiting);
  }
  result.write$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  $.propertyTypeCheck(result, "$isStringBuffer");
  $.listTypeCheck(visiting);
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable)) {
    o;
    if ($.ToString__containsRef(visiting, o))
      result.write$1(result, typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  } else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1(result, "{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    result.write$1(result, o);
};

$.ToString__containsRef = function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); $.boolConversionCheck(t1.moveNext$0());)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString__emitPair = function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1(result, "{");
  t1.first_0 = true;
  $.forEach$1$ax(m, new $.ToString__emitPair_closure(t1, result, visiting));
  result.write$1(result, "}");
  t2.removeLast$0(visiting);
};

$.HashMap__findBucketIndex = function(bucket, key) {
  var $length, i, t1;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, $length); i = $.intTypeCheck(t1.$add(i, 2)))
    if ($.boolConversionCheck($.$eq(bucket[i], key)))
      return i;
  return -1;
};

$.HashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMapKeyIterator$ = function(_map, _keys, E) {
  var t1 = new $.HashMapKeyIterator(_map, _keys, 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMap__findBucketIndex = function(bucket, key) {
  var $length, i, t1;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, $length); i = $.intTypeCheck(t1.$add(i, 1)))
    if ($.boolConversionCheck($.$eq($.propertyTypeCheck(bucket[i], "$isLinkedHashMapCell")._key, key)))
      return i;
  return -1;
};

$.LinkedHashMapCell$ = function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
};

$.LinkedHashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.LinkedHashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMapKeyIterator$ = function(_map, _modifications, E) {
  var t1 = new $.LinkedHashMapKeyIterator(_map, _modifications, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedHashMapKeyIterator$2(_map, _modifications, E);
  return t1;
};

$.getInterceptor = function(object) {
};

$.getDispatchProperty = function(object) {
  return object[$.dispatchPropertyName];
};

$.setDispatchProperty = function(object, value) {
  var t1 = $.dispatchPropertyName;
  $.stringTypeCheck(t1);
  Object.defineProperty(object, t1, {value: value, enumerable: false, writable: true, configurable: true});
};

$.getNativeInterceptor = function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
};

$.initializeDispatchProperty = function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.initializeDispatchProperty$bailout = function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, $.propertyTypeCheck(_port, "$isSendPort"));
};

$._callInIsolate = function(isolate, $function) {
  var result = $.propertyTypeCheck(isolate, "$is_IsolateContext").eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($.boolConversionCheck($globalState.isWorker))
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, $.interceptedTypeCheck(null, "$isMap"), null, $.interceptedTypeCheck(null, "$isMap"));
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, $.interceptedTypeCheck(null, "$isMap"), null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.propertyTypeCheck($.Queue_Queue($._IsolateEvent), "$isQueue"), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent($.propertyTypeCheck(isolate, "$is_IsolateContext"), $.functionTypeCheck(fn), message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = $.intTypeCheck(t1.$index(msg, "id"));
      t2 = t1.$index(msg, "functionName");
      $.stringTypeCheck(t2);
      entryPoint = $.functionTypeCheck($[t2]);
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      t1 = $globalState.topEventLoop.events;
      t2 = $._IsolateEvent$(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start");
      t2;
      t1._add$1(t1, t2);
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if ($.propertyTypeCheck(t1.$index(msg, "port"), "$isSendPort") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($.boolConversionCheck($globalState.isWorker)) {
        $globalState;
        t1 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        $.get$globalThis().postMessage(t1);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($.boolConversionCheck($globalState.isWorker)) {
    $globalState;
    t1 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    $.get$globalThis().postMessage(t1);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  $._WorkerStub_methods.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = $.intTypeCheck(workerId + 1);
  $._WorkerStub_methods.set$id(worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  $.intTypeCheck(isolateId);
  return new $._NativeJsSendPort($.propertyTypeCheck(_receivePort, "$isReceivePortImpl"), isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  $.intTypeCheck(isolateId);
  return new $._WorkerSendPort($.intTypeCheck(_workerId), $.intTypeCheck(_receivePortId), isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.intTypeCheck($.$add$ns(t1, 1));
  t1 = new $.ReceivePortImpl($.intTypeCheck(t1), null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder, t1;
  $.functionTypeCheck(callback);
  finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  t1 = finder.ports;
  $.listSuperNativeTypeCheck(t1, "$isIterable");
  $.propertyTypeCheck($._FutureImpl__FutureImpl$wait(t1, $.JSArray), "$isFuture").then$1(new $._waitForPendingPorts_closure(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder($.listTypeCheck([]), t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($.boolConversionCheck($globalState.get$needSerialization()))
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($.boolConversionCheck($globalState.get$needSerialization()))
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer($.interceptedTypeCheck(null, "$isMap"));
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, $.functionTypeCheck(callback));
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkGrowable = function(list, reason) {
  if (!!list.fixed$length)
    throw $.wrapException($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = $.intTypeCheck(object.$identityHash);
  if (hash == null) {
    hash = $.intTypeCheck($.$add$ns($.Primitives_hashCodeSeed, 1));
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  $.stringTypeCheck(string);
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.wrapException($.FormatException$($.stringTypeCheck(string)));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  $.functionTypeCheck(handleError);
  if (handleError == null)
    handleError = $.functionTypeCheck($.Primitives__throwFormatException);
  if (typeof source !== "string")
    $.throwExpression($.ArgumentError$(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        throw $.ioore(2);
      if (match[2] != null)
        return $.intTypeCheck(parseInt(source, 16));
      if (3 >= t1)
        throw $.ioore(3);
      if (match[3] != null)
        return $.intTypeCheck(parseInt(source, 10));
      return $.intTypeCheck(handleError.call$1(source));
    }
    radix = 10;
  } else {
    throw $.wrapException($.ArgumentError$("Radix is not an integer"));
    if ($.JSNull_methods.$lt(radix, 2) || $.JSNull_methods.$gt(radix, 36))
      throw $.wrapException($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    if (match != null) {
      t1 = false;
      if (t1)
        return $.intTypeCheck(parseInt(source, 10));
      if (!$.JSNull_methods.$lt(radix, 10)) {
        if (3 >= match.length)
          throw $.ioore(3);
        t1 = match[3] == null;
      } else
        t1 = true;
      if (t1) {
        if ($.JSNull_methods.$le(radix, 10)) {
          if (typeof radix !== "number")
            throw $.iae(radix);
          maxCharCode = $.intTypeCheck(48 + radix - 1);
        } else {
          if (typeof radix !== "number")
            throw $.iae(radix);
          maxCharCode = $.intTypeCheck(97 + radix - 10 - 1);
        }
        if (maxCharCode !== (maxCharCode | 0))
          return $.Primitives_parseInt$bailout(1, source, handleError, radix, match, maxCharCode);
        if (1 >= match.length)
          throw $.ioore(1);
        digitsPart = $.toLowerCase$0$s(match[1]);
        for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, digitsPart.length); i = $.intTypeCheck(t1.$add(i, 1)))
          if ($.JSString_methods.codeUnitAt$1(digitsPart, i) > maxCharCode)
            return $.intTypeCheck(handleError.call$1(source));
      }
    }
  }
  if (match == null)
    return $.intTypeCheck(handleError.call$1(source));
  return $.intTypeCheck(parseInt(source, radix));
};

$.Primitives_parseInt$bailout = function(state0, source, handleError, radix, match, maxCharCode) {
  switch (state0) {
    case 0:
      $.functionTypeCheck(handleError);
      if (handleError == null)
        handleError = $.functionTypeCheck($.Primitives__throwFormatException);
      if (typeof source !== "string")
        $.throwExpression($.ArgumentError$(source));
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    case 1:
      var t1, digitsPart, i;
      if (state0 === 0 && radix == null) {
        if (match != null) {
          t1 = match.length;
          if (2 >= t1)
            throw $.ioore(2);
          if (match[2] != null)
            return $.intTypeCheck(parseInt(source, 16));
          if (3 >= t1)
            throw $.ioore(3);
          if (match[3] != null)
            return $.intTypeCheck(parseInt(source, 10));
          return $.intTypeCheck(handleError.call$1(source));
        }
        radix = 10;
      } else
        switch (state0) {
          case 0:
            throw $.wrapException($.ArgumentError$("Radix is not an integer"));
            if ($.JSNull_methods.$lt(radix, 2) || $.JSNull_methods.$gt(radix, 36))
              throw $.wrapException($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
          case 1:
            if (state0 === 1 || state0 === 0 && match != null)
              switch (state0) {
                case 0:
                  t1 = false;
                  if (t1)
                    return $.intTypeCheck(parseInt(source, 10));
                  if (!$.JSNull_methods.$lt(radix, 10)) {
                    if (3 >= match.length)
                      throw $.ioore(3);
                    t1 = match[3] == null;
                  } else
                    t1 = true;
                case 1:
                  if (state0 === 1 || state0 === 0 && t1)
                    switch (state0) {
                      case 0:
                        if ($.JSNull_methods.$le(radix, 10)) {
                          if (typeof radix !== "number")
                            throw $.iae(radix);
                          maxCharCode = $.intTypeCheck(48 + radix - 1);
                        } else {
                          if (typeof radix !== "number")
                            throw $.iae(radix);
                          maxCharCode = $.intTypeCheck(97 + radix - 10 - 1);
                        }
                      case 1:
                        state0 = 0;
                        if (1 >= match.length)
                          throw $.ioore(1);
                        digitsPart = $.toLowerCase$0$s(match[1]);
                        for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, digitsPart.length); i = $.intTypeCheck(t1.$add(i, 1)))
                          if ($.JSInt_methods.$gt($.JSString_methods.codeUnitAt$1(digitsPart, i), maxCharCode))
                            return $.intTypeCheck(handleError.call$1(source));
                    }
              }
        }
      if (match == null)
        return $.intTypeCheck(handleError.call$1(source));
      return $.intTypeCheck(parseInt(source, radix));
  }
};

$.Primitives_parseDouble = function(source, handleError) {
  var result;
  $.stringTypeCheck(source);
  $.functionTypeCheck(handleError);
  if (typeof source !== "string")
    $.throwExpression($.ArgumentError$(source));
  if (handleError == null)
    handleError = $.functionTypeCheck($.Primitives__throwFormatException);
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(source))
    return $.doubleTypeCheck(handleError.call$1(source));
  result = parseFloat(source);
  if ($.JSNumber_methods.get$isNaN(result) && source !== "NaN")
    return $.doubleTypeCheck(handleError.call$1(source));
  return $.doubleTypeCheck(result);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.stringTypeCheck($.constructorNameFallback(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives_numMicroseconds = function() {
  if (typeof window != "undefined" && window !== null) {
    var performance = window.performance;
    if (performance != null && typeof performance.webkitNow == "function")
      return $.JSNumber_methods.floor$0(1000 * performance.webkitNow());
  }
  return 1000 * Date.now();
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, result, i, subarray, t2;
  $.listTypeCheck(array);
  end = $.get$length$asx(array);
  $.intTypeCheck(end);
  if (end !== (end | 0))
    return $.Primitives__fromCharCodeApply$bailout(1, array, end);
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      if (t2 < end)
        ;
      else
        t2 = end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives__fromCharCodeApply$bailout = function(state0, array, end) {
  var t1, result, i, subarray, t2;
  for (t1 = $.getInterceptor$n(end), result = "", i = 0; $.JSNumber_methods.$lt(i, end); i += 500) {
    if (t1.$le(end, 500))
      subarray = array;
    else {
      t2 = i + 500;
      t2 = $.JSNumber_methods.$lt(t2, end) ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, t2, i;
  a = $.listTypeCheck([]);
  for (t1 = $.get$iterator$ax(codePoints), t2 = $.getInterceptor$ax(a); $.boolConversionCheck(t1.moveNext$0());) {
    i = t1.get$current();
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException($.ArgumentError$(i));
    else
      i;
    if (i <= 65535)
      t2.add$1(a, i);
    else if (i <= 1114111) {
      t2.add$1(a, 55296 + ($.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      t2.add$1(a, 56320 + (i & 1023));
    } else
      throw $.wrapException($.ArgumentError$(i));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, i;
  for (t1 = $.get$iterator$ax(charCodes); $.boolConversionCheck(t1.moveNext$0());) {
    i = t1.get$current();
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException($.ArgumentError$(i));
    else
      i;
    if (i < 0)
      throw $.wrapException($.ArgumentError$(i));
    if (i > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  var t1;
  if ($.boolConversionCheck(receiver.isUtc)) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCFullYear() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getFullYear() + 0;
  }
  return t1;
};

$.Primitives_getMonth = function(receiver) {
  var t1;
  if ($.boolConversionCheck(receiver.isUtc)) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCMonth() + 1;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getMonth() + 1;
  }
  return t1;
};

$.Primitives_getDay = function(receiver) {
  var t1;
  if ($.boolConversionCheck(receiver.isUtc)) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCDate() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getDate() + 0;
  }
  return t1;
};

$.Primitives_getHours = function(receiver) {
  var t1;
  if ($.boolConversionCheck(receiver.isUtc)) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCHours() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getHours() + 0;
  }
  return t1;
};

$.Primitives_getMinutes = function(receiver) {
  var t1;
  if ($.boolConversionCheck(receiver.isUtc)) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCMinutes() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getMinutes() + 0;
  }
  return t1;
};

$.Primitives_getSeconds = function(receiver) {
  var t1;
  if ($.boolConversionCheck(receiver.isUtc)) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCSeconds() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getSeconds() + 0;
  }
  return t1;
};

$.Primitives_getMilliseconds = function(receiver) {
  var t1;
  if ($.boolConversionCheck(receiver.isUtc)) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCMilliseconds() + 0;
  } else {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getMilliseconds() + 0;
  }
  return t1;
};

$.Primitives_getProperty = function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
};

$.Primitives_setProperty = function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
};

$.iae = function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
};

$.ioore = function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression($.ArgumentError$(index));
  throw $.wrapException($.RangeError$value(index));
};

$.wrapException = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException);
  else
    wrapper.stack = $.stringTypeCheck(new Error().stack);
  return wrapper;
};

$.throwExpression = function(ex) {
  throw $.wrapException(ex);
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    $.stringTypeCheck(message);
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = $.boolConversionCheck(t1.$eq(type, "property_not_function")) || $.boolConversionCheck(t1.$eq(type, "called_non_callable")) || $.boolConversionCheck(t1.$eq(type, "non_object_property_call")) || $.boolConversionCheck(t1.$eq(type, "non_object_property_load"));
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.boolConversionCheck($.$eq(type, "undefined_method")))
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1) {
      message;
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $._StackTrace$(exception.stack);
};

$._StackTrace$ = function(_stack) {
  return new $._StackTrace(_stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = $.stringTypeCheck(iterator.get$current());
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  $.functionTypeCheck(closure);
  $.intTypeCheck(numberOfArguments);
  if (numberOfArguments === 0)
    return $._callInIsolate(isolate, new $.invokeClosure_closure(closure));
  else if (numberOfArguments === 1)
    return $._callInIsolate(isolate, new $.invokeClosure_closure0(closure, arg1));
  else if (numberOfArguments === 2)
    return $._callInIsolate(isolate, new $.invokeClosure_closure1(closure, arg1, arg2));
  else
    throw $.wrapException($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.boolConversionCheck = function(value) {
  $.boolTypeCheck(value);
  $.assertHelper(value != null);
  return value;
};

$.stringTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "string")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "String"));
};

$.doubleTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "number")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "double"));
};

$.numTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "number")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "num"));
};

$.boolTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "boolean")
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "bool"));
};

$.functionTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "function" || typeof value === "object" && value !== null && !!$.getInterceptor(value).$isFunction)
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "Function"));
};

$.intTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "number" && Math.floor(value) === value)
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "int"));
};

$.propertyTypeCheck = function(value, property) {
  var t1;
  if (value == null)
    return value;
  if (!!value[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.TypeErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  var t1;
  if (value == null || !!value[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.interceptedTypeCheck = function(value, property) {
  var t1;
  if (value == null)
    return value;
  if (typeof value === "object" && $.getInterceptor(value)[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.TypeErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
};

$.interceptedTypeCast = function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && $.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.listTypeCheck = function(value) {
  if (value == null)
    return value;
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isList))
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "List"));
};

$.listSuperNativeTypeCheck = function(value, property) {
  var t1;
  if (value == null)
    return value;
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isList))
    return value;
  if ($.getInterceptor(value)[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.TypeErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
};

$.voidTypeCheck = function(value) {
  if (value == null)
    return value;
  throw $.wrapException($.TypeErrorImplementation$(value, "void"));
};

$.TypeErrorImplementation$ = function(value, type) {
  return new $.TypeErrorImplementation("type '" + $.S($.Primitives_objectTypeName(value)) + "' is not a subtype of type '" + type + "'");
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + $.S(actualType) + " to incompatible type " + expectedType);
};

$.assertHelper = function(condition) {
  if (typeof condition === "function" || typeof condition === "object" && condition !== null && !!$.getInterceptor(condition).$isFunction)
    condition = condition.call$0();
  if (typeof condition !== "boolean")
    throw $.wrapException($.TypeErrorImplementation$(condition, "bool"));
  if (!condition)
    throw $.wrapException($.AssertionError$());
};

$.throwCyclicInit = function(staticName) {
  throw $.wrapException($.RuntimeError$("Cyclic initialization for static " + $.S($.stringTypeCheck(staticName))));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  var t1 = typeInfo.constructor === Array;
  $.assertHelper(t1);
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.getRuntimeTypeInfo(target);
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments == null ? null : $arguments[index];
};

$.runtimeTypeToString = function(type) {
  if (typeof type !== "string" && (typeof type !== "object" || type === null || type.constructor !== Array && !$.getInterceptor(type).$isJavaScriptIndexingBehavior))
    return $.runtimeTypeToString$bailout(1, type);
  if (type.constructor === Array) {
    $.listTypeCheck(type);
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
};

$.runtimeTypeToString$bailout = function(state0, type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array) {
    $.listTypeCheck(type);
    return $.$index$asx(type, 0).builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, t1;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.getInterceptor(types).$isJavaScriptIndexingBehavior))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; $.$lt$n(index, types.length); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    if (index >>> 0 !== index || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    t1 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t1;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, t2, argument, t3;
  t1 = $.getInterceptor(types);
  if (types == null)
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; t2 = $.getInterceptor$n(index), t2.$lt(index, t1.get$length(types)); index = $.intTypeCheck(t2.$add(index, 1))) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    t3 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t3;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.checkSubtype = function(object, isField, checks, asField) {
  var $arguments, interceptor, isSubclass, substitution;
  if (object == null)
    return false;
  $arguments = $.getRuntimeTypeInfo(object);
  interceptor = typeof object == "function" ? object : $.getInterceptor(object);
  isSubclass = $.boolTypeCheck(interceptor[isField]);
  if (isSubclass == null || !$.boolConversionCheck(isSubclass))
    return false;
  substitution = interceptor[asField];
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $.areSubtypes($arguments, checks);
};

$.areSubtypes = function(s, t) {
  var t1, t2, len, i, t3;
  $.listTypeCheck(s);
  $.listTypeCheck(t);
  t1 = $.getInterceptor(s);
  t2 = s != null;
  if (s == null || t == null)
    return true;
  $.assertHelper(t2 && s.constructor === Array);
  t2 = $.getInterceptor(t);
  $.assertHelper(t != null && t.constructor === Array);
  $.assertHelper($.$eq(t1.get$length(s), t2.get$length(t)));
  len = t1.get$length(s);
  $.intTypeCheck(len);
  if (len !== (len | 0))
    return $.areSubtypes$bailout(1, s, t, t1, len, t2);
  for (i = 0; t3 = $.getInterceptor$n(i), t3.$lt(i, len); i = $.intTypeCheck(t3.$add(i, 1)))
    if (!$.isSubtype(t1.$index(s, i), t2.$index(t, i)))
      return false;
  return true;
};

$.areSubtypes$bailout = function(state0, s, t, t1, len, t2) {
  var i, t3;
  for (i = 0; t3 = $.getInterceptor$n(i), t3.$lt(i, len); i = $.intTypeCheck(t3.$add(i, 1)))
    if (!$.isSubtype(t1.$index(s, i), t2.$index(t, i)))
      return false;
  return true;
};

$.isSubtype = function(s, t) {
  var t1, typeOfS, typeOfT, substitution, $arguments;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !$.getInterceptor(s).$isJavaScriptIndexingBehavior))
    return $.isSubtype$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !$.getInterceptor(t).$isJavaScriptIndexingBehavior))
    return $.isSubtype$bailout(1, s, t);
  if (s == null || t == null)
    return true;
  if (s === t)
    return true;
  if (s.constructor === Array) {
    if (0 >= s.length)
      throw $.ioore(0);
    t1 = s[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return $.isSubtype$bailout(2, s, t, true, t1);
    typeOfS = t1;
  } else
    typeOfS = s;
  if (t.constructor === Array) {
    if (0 >= t.length)
      throw $.ioore(0);
    t1 = t[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return $.isSubtype$bailout(3, s, t, true, true, typeOfS, t1);
    typeOfT = t1;
  } else
    typeOfT = t;
  if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
  if (!(!(s.constructor === Array) && substitution == null))
    t1 = !(t.constructor === Array);
  else
    t1 = true;
  if (t1)
    return true;
  $arguments = s.constructor === Array ? s.slice(1) : null;
  t1 = t.constructor === Array ? t.slice(1) : null;
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $.areSubtypes($arguments, t1);
};

$.isSubtype$bailout = function(state0, s, t, t1, t2, typeOfS, t3) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (s == null || t == null)
        return true;
      if (s === t)
        return true;
      t1 = s != null;
    case 2:
      if (state0 === 2 || state0 === 0 && t1 && s.constructor === Array)
        switch (state0) {
          case 0:
            t2 = $.$index$asx(s, 0);
          case 2:
            state0 = 0;
            typeOfS = t2;
        }
      else
        typeOfS = s;
      t2 = t != null;
    case 3:
      var typeOfT, substitution, $arguments;
      if (state0 === 3 || state0 === 0 && t2 && t.constructor === Array)
        switch (state0) {
          case 0:
            t3 = $.$index$asx(t, 0);
          case 3:
            state0 = 0;
            typeOfT = t3;
        }
      else
        typeOfT = t;
      if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
        return false;
      substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
      if (!(!(t1 && s.constructor === Array) && substitution == null))
        t3 = !(t2 && t.constructor === Array);
      else
        t3 = true;
      if (t3)
        return true;
      $arguments = t1 && s.constructor === Array ? s.slice(1) : null;
      t1 = t2 && t.constructor === Array ? t.slice(1) : null;
      if (substitution != null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = substitution.apply(null, $arguments);
      return $.areSubtypes($arguments, t1);
  }
};

$._convertJsonToDart = function(json, reviver) {
  var revive;
  $.functionTypeCheck(reviver);
  revive = reviver == null ? new $._convertJsonToDart_closure() : reviver;
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  return $.constructorNameFallback(obj);
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.name;
    if (typeof $name === "string") {
      $name;
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    } else
      t1 = false;
    if (t1)
      return $.stringTypeCheck($name);
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.getFunctionForTypeNameOf = function() {
  if (typeof navigator !== "object")
    return $.functionTypeCheck($.typeNameInChrome);
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.functionTypeCheck($.typeNameInChrome);
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.functionTypeCheck($.typeNameInFirefox);
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.functionTypeCheck($.typeNameInIE);
  else if (userAgent.indexOf("Opera") !== -1)
    return $.functionTypeCheck($.typeNameInOpera);
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.functionTypeCheck($.typeNameInSafari);
  else
    return $.functionTypeCheck($.constructorNameFallback);
};

$.toStringForNativeObject = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $.stringTypeCheck($._getTypeNameOf.call$1(obj));
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, $.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
};

$.defineNativeMethods = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon($.stringTypeCheck(tags), interceptorClass, true);
};

$.defineNativeMethodsNonleaf = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon($.stringTypeCheck(tags), interceptorClass, false);
};

$.defineNativeMethodsCommon = function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, t1, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; t1 = tagsList.length, $.$lt$n(i, t1); ++i) {
    if (i < 0 || i >= t1)
      throw $.ioore(i);
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
};

$.defineNativeMethodsFinish = function() {
};

$.lookupDispatchRecord = function(obj) {
  var hasOwnPropertyFunction, tag, map, interceptor, secondTag;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  $.assertHelper(!(obj instanceof $.Object));
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $.stringTypeCheck($._getTypeNameOf.call$1(obj));
  map = $.interceptorsByTag;
  interceptor = hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null) {
      map = $.interceptorsByTag;
      interceptor = hasOwnPropertyFunction.call(map, secondTag) ? map[secondTag] : null;
    }
  }
  if (interceptor == null)
    interceptor = {__what: "interceptor not found", __tag: tag};
  if (true === $.leafTags[tag])
    return {i: interceptor, p: false, e: null};
  else
    return {i: interceptor, p: Object.getPrototypeOf(obj), e: null};
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result._contents = result._contents + to;
      for (i = 0; $.$lt$n(i, $length); ++i) {
        if (i < 0 || i >= $length)
          throw $.ioore(i);
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
};

$._attachStackTrace = function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
};

$.getAttachedStackTrace = function(o) {
  var t1, values;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  values = $.Primitives_getProperty(o, "expando$values");
  return values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
};

$._asyncRunCallback = function() {
  var callbacks, i, callback, remainingCallbacks, newCallbacks, exception;
  for (; !$.JSArray_methods.get$isEmpty($.get$_asyncCallbacks());) {
    callbacks = $.get$_asyncCallbacks();
    $._asyncCallbacks = $.listTypeCheck([]);
    for (i = 0; $.$lt$n(i, $.get$length$asx(callbacks)); i = $.intTypeCheck($.$add$ns(i, 1))) {
      callback = $.functionTypeCheck($.$index$asx(callbacks, i));
      $.$indexSet$ax(callbacks, i, null);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        i = $.intTypeCheck($.$add$ns(i, 1));
        remainingCallbacks = $.listTypeCheck($.sublist$1$ax(callbacks, i));
        newCallbacks = $.get$_asyncCallbacks();
        $._asyncCallbacks = $.listTypeCheck([]);
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), remainingCallbacks);
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), newCallbacks);
        $.functionTypeCheck($._asyncRunCallback);
        $.Timer_run($._asyncRunCallback);
        throw exception;
      }

    }
  }
  $._callbacksAreEnqueued = false;
};

$._AsyncCompleter$ = function(T) {
  var t1 = new $._AsyncCompleter($.propertyTypeCheck($._FutureImpl$(T), "$isFuture"), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SyncCompleter$ = function(T) {
  var t1 = new $._SyncCompleter($.propertyTypeCheck($._FutureImpl$(T), "$isFuture"), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureListenerWrapper$ = function(future, T) {
  var t1 = new $._FutureListenerWrapper(future, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$immediate = function(value, T) {
  var t1;
  value;
  t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
};

$._FutureImpl$immediateError = function(error, stackTrace, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediateError$2(error, stackTrace, T);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures, T) {
  var t1, t2, t3, future, pos;
  t1 = {};
  $.listSuperNativeTypeCheck(futures, "$isIterable");
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.get$iterator$ax(futures); $.boolConversionCheck(t3.moveNext$0());) {
    future = $.propertyTypeCheck(t3.get$current(), "$isFuture");
    pos = t1.remaining_2;
    t1.remaining_2 = $.intTypeCheck($.$add$ns(pos, 1));
    $.intTypeCheck(pos);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  if ($.boolConversionCheck($.$eq(t1.remaining_2, 0))) {
    $.List_empty;
    return $._FutureImpl$immediate($.List_empty, null);
  }
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._AsyncCompleter$($.JSArray);
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue, S, T) {
  var t1 = new $._ThenFuture(_onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._CatchErrorFuture$ = function(_onError, _test, T) {
  var t1 = new $._CatchErrorFuture($.propertyTypeCheck(_test, "$is_FutureErrorTest"), $.propertyTypeCheck(_onError, "$is_FutureOnError"), null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SubscribeFuture$ = function(onValue, _onError, S, T) {
  var t1;
  $.functionTypeCheck(onValue);
  t1 = new $._SubscribeFuture($.propertyTypeCheck(_onError, "$is_FutureOnError"), onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._FutureWrapper$ = function(_future, T) {
  var t1 = new $._FutureWrapper($.propertyTypeCheck(_future, "$isFuture"));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._asyncError = function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
};

$.Timer_run = function(callback) {
  var t1, milliseconds;
  $.functionTypeCheck(callback);
  $.JSArray_methods.add$1($.get$Timer__runCallbacks(), callback);
  if ($.get$Timer__runCallbacks().length === 1) {
    t1 = new $.Timer_run_closure();
    $.functionTypeCheck(t1);
    milliseconds = $.intTypeCheck($.Duration_0.get$inMilliseconds());
    if ($.$lt$n(milliseconds, 0))
      milliseconds = 0;
    $.TimerImpl$(milliseconds, t1);
  }
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue($.listTypeCheck(null), 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  var t1 = $.getInterceptor$n(number);
  return t1.$and(number, t1.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var nextNumber;
  $.assertHelper($.JSNull_methods.$gt(number, 0));
  number = $.JSNull_methods.$shl(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue, E) {
  var t1, t2, t3;
  t1 = queue._tail;
  t2 = queue._modificationCount;
  t3 = queue._head;
  t3 = new $._ListQueueIterator(queue, t1, $.intTypeCheck(t2), t3, null);
  $.setRuntimeTypeInfo(t3, [E]);
  return t3;
};

$.DateTime_DateTime$now = function() {
  return $.DateTime$_now();
};

$.DateTime$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1;
  $.intTypeCheck(millisecondsSinceEpoch);
  $.boolTypeCheck(isUtc);
  t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.DateTime$_now = function() {
  var t1 = new $.DateTime($.intTypeCheck($.Primitives_dateNow()), false);
  t1.DateTime$_now$0();
  return t1;
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  var t1, t2;
  $.intTypeCheck(microseconds);
  $.intTypeCheck(milliseconds);
  t1 = $.$mul$n($.intTypeCheck(seconds), 1000000);
  t2 = $.$mul$n(milliseconds, 1000);
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration($.intTypeCheck(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + t1 + t2 + microseconds));
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.stringTypeCheck($.toString$0(object));
  if (typeof object === "string")
    return "\"" + $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"") + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.AssertionError$ = function() {
  return new $.AssertionError();
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S($.numTypeCheck(value)));
};

$.RangeError$range = function(value, start, end) {
  $.numTypeCheck(end);
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, $.stringTypeCheck(_memberName), _arguments, $.interceptedTypeCheck($.interceptedTypeCheck(_namedArguments, "$isMap"), "$isMap"), existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException($.stringTypeCheck(message));
};

$.Expando$ = function($name, T) {
  var t1 = new $.Expando($name);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.List_List = function($length, E) {
  var t1, result;
  t1 = $ === $length;
  $length = $.intTypeCheck(t1 ? null : $length);
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.List_List$from = function(other, growable, E) {
  var list, t1, t2, $length, fixedList, i;
  $.listSuperNativeTypeCheck(other, "$isIterable");
  list = $.List_List($, E);
  $.setRuntimeTypeInfo(list, [E]);
  $.listTypeCheck(list);
  for (t1 = $.get$iterator$ax(other), t2 = $.getInterceptor$ax(list); $.boolConversionCheck(t1.moveNext$0());)
    t2.add$1(list, t1.get$current());
  if (growable)
    return list;
  $length = t2.get$length(list);
  $.intTypeCheck($length);
  if ($length !== ($length | 0))
    return $.List_List$from$bailout(1, E, list, t2, $length);
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  $.listTypeCheck(fixedList);
  if (typeof fixedList !== "object" || fixedList === null || (fixedList.constructor !== Array || !!fixedList.immutable$list) && !$.getInterceptor(fixedList).$isJavaScriptIndexingBehavior)
    return $.List_List$from$bailout(2, 0, list, t2, $length, fixedList);
  for (i = 0; $.$lt$n(i, $length); ++i) {
    t1 = t2.$index(list, i);
    if (i >>> 0 !== i || i >= fixedList.length)
      throw $.ioore(i);
    fixedList[i] = t1;
  }
  return fixedList;
};

$.List_List$from$bailout = function(state0, E, list, t1, $length, fixedList) {
  switch (state0) {
    case 0:
      $.listSuperNativeTypeCheck(other, "$isIterable");
      list = $.List_List($, E);
      $.setRuntimeTypeInfo(list, [E]);
      $.listTypeCheck(list);
      for (t1 = $.get$iterator$ax(other), t2 = $.getInterceptor$ax(list); $.boolConversionCheck(t1.moveNext$0());)
        t2.add$1(list, t1.get$current());
      if (growable)
        return list;
      t1 = $.getInterceptor$asx(list);
      $length = t1.get$length(list);
      $.intTypeCheck($length);
    case 1:
      state0 = 0;
      fixedList = $.List_List($length, E);
      $.setRuntimeTypeInfo(fixedList, [E]);
      $.listTypeCheck(fixedList);
    case 2:
      var t2, i, t3;
      state0 = 0;
      for (t2 = $.getInterceptor$ax(fixedList), i = 0; t3 = $.getInterceptor$n(i), t3.$lt(i, $length); i = $.intTypeCheck(t3.$add(i, 1)))
        t2.$indexSet(fixedList, i, t1.$index(list, i));
      return fixedList;
  }
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.Object$ = function() {
  return new $.Object();
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.Stopwatch$ = function() {
  return new $.Stopwatch(null, null);
};

$.Stopwatch__frequency = function() {
  return 1000000;
};

$.Stopwatch__now = function() {
  return $.intTypeCheck($.Primitives_numMicroseconds());
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.document = function() {
  return document;
};

$.CanvasElement_CanvasElement = function(height, width) {
  var e = $.HtmlDocument_methods.$$dom_createElement$1(document, "canvas");
  if (width != null)
    $.set$width$x(e, width);
  if (height != null)
    $.set$height$x(e, height);
  return e;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$.Element__determineMouseWheelEventType = function(e) {
  $.interceptedTypeCheck(e, "$isEventTarget");
  if (e.onwheel !== undefined)
    return "wheel";
  else if (e.onmousewheel !== undefined)
    return "mousewheel";
  else
    return "DOMMouseScroll";
};

$.HttpRequest_getString = function(url, onProgress, withCredentials) {
  return $.propertyTypeCheck($.HttpRequest_request(url, null, $.functionTypeCheck(onProgress), null, null, withCredentials).then$1(new $.HttpRequest_getString_closure()), "$isFuture");
};

$.HttpRequest_request = function(url, method, onProgress, responseType, sendData, withCredentials) {
  var completer, xhr, t1, t2, t3;
  $.functionTypeCheck(onProgress);
  completer = $._AsyncCompleter$($.HttpRequest);
  xhr = new XMLHttpRequest();
  if (method == null)
    method = "GET";
  t1 = $.getInterceptor$x(xhr);
  t1.open$3$async(xhr, method, url, true);
  if (withCredentials != null)
    xhr.withCredentials = withCredentials;
  if (responseType != null)
    xhr.responseType = responseType;
  if (onProgress != null) {
    t2 = t1.get$onProgress(xhr);
    $.functionTypeCheck(onProgress);
    $.functionTypeCheck(null);
    $.functionTypeCheck(null);
    $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, onProgress, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
  }
  t2 = t1.get$onLoad(xhr);
  t3 = new $.HttpRequest_request_closure(completer, xhr);
  $.functionTypeCheck(t3);
  $.functionTypeCheck(null);
  $.functionTypeCheck(null);
  $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t3, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
  t2 = t1.get$onError(xhr);
  t3 = new $.HttpRequest_request_closure0(completer);
  $.functionTypeCheck(t3);
  $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t3, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
  if (sendData != null)
    t1.send$1(xhr, sendData);
  else
    xhr.send();
  return $.propertyTypeCheck(completer.future, "$isFuture");
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e = $.HtmlDocument_methods.$$dom_createElement$1(document, "img");
  if (src != null)
    $.set$src$x(e, src);
  if (width != null)
    $.set$width$x(e, width);
  if (height != null)
    $.set$height$x(e, height);
  return e;
};

$.InputElement_InputElement = function(type) {
  var e, exception;
  e = $.HtmlDocument_methods.$$dom_createElement$1(document, "input");
  if (type != null)
    try {
      $.set$type$x(e, type);
    } catch (exception) {
      $.unwrapException(exception);
    }

  return e;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.WebSocket_WebSocket = function(url, protocol_OR_protocols) {
  var t1, t2;
  t1 = $ === protocol_OR_protocols;
  if (t1)
    protocol_OR_protocols = null;
  $.stringTypeCheck(url);
  t2 = typeof url !== "string";
  if ((typeof url === "string" || url == null) && t1)
    return new WebSocket(url);
  if (typeof url === "string" || url == null) {
    t1 = $.checkSubtype(protocol_OR_protocols, "$isList", [$.JSString], "$asList");
    t1 = t1 || protocol_OR_protocols == null;
  } else
    t1 = false;
  if (t1)
    return new WebSocket(url, protocol_OR_protocols);
  if (typeof url === "string" || url == null)
    t1 = protocol_OR_protocols == null;
  else
    t1 = false;
  if (t1)
    return new WebSocket(url, protocol_OR_protocols);
  throw $.wrapException($.ArgumentError$("Incorrect number or type of arguments"));
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, $.stringTypeCheck(_eventType), _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture, T) {
  var t1 = new $._EventStreamSubscription(0, _target, $.stringTypeCheck(_eventType), _onData, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture, T);
  return t1;
};

$.Point$ = function(x, y) {
  return new $.Point($.numTypeCheck(x), $.numTypeCheck(y));
};

$.Rect$ = function(left, $top, width, height) {
  return new $.Rect(left, $top, $.numTypeCheck(width), $.numTypeCheck(height));
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1;
  $.listTypeCheck(array);
  t1 = $.get$length$asx(array);
  t1 = new $.FixedSizeListIterator($.listTypeCheck(array), $.intTypeCheck(t1), -1, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.convertNativeToDart_Dictionary = function(object) {
  var dict, t1, key;
  if (object == null)
    return;
  dict = $.makeLiteralMap([]);
  for (t1 = $.JSArray_methods.get$iterator(Object.getOwnPropertyNames(object)); t1.moveNext$0();) {
    key = t1.get$current();
    dict.$indexSet(dict, key, object[key]);
  }
  return dict;
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.forEach$1$ax(dict, new $.convertDartToNative_Dictionary_closure(object));
  return object;
};

$.convertNativeToDart_SerializedScriptValue = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, true);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, copy;
  copies = [];
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
  new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.FilteredElementList$ = function(node, T) {
  var t1 = new $.FilteredElementList(node, $.listTypeCheck($.get$nodes$x(node)));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var t1, i, t2;
  t1 = $.getInterceptor$asx(a);
  if (startIndex >= t1.get$length(a))
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$n(i), t2.$lt(i, endIndex); i = $.intTypeCheck(t2.$add(i, 1)))
    if (t1.$index(a, i) === element)
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var t1, i, t2;
  if (start !== (start | 0))
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (end !== (end | 0))
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.wrapException($.RangeError$value(start));
  if (end < start)
    throw $.wrapException($.RangeError$value(end));
  t1 = $.getInterceptor$asx(a);
  if (end > t1.get$length(a))
    throw $.wrapException($.RangeError$value(end));
  for (i = start; t2 = $.getInterceptor$n(i), t2.$lt(i, end); i = $.intTypeCheck(t2.$add(i, 1)))
    $.JSArray_methods.add$1(accumulator, t1.$index(a, i));
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0))
    throw $.wrapException($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start))
    throw $.wrapException($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)))
    throw $.wrapException($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end); i = $.intTypeCheck(t1.$add(i, 1)))
    $.JSArray_methods.add$1(accumulator, t2.$index(a, i));
  return accumulator;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, false);
};

$._completeRequest = function(request) {
  var completer, t1, t2, t3;
  completer = $._SyncCompleter$(null);
  t1 = $.getInterceptor$x(request);
  t2 = t1.get$onSuccess(request);
  t3 = new $._completeRequest_closure(request, completer);
  $.functionTypeCheck(t3);
  $.functionTypeCheck(null);
  $.functionTypeCheck(null);
  $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t3, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
  t1 = t1.get$onError(request);
  t2 = new $._completeRequest_closure0(completer);
  $.functionTypeCheck(t2);
  $.propertyTypeCheck($._EventStreamSubscription$(t1._target, t1._eventType, t2, t1._useCapture, $.getRuntimeTypeArgument(t1, t1.$as_EventStream, 0)), "$isStreamSubscription");
  return completer.future;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.propertyTypeCheck($.ReceivePort_ReceivePort(), "$isReceivePort");
  return $.lazyPort;
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.JsonCyclicError$ = function(object) {
  return new $.JsonCyclicError(object, null);
};

$.parse = function(json, reviver) {
  var parsed, e, t1, exception;
  $.stringTypeCheck(json);
  $.functionTypeCheck(reviver);
  t1 = json;
  if (typeof t1 !== "string")
    throw $.wrapException($.ArgumentError$(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.wrapException($.FormatException$(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, $.listTypeCheck([]));
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, t2, charCode, t3, str;
  t1 = $.getInterceptor$asx(s);
  $length = s.length;
  charCodes = $.List_List($, $.JSInt);
  $.setRuntimeTypeInfo(charCodes, [$.JSInt]);
  for (needsEscape = false, i = 0; t2 = $.getInterceptor$n(i), t2.$lt(i, $length); i = $.intTypeCheck(t2.$add(i, 1))) {
    charCode = t1.codeUnitAt$1(s, i);
    if (charCode < 32) {
      $.JSArray_methods.add$1(charCodes, 92);
      switch (charCode) {
        case 8:
          $.JSArray_methods.add$1(charCodes, 98);
          break;
        case 9:
          $.JSArray_methods.add$1(charCodes, 116);
          break;
        case 10:
          $.JSArray_methods.add$1(charCodes, 110);
          break;
        case 12:
          $.JSArray_methods.add$1(charCodes, 102);
          break;
        case 13:
          $.JSArray_methods.add$1(charCodes, 114);
          break;
        default:
          $.JSArray_methods.add$1(charCodes, 117);
          t3 = $.JSInt_methods.$shr(charCode, 12) & 15;
          $.JSArray_methods.add$1(charCodes, t3 < 10 ? 48 + t3 : 87 + t3);
          t3 = $.JSInt_methods.$shr(charCode, 8) & 15;
          $.JSArray_methods.add$1(charCodes, t3 < 10 ? 48 + t3 : 87 + t3);
          t3 = $.JSInt_methods.$shr(charCode, 4) & 15;
          $.JSArray_methods.add$1(charCodes, t3 < 10 ? 48 + t3 : 87 + t3);
          t3 = charCode & 15;
          $.JSArray_methods.add$1(charCodes, t3 < 10 ? 48 + t3 : 87 + t3);
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      $.JSArray_methods.add$1(charCodes, 92);
      $.JSArray_methods.add$1(charCodes, charCode);
      needsEscape = true;
    } else
      $.JSArray_methods.add$1(charCodes, charCode);
  }
  if (needsEscape) {
    $.listSuperNativeTypeCheck(charCodes, "$isIterable");
    if (!(charCodes.constructor === Array))
      charCodes = $.listSuperNativeTypeCheck($.List_List$from(charCodes, true, null), "$isIterable");
    t1 = $.Primitives_stringFromCharCodes(charCodes);
    str = t1;
  } else
    str = s;
  str = typeof str === "string" ? str : $.S(str);
  sb._contents = sb._contents + str;
};

$.min = function(a, b) {
  $.numTypeCheck(a);
  if (typeof a === "number") {
    a;
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      b;
      if (typeof a === "number") {
        a;
        if (a === 0)
          return (a + b) * a * b;
      }
      if (a === 0 && $.JSNumber_methods.get$isNegative(b) || $.JSNumber_methods.get$isNaN(b))
        return b;
      return a;
    }
    return a;
    throw $.wrapException($.ArgumentError$(b));
  }
  throw $.wrapException($.ArgumentError$(a));
};

$.max = function(a, b) {
  $.numTypeCheck(a);
  if (typeof a === "number") {
    a;
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      b;
      if (typeof a === "number") {
        a;
        if (a === 0)
          return a + b;
      }
      if ($.JSNumber_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && $.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
    throw $.wrapException($.ArgumentError$(b));
  }
  throw $.wrapException($.ArgumentError$(a));
};

$.sqrt = function(x) {
  if (typeof x !== "number")
    $.throwExpression($.ArgumentError$(x));
  return Math.sqrt(x);
};

$.Float32List_Float32List = function($length) {
  return new Float32Array($length);
};

$._hexCharPairToByte = function(s, pos) {
  var $byte, i, charCode;
  if (pos !== (pos | 0))
    return $._hexCharPairToByte$bailout(1, s, pos);
  for ($byte = 0, i = 0; i < 2; ++i) {
    charCode = $.JSString_methods.codeUnitAt$1(s, pos + i);
    if (48 <= charCode && charCode <= 57)
      $byte = $byte * 16 + charCode - 48;
    else {
      charCode = (charCode | 32) >>> 0;
      if (97 <= charCode && charCode <= 102)
        $byte = $byte * 16 + charCode - 87;
      else
        throw $.wrapException($.ArgumentError$("Invalid URL encoding"));
    }
  }
  return $byte;
};

$._hexCharPairToByte$bailout = function(state0, s, pos, t1, i, $byte, t2) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor$ns(pos);
      $byte = 0;
      i = 0;
    default:
      var charCode;
      L0:
        while (true)
          switch (state0) {
            case 0:
              t2 = $.getInterceptor$n(i);
              if (!t2.$lt(i, 2))
                break L0;
              charCode = $.JSString_methods.codeUnitAt$1(s, t1.$add(pos, i));
            default:
              if (state0 === 2 || state0 === 0 && 48 <= charCode && charCode <= 57)
                switch (state0) {
                  case 0:
                    $byte = $.$mul$n($byte, 16) + charCode - 48;
                    $.intTypeCheck($byte);
                  case 2:
                    state0 = 0;
                }
              else
                switch (state0) {
                  case 0:
                    charCode = (charCode | 32) >>> 0;
                  case 3:
                    if (state0 === 3 || state0 === 0 && 97 <= charCode && charCode <= 102)
                      switch (state0) {
                        case 0:
                          $byte = $.$mul$n($byte, 16) + charCode - 87;
                          $.intTypeCheck($byte);
                        case 3:
                          state0 = 0;
                      }
                    else
                      throw $.wrapException($.ArgumentError$("Invalid URL encoding"));
                }
              i = t2.$add(i, 1);
              $.intTypeCheck(i);
            case 4:
              state0 = 0;
          }
      return $byte;
  }
};

$._uriDecode = function(text) {
  var result, codepoints, t1, t2, t3, i, ch, t4, charCodes;
  result = $.StringBuffer$("");
  codepoints = $.List_List($, $.JSInt);
  $.setRuntimeTypeInfo(codepoints, [$.JSInt]);
  $.listTypeCheck(codepoints);
  for (t1 = text.length, t2 = $.getInterceptor$ax(codepoints), t3 = t1 - 2, i = 0; $.$lt$n(i, t1);) {
    if (i >>> 0 !== i || i >= t1)
      throw $.ioore(i);
    ch = text[i];
    if (ch !== "%") {
      if (ch === "+")
        result._contents = result._contents + " ";
      else
        result._contents = result._contents + ch;
      ++i;
    } else {
      t2.clear$0(codepoints);
      for (; ch === "%";) {
        i = $.intTypeCheck($.$add$ns(i, 1));
        t4 = $.getInterceptor$n(i);
        if (t4.$gt(i, t3))
          throw $.wrapException($.ArgumentError$("Truncated URI"));
        t2.add$1(codepoints, $._hexCharPairToByte(text, i));
        i = $.intTypeCheck(t4.$add(i, 2));
        if (i === t1)
          break;
        if (i >>> 0 !== i || i >= t1)
          throw $.ioore(i);
        ch = text[i];
      }
      $.listTypeCheck(codepoints);
      charCodes = $.Utf8Decoder$(codepoints, 0, null, 65533).decodeRest$0();
      $.listSuperNativeTypeCheck(charCodes, "$isIterable");
      t4 = $.Primitives_stringFromCharCodes(!(charCodes.constructor === Array) ? $.listSuperNativeTypeCheck($.List_List$from(charCodes, true, null), "$isIterable") : charCodes);
      result._contents = result._contents + t4;
    }
  }
  return result._contents;
};

$._ListRange$ = function(source, offset, $length) {
  var t1 = $length == null ? source.length - offset : $length;
  t1 = new $._ListRange(source, offset, t1);
  t1._ListRange$3(source, offset, $length);
  return t1;
};

$._ListRangeIteratorImpl$ = function(_source, offset, _end) {
  return new $._ListRangeIteratorImpl($.listTypeCheck(_source), offset - 1, $.intTypeCheck(_end));
};

$.Utf8Decoder$ = function(utf8EncodedBytes, offset, $length, replacementCodepoint) {
  var t1 = $._ListRange$($.listTypeCheck(utf8EncodedBytes), offset, $length);
  return new $.Utf8Decoder(t1.get$iterator(t1), replacementCodepoint, null);
};

$.Instance$ = function(model, center, scale) {
  return new $.Instance(model, center, $.doubleTypeCheck(scale), $.mat4$identity());
};

$.Model$fromJson = function(gl, program, URL) {
  var t1 = $.List_List($, $.Instance);
  $.setRuntimeTypeInfo(t1, [$.Instance]);
  t1 = new $.Model(null, null, null, null, null, $.listTypeCheck(t1), program);
  t1.Model$fromJson$3(gl, program, URL);
  return t1;
};

$.Model$fromOBJ = function(gl, program, URL) {
  var t1 = $.List_List($, $.Instance);
  $.setRuntimeTypeInfo(t1, [$.Instance]);
  t1 = new $.Model(null, null, null, null, null, $.listTypeCheck(t1), program);
  t1.Model$fromOBJ$3(gl, program, URL);
  return t1;
};

$.Camera$ = function(eye, center, up) {
  return new $.Camera($.doubleTypeCheck(30), $.doubleTypeCheck(15), eye, center, up, null, null);
};

$.Cookie__readCookie = function() {
  var cookie = $.HashMap$(null, null);
  $.JSArray_methods.forEach$1($.split$1$s(document.cookie, ";"), new $.Cookie__readCookie_closure(cookie));
  return cookie;
};

$.Cookie_getCookie = function($name) {
  var t = $.Cookie__readCookie();
  if ($.boolConversionCheck(t.containsKey$1(t, $name)))
    return $.stringTypeCheck(t.$index(t, $name));
  return;
};

$.initDebugLostContext = function(canvas) {
  var control, t1, loseContextButton, t2, t3, restoreContextButton;
  $.interceptedTypeCheck(canvas, "$isCanvasElement");
  control = $.interceptedTypeCheck($.HtmlDocument_methods.query$1(document, "#control"), "$isDivElement");
  t1 = $.getInterceptor(control);
  $.assertHelper(control != null);
  loseContextButton = $.interceptedTypeCheck($.InputElement_InputElement(null), "$isInputElement");
  loseContextButton.type = "button";
  loseContextButton.value = "lose context";
  t2 = $.get$onClick$x(loseContextButton);
  t3 = new $.initDebugLostContext_closure();
  $.functionTypeCheck(t3);
  $.functionTypeCheck(null);
  $.functionTypeCheck(null);
  $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t3, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
  t1.append$1(control, loseContextButton);
  restoreContextButton = $.interceptedTypeCheck($.InputElement_InputElement(null), "$isInputElement");
  restoreContextButton.type = "button";
  restoreContextButton.value = "restore context";
  t2 = $.get$onClick$x(restoreContextButton);
  t3 = new $.initDebugLostContext_closure0();
  $.functionTypeCheck(t3);
  $.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t3, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription");
  t1.append$1(control, restoreContextButton);
  $.Primitives_printString("FIXME: initDebugLostContext: trap webglcontextlost");
  $.Primitives_printString("FIXME: initDebugLostContext: trap webglcontextrestored");
};

$.initGL = function(canvas) {
  var gl;
  $.interceptedTypeCheck(canvas, "$isCanvasElement");
  $.Primitives_printString("WebGL: initializing");
  gl = $.interceptedTypeCheck($.getContext3d$0$x(canvas), "$isRenderingContext");
  if (gl != null) {
    $.Primitives_printString("WebGL: initialized");
    return gl;
  }
  $.Primitives_printString("WebGL: initialization failure");
  return;
};

$.boot = function() {
  var canvasbox, t1, gl, t2, t3, p, e, sid, wsUri, statusElem, div;
  $.canvas = $.interceptedTypeCheck($.CanvasElement_CanvasElement(null, null), "$isCanvasElement");
  $.assertHelper($.canvas != null);
  $.set$id$x($.canvas, "main_canvas");
  $.set$width$x($.canvas, 780);
  $.set$height$x($.canvas, 500);
  canvasbox = $.HtmlDocument_methods.query$1(document, "#canvasbox");
  t1 = $.getInterceptor(canvasbox);
  $.assertHelper(canvasbox != null);
  t1.append$1(canvasbox, $.canvas);
  $.Primitives_printString("canvas '" + $.S($.get$id$x($.canvas)) + "' created: width=" + $.S($.get$width$x($.canvas)) + " height=" + $.S($.get$height$x($.canvas)));
  gl = $.interceptedTypeCheck($.initGL($.canvas), "$isRenderingContext");
  if (gl == null) {
    t2 = $.canvas;
    t3 = t2.parentNode;
    if (t3 != null)
      $.$$dom_removeChild$1$x(t3, t2);
    p = $.HtmlDocument_methods.$$dom_createElement$1(document, "p");
    p.textContent = "WebGL is currently not available on this system.";
    t1.append$1(canvasbox, p);
    e = $.HtmlDocument_methods.$$dom_createElement$1(document, "a");
    $.set$href$x(e, "http://get.webgl.org/");
    e.textContent = "Get more information";
    t1.append$1(canvasbox, e);
    $.set$backgroundColor$x(canvasbox.style, "lightblue");
    return;
  }
  if ($.debugLostContext)
    $.initDebugLostContext($.canvas);
  sid = $.Cookie_getCookie("sid");
  $.assertHelper(sid != null);
  $.Primitives_printString("session id sid=" + $.S(sid));
  wsUri = $.HtmlDocument_methods.query$1(document, "#wsUri").textContent;
  $.assertHelper(wsUri != null);
  statusElem = $.HtmlDocument_methods.query$1(document, "#ws_status");
  $.assertHelper(statusElem != null);
  $.initWebSocket(wsUri, sid, 1, statusElem);
  div = $.interceptedTypeCheck($.HtmlDocument_methods.query$1(document, "#framerate"), "$isDivElement");
  $.assertHelper(div != null);
  $.stats = $.Stats$();
  t1 = $.get$children$x(div);
  t1.add$1(t1, $.stats.container);
  return gl;
};

$.initSquares = function(gl) {
  var squareProgram, squareModel, squareProgram2, t1, t2, milliseconds, squareModel2, squareProgram3, squareModel3;
  squareProgram = $.ShaderProgram$(gl);
  $.add$1$ax($.programList, squareProgram);
  squareProgram.fetch$3($.shaderCache, "/shader/clip_vs.txt", "/shader/clip_fs.txt");
  squareModel = $.Model$fromJson(gl, squareProgram, "/mesh/square.json");
  $.JSArray_methods.add$1(squareProgram.modelList, squareModel);
  $.JSArray_methods.add$1(squareModel.instanceList, $.Instance$(squareModel, $.vec3$(0, 0, 0), 1));
  squareProgram2 = $.ShaderProgram$(gl);
  $.add$1$ax($.programList, squareProgram2);
  t1 = $.Duration$(0, 0, 0, 0, 0, 2);
  t2 = new $.initSquares_closure(squareProgram2);
  $.functionTypeCheck(t2);
  milliseconds = $.intTypeCheck(t1.get$inMilliseconds());
  if ($.$lt$n(milliseconds, 0))
    milliseconds = 0;
  $.TimerImpl$(milliseconds, t2);
  squareModel2 = $.Model$fromJson(gl, squareProgram2, "/mesh/square2.json");
  $.JSArray_methods.add$1(squareProgram2.modelList, squareModel2);
  $.JSArray_methods.add$1(squareModel2.instanceList, $.Instance$(squareModel2, $.vec3$(0, 0, 0), 1));
  squareProgram3 = $.ShaderProgram$(gl);
  $.add$1$ax($.programList, squareProgram3);
  squareProgram3.fetch$3($.shaderCache, "/shader/clip_vs.txt", "/shader/clip3_fs.txt");
  squareModel3 = $.Model$fromJson(gl, squareProgram3, "/mesh/square3.json");
  $.JSArray_methods.add$1(squareProgram3.modelList, squareModel3);
  $.JSArray_methods.add$1(squareModel3.instanceList, $.Instance$(squareModel3, $.vec3$(0, 0, 0), 1));
};

$.initSkybox = function(gl) {
  var skyboxProgram, t1, skyboxModel;
  skyboxProgram = $.SkyboxProgram$(gl);
  $.add$1$ax($.programList, skyboxProgram);
  t1 = $.shaderCache;
  $.interceptedTypeCheck(t1, "$isMap");
  $.ShaderProgram.prototype.fetch$3.call(skyboxProgram, t1, "/shader/skybox_vs.txt", "/shader/skybox_fs.txt");
  skyboxModel = $.SkyboxModel$fromJson(gl, skyboxProgram, "/mesh/cube.json", true, 0);
  skyboxModel.addCubemapFace$2(34069, "/texture/space_rt.jpg");
  skyboxModel.addCubemapFace$2(34070, "/texture/space_lf.jpg");
  skyboxModel.addCubemapFace$2(34071, "/texture/space_up.jpg");
  skyboxModel.addCubemapFace$2(34072, "/texture/space_dn.jpg");
  skyboxModel.addCubemapFace$2(34073, "/texture/space_fr.jpg");
  skyboxModel.addCubemapFace$2(34074, "/texture/space_bk.jpg");
  $.JSArray_methods.add$1(skyboxProgram.modelList, skyboxModel);
  $.JSArray_methods.add$1(skyboxModel.instanceList, $.SkyboxInstance$(skyboxModel, $.vec3$(0, 0, 0), 1));
};

$.initAirship = function(gl) {
  var prog, airshipModel;
  prog = $.ShaderProgram$(gl);
  $.add$1$ax($.programList, prog);
  prog.fetch$3($.shaderCache, "/shader/simple_vs.txt", "/shader/simple_fs.txt");
  airshipModel = $.Model$fromOBJ(gl, prog, "/obj/airship.obj");
  $.JSArray_methods.add$1(prog.modelList, airshipModel);
  $.JSArray_methods.add$1(airshipModel.instanceList, $.Instance$(airshipModel, $.vec3$(-8, 0, 0), 1));
};

$.initAirshipTex = function(gl) {
  var prog, temporaryColor, airshipModel, t1, airshipModel2;
  prog = $.TexShaderProgram$(gl);
  $.add$1$ax($.programList, prog);
  prog.fetch$3($.shaderCache, "/shader/simpleTex_vs.txt", "/shader/simpleTex_fs.txt");
  temporaryColor = $.listTypeCheck([0, 255, 0, 255]);
  airshipModel = $.TexModel$fromOBJ(gl, prog, "/obj/airship.obj", new $.initAirshipTex_onModelDone(temporaryColor));
  t1 = prog.modelList;
  $.JSArray_methods.add$1(t1, airshipModel);
  $.JSArray_methods.add$1(airshipModel.instanceList, $.TexInstance$(airshipModel, $.vec3$(0, 0, 0), 1));
  airshipModel2 = $.TexModel$fromOBJ(gl, prog, "/obj/airship.obj", new $.initAirshipTex_onModelDone2(temporaryColor));
  $.JSArray_methods.add$1(t1, airshipModel2);
  $.JSArray_methods.add$1(airshipModel2.instanceList, $.TexInstance$(airshipModel2, $.vec3$(8, 0, 0), 1));
};

$.initContext = function(gl, gameLoop) {
  var t1, t2, before, i, duration;
  t1 = $.List_List($, $.ShaderProgram);
  $.setRuntimeTypeInfo(t1, [$.ShaderProgram]);
  $.programList = $.listTypeCheck(t1);
  $.shaderCache = $.interceptedTypeCheck($.HashMap$($.JSString, $.Shader), "$isMap");
  $.textureTable = $.interceptedTypeCheck($.HashMap$($.JSString, $.Texture), "$isMap");
  $.forEach$1$ax($.programList, new $.initContext_closure(gl));
  $.initSquares(gl);
  $.initAirship(gl);
  $.initAirshipTex(gl);
  $.initSkybox(gl);
  t1 = $.getInterceptor$x(gl);
  t1.clearColor$4(gl, 0.5, 0.5, 0.5, 1);
  t1.enable$1(gl, 2929);
  t1.depthFunc$1(gl, 513);
  t1.depthRange$2(gl, 0, 1);
  t2 = $.canvas;
  t1.viewport$4(gl, 0, 0, $.get$width$x(t2), $.get$height$x(t2));
  t2 = $.canvas;
  $.canvasAspect = $.numTypeCheck($.$div$n($.get$width$x(t2), $.get$height$x(t2)));
  if ($.backfaceCulling) {
    t1.frontFace$1(gl, 2305);
    t1.cullFace$1(gl, 1029);
    t1.enable$1(gl, 2884);
  }
  t1 = $.fullRateFrames;
  if (t1 > 0) {
    $.Primitives_printString("firing " + t1 + " frames at full rate");
    before = $.DateTime$_now();
    for (i = 0; t1 = $.getInterceptor$n(i), t1.$lt(i, $.fullRateFrames); i = $.intTypeCheck(t1.$add(i, 1))) {
      t2 = $.stats._timer;
      t2.start$0(t2);
      $.draw(gl, gameLoop);
      t2 = $.stats;
      t2.end$0(t2);
    }
    duration = $.Duration$(0, 0, 0, $.$sub$n($.intTypeCheck($.DateTime$_now().millisecondsSinceEpoch), $.intTypeCheck(before.millisecondsSinceEpoch)), 0, 0);
    t1 = $.fullRateFrames;
    t2 = duration.get$inSeconds();
    $.Primitives_printString("duration = " + $.S(duration) + " framerate = " + $.S(t1 / t2) + " fps");
  }
  gameLoop.start$0(gameLoop);
};

$.draw = function(gl, gameLoop) {
  $.clear$1$ax($.interceptedTypeCheck(gl, "$isRenderingContext"), 16640);
  $.setPerspectiveMatrix($.get$pMatrix(), $.fieldOfViewYRadians, $.canvasAspect, 1, 1000);
  $.get$cam().render$1(gameLoop);
  $.forEach$1$ax($.programList, new $.draw_closure(gameLoop));
};

$.update = function(gameLoop) {
  var t1 = $.get$cam();
  t1.oldAngle = $.doubleTypeCheck(t1.angle);
  t1.angle = $.doubleTypeCheck($.JSNumber_methods.$mod(gameLoop.get$gameTime() * t1.degreesPerSec, 360));
  $.forEach$1$ax($.programList, new $.update_closure(gameLoop));
};

$.main = function() {
  var gl, gameLoop;
  gl = $.interceptedTypeCheck($.boot(), "$isRenderingContext");
  if (gl == null) {
    $.Primitives_printString("WebGL: not available");
    return;
  }
  gameLoop = $.GameLoopHtml$($.canvas);
  gameLoop.onUpdate = $.propertyTypeCheck(new $.main_closure(), "$isGameLoopUpdateFunction");
  gameLoop.onRender = $.propertyTypeCheck(new $.main_closure0(gl), "$isGameLoopRenderFunction");
  $.initContext(gl, gameLoop);
};

$.Obj$fromString = function(url, str) {
  var t1, t2, t3, t4;
  t1 = $.List_List($, $.JSInt);
  $.setRuntimeTypeInfo(t1, [$.JSInt]);
  t2 = $.List_List($, $.JSDouble);
  $.setRuntimeTypeInfo(t2, [$.JSDouble]);
  t3 = $.List_List($, $.JSDouble);
  $.setRuntimeTypeInfo(t3, [$.JSDouble]);
  t4 = $.List_List($, $.JSDouble);
  $.setRuntimeTypeInfo(t4, [$.JSDouble]);
  t4 = new $.Obj($.listTypeCheck(t1), $.listTypeCheck(t2), $.listTypeCheck(t3), $.listTypeCheck(t4));
  t4.Obj$fromString$2(url, str, {});
  return t4;
};

$.ShaderProgram$ = function(gl) {
  var t1 = $.List_List($, $.Model);
  $.setRuntimeTypeInfo(t1, [$.Model]);
  return new $.ShaderProgram(null, gl, null, null, null, $.listTypeCheck(t1));
};

$.TexShaderProgram$ = function(gl) {
  var t1 = $.List_List($, $.Model);
  $.setRuntimeTypeInfo(t1, [$.Model]);
  return new $.TexShaderProgram(null, null, null, gl, null, null, null, $.listTypeCheck(t1));
};

$.TexModel$fromOBJ = function(gl, program, URL, onDone) {
  var t1, t2;
  $.functionTypeCheck(onDone);
  t1 = $.List_List($, $.TextureInfo);
  $.setRuntimeTypeInfo(t1, [$.TextureInfo]);
  t2 = $.List_List($, $.Instance);
  $.setRuntimeTypeInfo(t2, [$.Instance]);
  t2 = new $.TexModel(null, null, $.listTypeCheck(t1), null, null, null, null, null, $.listTypeCheck(t2), null);
  t2.TexModel$fromOBJ$4(gl, program, URL, onDone);
  return t2;
};

$.TexInstance$ = function(model, center, scale) {
  return new $.TexInstance(model, center, $.doubleTypeCheck(scale), $.mat4$identity());
};

$.SkyboxProgram$ = function(gl) {
  var t1 = $.List_List($, $.Model);
  $.setRuntimeTypeInfo(t1, [$.Model]);
  return new $.SkyboxProgram(null, null, gl, null, null, null, $.listTypeCheck(t1));
};

$.SkyboxModel$fromJson = function(gl, prog, URL, reverse, rescale) {
  var t1 = $.List_List($, $.Instance);
  $.setRuntimeTypeInfo(t1, [$.Instance]);
  t1 = new $.SkyboxModel(null, null, null, null, null, null, $.listTypeCheck(t1), prog);
  t1.Model$fromJson$3(gl, prog, URL);
  t1.SkyboxModel$fromJson$5(gl, prog, URL, reverse, rescale);
  return t1;
};

$.SkyboxInstance$ = function(model, center, scale) {
  return new $.SkyboxInstance(model, center, $.doubleTypeCheck(scale), $.mat4$identity());
};

$.TextureInfo$ = function(gl, textureTable, indexOffset, indexNumber, textureName, temporaryColor) {
  var t1 = new $.TextureInfo(indexOffset, $.intTypeCheck(indexNumber), textureName, null);
  t1.TextureInfo$6(gl, $.interceptedTypeCheck(textureTable, "$isMap"), indexOffset, indexNumber, textureName, $.listTypeCheck(temporaryColor));
  return t1;
};

$.initWebSocket = function(wsUri, sid, retrySeconds, $status) {
  var t1, t2, t3, t4;
  t1 = {};
  t1.retrySeconds_0 = retrySeconds;
  $.stringTypeCheck(wsUri);
  $.stringTypeCheck(sid);
  $.intTypeCheck(retrySeconds);
  $.interceptedTypeCheck($status, "$isElement");
  $status.textContent = "opening " + $.S(wsUri);
  t2 = t1.retrySeconds_0;
  if (t2 < 1)
    t1.retrySeconds_0 = 1;
  else if (t2 > 120)
    t1.retrySeconds_0 = 120;
  $.Primitives_printString("websocket: opening: " + $.S(wsUri) + " (retry=" + $.S(t1.retrySeconds_0) + ")");
  t1.w_1 = $.interceptedTypeCheck($.WebSocket_WebSocket(wsUri, $), "$isWebSocket");
  t1.subOpen_2 = null;
  t1.subClose_3 = null;
  t1.subError_4 = null;
  t1.subMessage_5 = null;
  t2 = $.get$onOpen$x(t1.w_1);
  t3 = new $.initWebSocket_closure(t1, wsUri, sid, $status);
  $.functionTypeCheck(t3);
  $.functionTypeCheck(null);
  $.functionTypeCheck(null);
  t1.subOpen_2 = $.propertyTypeCheck($.propertyTypeCheck($._EventStreamSubscription$(t2._target, t2._eventType, t3, t2._useCapture, $.getRuntimeTypeArgument(t2, t2.$as_EventStream, 0)), "$isStreamSubscription"), "$isStreamSubscription");
  t1.reconnectScheduled_6 = false;
  t2 = new $.initWebSocket_scheduleReconnect(t1, wsUri, sid, $status);
  t3 = $.get$onClose$x(t1.w_1);
  t4 = new $.initWebSocket_closure0(wsUri, $status, t2);
  $.functionTypeCheck(t4);
  t1.subClose_3 = $.propertyTypeCheck($.propertyTypeCheck($._EventStreamSubscription$(t3._target, t3._eventType, t4, t3._useCapture, $.getRuntimeTypeArgument(t3, t3.$as_EventStream, 0)), "$isStreamSubscription"), "$isStreamSubscription");
  t3 = $.get$onError$x(t1.w_1);
  t2 = new $.initWebSocket_closure1(t2);
  $.functionTypeCheck(t2);
  t1.subError_4 = $.propertyTypeCheck($.propertyTypeCheck($._EventStreamSubscription$(t3._target, t3._eventType, t2, t3._useCapture, $.getRuntimeTypeArgument(t3, t3.$as_EventStream, 0)), "$isStreamSubscription"), "$isStreamSubscription");
  t3 = $.get$onMessage$x(t1.w_1);
  t2 = new $.initWebSocket_closure2(t1, $status);
  $.functionTypeCheck(t2);
  t1.subMessage_5 = $.propertyTypeCheck($.propertyTypeCheck($._EventStreamSubscription$(t3._target, t3._eventType, t2, t3._useCapture, $.getRuntimeTypeArgument(t3, t3.$as_EventStream, 0)), "$isStreamSubscription"), "$isStreamSubscription");
};

$.GameLoop_timeStampToSeconds = function(timeStamp) {
  if (typeof timeStamp !== "number")
    return $.GameLoop_timeStampToSeconds$bailout(1, timeStamp);
  return timeStamp / 1000;
};

$.GameLoop_timeStampToSeconds$bailout = function(state0, timeStamp) {
  return $.doubleTypeCheck($.$div$n(timeStamp, 1000));
};

$.DigitalButton$ = function(buttonId) {
  var t1 = $.doubleTypeCheck(0);
  return new $.DigitalButton(buttonId, 0, 0, t1, t1);
};

$.DigitalButtonEvent$ = function(buttonId, down, frame, time) {
  return new $.DigitalButtonEvent(down, $.intTypeCheck(frame), buttonId, time);
};

$.GameLoopGamepad$ = function(gameLoop) {
  return new $.GameLoopGamepad(gameLoop, null, null);
};

$.GameLoopHtml$ = function(element) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  t1 = $.List_List($, $._GameLoopTouchEvent);
  $.setRuntimeTypeInfo(t1, [$._GameLoopTouchEvent]);
  t2 = $.List_List($, $.KeyboardEvent);
  $.setRuntimeTypeInfo(t2, [$.KeyboardEvent]);
  t3 = $.List_List($, $.MouseEvent);
  $.setRuntimeTypeInfo(t3, [$.MouseEvent]);
  t4 = $.List_List($, $.GameLoopTimer);
  $.setRuntimeTypeInfo(t4, [$.GameLoopTimer]);
  t5 = $.doubleTypeCheck(0);
  $.listTypeCheck(t1);
  $.listTypeCheck(t2);
  $.listTypeCheck(t3);
  t6 = $.propertyTypeCheck(null, "$isGameLoopRenderFunction");
  t7 = $.propertyTypeCheck(null, "$isGameLoopResizeFunction");
  t8 = $.propertyTypeCheck(null, "$isGameLoopFullscreenChangeFunction");
  t9 = $.propertyTypeCheck(null, "$isGameLoopPointerLockChangeFunction");
  t10 = $.propertyTypeCheck(null, "$isGameLoopTouchEventFunction");
  t4 = new $.GameLoopHtml(element, 0, false, false, null, t5, false, t5, 0.03, t5, t5, t5, 0.05, null, null, null, null, null, t1, t2, t3, t6, t7, t8, t9, t10, t10, 0.015, 0.03, $.listTypeCheck(t4), $.propertyTypeCheck(null, "$isGameLoopUpdateFunction"));
  t4.GameLoopHtml$1(element);
  return t4;
};

$.Keyboard$ = function(gameLoop) {
  var t1 = new $.Keyboard(gameLoop, $.interceptedTypeCheck($.Map_Map($.JSInt, $.DigitalButton), "$isMap"));
  t1.DigitalInput$2(gameLoop, $.get$Keyboard__buttonIds());
  return t1;
};

$.GameLoopMouseEvent$ = function(x, y, dx, dy, clampX, clampY, withinCanvas, time, frame) {
  return new $.GameLoopMouseEvent(x, y, dx, dy, clampX, clampY, time, withinCanvas, $.intTypeCheck(frame));
};

$.Mouse$ = function(gameLoop) {
  var t1, t2;
  t1 = $.get$Mouse__buttonIds();
  t2 = $.Map_Map($.JSInt, $.DigitalButton);
  t2 = new $.Mouse(0, 0, 0, 0, 0, 0, 0, 0, false, $.doubleTypeCheck(0), 0, gameLoop, $.interceptedTypeCheck(t2, "$isMap"));
  t2.DigitalInput$2(gameLoop, t1);
  return t2;
};

$.PointerLock$ = function(gameLoop) {
  var t1 = new $.PointerLock(gameLoop, true);
  t1.PointerLock$1(gameLoop);
  return t1;
};

$._GameLoopTouchEvent$ = function($event, type) {
  return new $._GameLoopTouchEvent($event, type);
};

$.GameLoopTouchPosition$ = function(x, y, dx, dy, time, frame) {
  return new $.GameLoopTouchPosition($.intTypeCheck(x), $.intTypeCheck(y), dx, dy, $.doubleTypeCheck(time), $.intTypeCheck(frame));
};

$.GameLoopTouch$ = function(id) {
  var t1 = $.List_List($, $.GameLoopTouchPosition);
  $.setRuntimeTypeInfo(t1, [$.GameLoopTouchPosition]);
  return new $.GameLoopTouch(id, $.listTypeCheck(t1));
};

$.GameLoopTouchSet$ = function(gameLoop) {
  return new $.GameLoopTouchSet($.interceptedTypeCheck($.Map_Map($.JSInt, $.GameLoopTouch), "$isMap"), gameLoop);
};

$.Stats$ = function() {
  var t1 = new $.Stats($.Stopwatch$(), 0, 1000, 0, 0, 1000, 0, 0, 0, null, null, null, null, null, null, null);
  t1.Stats$0();
  return t1;
};

$.mat4$zero = function() {
  return new $.mat4($.interceptedTypeCheck($.Float32List_Float32List(16), "$isFloat32List"));
};

$.mat4$identity = function() {
  var t1 = new $.mat4($.interceptedTypeCheck($.Float32List_Float32List(16), "$isFloat32List"));
  t1.mat4$identity$0();
  return t1;
};

$.setViewMatrix = function(viewMatrix, cameraPosition, cameraFocusPosition, upDirection) {
  var z, x, y, t1, t2, rotatedEye, t3;
  z = cameraPosition.$sub(cameraPosition, cameraFocusPosition);
  z.normalize$0(z);
  x = upDirection.cross$1(z);
  x.normalize$0(x);
  y = z.cross$1(x);
  y.normalize$0(y);
  viewMatrix.setZero$0();
  $.doubleTypeCheck(1);
  t1 = viewMatrix.storage;
  if (15 >= t1.length)
    throw $.ioore(15);
  t1[15] = 1;
  t2 = x.get$x(x);
  $.doubleTypeCheck(t2);
  t1[0] = t2;
  t2 = x.get$y(x);
  $.doubleTypeCheck(t2);
  t1[1] = t2;
  t2 = x.get$z(x);
  $.doubleTypeCheck(t2);
  t1[2] = t2;
  t2 = y.get$x(y);
  $.doubleTypeCheck(t2);
  t1[4] = t2;
  t2 = y.get$y(y);
  $.doubleTypeCheck(t2);
  t1[5] = t2;
  t2 = y.get$z(y);
  $.doubleTypeCheck(t2);
  t1[6] = t2;
  t2 = z.get$x(z);
  $.doubleTypeCheck(t2);
  t1[8] = t2;
  t2 = z.get$y(z);
  $.doubleTypeCheck(t2);
  t1[9] = t2;
  t2 = z.get$z(z);
  $.doubleTypeCheck(t2);
  t1[10] = t2;
  viewMatrix.transpose$0();
  rotatedEye = $.propertyTypeCheck(viewMatrix.$mul(viewMatrix, cameraPosition.$negate(cameraPosition)), "$isvec3");
  t2 = rotatedEye.get$x(rotatedEye);
  $.doubleTypeCheck(t2);
  t3 = t1.length;
  if (12 >= t3)
    throw $.ioore(12);
  t1[12] = t2;
  t2 = rotatedEye.get$y(rotatedEye);
  $.doubleTypeCheck(t2);
  if (13 >= t3)
    throw $.ioore(13);
  t1[13] = t2;
  t2 = rotatedEye.get$z(rotatedEye);
  $.doubleTypeCheck(t2);
  if (14 >= t3)
    throw $.ioore(14);
  t1[14] = t2;
};

$.setPerspectiveMatrix = function(perspectiveMatrix, fovYRadians, aspectRatio, zNear, zFar) {
  var t1, height, width;
  $.numTypeCheck(aspectRatio);
  t1 = $.JSNumber_methods.toDouble$0(fovYRadians) * 0.5;
  height = Math.tan(t1) * $.JSInt_methods.toDouble$0(zNear);
  width = height * $.toDouble$0$n(aspectRatio);
  $.setFrustumMatrix(perspectiveMatrix, -width, width, -height, height, zNear, zFar);
};

$.setFrustumMatrix = function(perspectiveMatrix, left, right, bottom, $top, near, far) {
  var two_near, right_minus_left, top_minus_bottom, far_minus_near, view, t1, t2, t3, t4;
  left = $.JSDouble_methods.toDouble$0(left);
  right = $.JSDouble_methods.toDouble$0(right);
  bottom = $.JSDouble_methods.toDouble$0(bottom);
  $top = $.JSDouble_methods.toDouble$0($top);
  near = $.JSInt_methods.toDouble$0(near);
  far = $.JSInt_methods.toDouble$0(far);
  two_near = $.doubleTypeCheck(2 * near);
  right_minus_left = $.doubleTypeCheck(right - left);
  top_minus_bottom = $.doubleTypeCheck($top - bottom);
  far_minus_near = $.doubleTypeCheck(far - near);
  view = perspectiveMatrix.setZero$0();
  t1 = $.getInterceptor$n(two_near);
  t2 = t1.$div(two_near, right_minus_left);
  $.doubleTypeCheck(t2);
  t3 = view.storage;
  t4 = t3.length;
  if (0 >= t4)
    throw $.ioore(0);
  t3[0] = t2;
  t2 = t1.$div(two_near, top_minus_bottom);
  $.doubleTypeCheck(t2);
  if (5 >= t4)
    throw $.ioore(5);
  t3[5] = t2;
  if (typeof right_minus_left !== "number")
    throw $.iae(right_minus_left);
  if (8 >= t4)
    throw $.ioore(8);
  t3[8] = (right + left) / right_minus_left;
  if (typeof top_minus_bottom !== "number")
    throw $.iae(top_minus_bottom);
  if (9 >= t4)
    throw $.ioore(9);
  t3[9] = ($top + bottom) / top_minus_bottom;
  if (typeof far_minus_near !== "number")
    throw $.iae(far_minus_near);
  if (10 >= t4)
    throw $.ioore(10);
  t3[10] = -(far + near) / far_minus_near;
  $.doubleTypeCheck(-1);
  if (11 >= t4)
    throw $.ioore(11);
  t3[11] = -1;
  t1 = t1.$mul(two_near, far);
  if (14 >= t4)
    throw $.ioore(14);
  t3[14] = -t1 / far_minus_near;
};

$.vec3$ = function(x_, y_, z_) {
  var t1 = new $.vec3($.interceptedTypeCheck($.Float32List_Float32List(3), "$isFloat32List"));
  t1.vec3$3($.doubleTypeCheck(x_), $.doubleTypeCheck(y_), $.doubleTypeCheck(z_));
  return t1;
};

$.vec3$zero = function() {
  return new $.vec3($.interceptedTypeCheck($.Float32List_Float32List(3), "$isFloat32List"));
};

$.vec4$ = function(x_, y_, z_, w_) {
  var t1 = new $.vec4($.interceptedTypeCheck($.Float32List_Float32List(4), "$isFloat32List"));
  t1.vec4$4($.doubleTypeCheck(x_), $.doubleTypeCheck(y_), $.doubleTypeCheck(z_), $.doubleTypeCheck(w_));
  return t1;
};

$.vec4$zero = function() {
  return new $.vec4($.interceptedTypeCheck($.Float32List_Float32List(4), "$isFloat32List"));
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.IsolateNatives__processWorkerMessage.$isGameLoopTouchEventFunction = true;
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.Primitives__throwFormatException.$is_FutureOnError = true;
$.wrapException.call$1 = $.wrapException;
$.wrapException.$name = "wrapException";
$.wrapException.$is_FutureOnError = true;
$.wrapException.$is_FutureErrorTest = true;
$.wrapException.$is_ErrorCallback = true;
$.wrapException.$isRequestAnimationFrameCallback = true;
$.wrapException.$isEventListener = true;
$.wrapException.$isGameLoopUpdateFunction = true;
$.wrapException.$isGameLoopRenderFunction = true;
$.wrapException.$isGameLoopResizeFunction = true;
$.wrapException.$isGameLoopFullscreenChangeFunction = true;
$.wrapException.$isGameLoopPointerLockChangeFunction = true;
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.DartError_toStringWrapper.$isVoidCallback = true;
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInChrome.$is_FutureOnError = true;
$.typeNameInChrome.$is_ErrorCallback = true;
$.typeNameInChrome.$isRequestAnimationFrameCallback = true;
$.typeNameInChrome.$isEventListener = true;
$.typeNameInChrome.$isGameLoopUpdateFunction = true;
$.typeNameInChrome.$isGameLoopRenderFunction = true;
$.typeNameInChrome.$isGameLoopResizeFunction = true;
$.typeNameInChrome.$isGameLoopFullscreenChangeFunction = true;
$.typeNameInChrome.$isGameLoopPointerLockChangeFunction = true;
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInSafari.$is_FutureOnError = true;
$.typeNameInSafari.$is_ErrorCallback = true;
$.typeNameInSafari.$isRequestAnimationFrameCallback = true;
$.typeNameInSafari.$isEventListener = true;
$.typeNameInSafari.$isGameLoopUpdateFunction = true;
$.typeNameInSafari.$isGameLoopRenderFunction = true;
$.typeNameInSafari.$isGameLoopResizeFunction = true;
$.typeNameInSafari.$isGameLoopFullscreenChangeFunction = true;
$.typeNameInSafari.$isGameLoopPointerLockChangeFunction = true;
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInOpera.$is_FutureOnError = true;
$.typeNameInOpera.$is_ErrorCallback = true;
$.typeNameInOpera.$isRequestAnimationFrameCallback = true;
$.typeNameInOpera.$isEventListener = true;
$.typeNameInOpera.$isGameLoopUpdateFunction = true;
$.typeNameInOpera.$isGameLoopRenderFunction = true;
$.typeNameInOpera.$isGameLoopResizeFunction = true;
$.typeNameInOpera.$isGameLoopFullscreenChangeFunction = true;
$.typeNameInOpera.$isGameLoopPointerLockChangeFunction = true;
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInFirefox.$is_FutureOnError = true;
$.typeNameInFirefox.$is_ErrorCallback = true;
$.typeNameInFirefox.$isRequestAnimationFrameCallback = true;
$.typeNameInFirefox.$isEventListener = true;
$.typeNameInFirefox.$isGameLoopUpdateFunction = true;
$.typeNameInFirefox.$isGameLoopRenderFunction = true;
$.typeNameInFirefox.$isGameLoopResizeFunction = true;
$.typeNameInFirefox.$isGameLoopFullscreenChangeFunction = true;
$.typeNameInFirefox.$isGameLoopPointerLockChangeFunction = true;
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.typeNameInIE.$is_FutureOnError = true;
$.typeNameInIE.$is_ErrorCallback = true;
$.typeNameInIE.$isRequestAnimationFrameCallback = true;
$.typeNameInIE.$isEventListener = true;
$.typeNameInIE.$isGameLoopUpdateFunction = true;
$.typeNameInIE.$isGameLoopRenderFunction = true;
$.typeNameInIE.$isGameLoopResizeFunction = true;
$.typeNameInIE.$isGameLoopFullscreenChangeFunction = true;
$.typeNameInIE.$isGameLoopPointerLockChangeFunction = true;
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.constructorNameFallback.$is_FutureOnError = true;
$.constructorNameFallback.$is_ErrorCallback = true;
$.constructorNameFallback.$isRequestAnimationFrameCallback = true;
$.constructorNameFallback.$isEventListener = true;
$.constructorNameFallback.$isGameLoopUpdateFunction = true;
$.constructorNameFallback.$isGameLoopRenderFunction = true;
$.constructorNameFallback.$isGameLoopResizeFunction = true;
$.constructorNameFallback.$isGameLoopFullscreenChangeFunction = true;
$.constructorNameFallback.$isGameLoopPointerLockChangeFunction = true;
$._asyncRunCallback.call$0 = $._asyncRunCallback;
$._asyncRunCallback.$name = "_asyncRunCallback";
$._asyncRunCallback.$isVoidCallback = true;
$.Element__determineMouseWheelEventType.call$1 = $.Element__determineMouseWheelEventType;
$.Element__determineMouseWheelEventType.$name = "Element__determineMouseWheelEventType";
$.Element__determineMouseWheelEventType.$is_FutureOnError = true;
$.ShaderProgram.$isObject = true;
$.ShaderProgram.$isObject = true;
$.ShaderProgram.$isShaderProgram = true;
$.ShaderProgram.$isShaderProgram = true;
$.Gamepad.$isObject = true;
$.Gamepad.$isObject = true;
$.Instance.$isInstance = true;
$.Instance.$isInstance = true;
$.Instance.$isObject = true;
$.Instance.$isObject = true;
$.Model.$isModel = true;
$.Model.$isModel = true;
$.Model.$isObject = true;
$.Model.$isObject = true;
$.TextureInfo.$isObject = true;
$.TextureInfo.$isObject = true;
$.TextureInfo.$isTextureInfo = true;
$.TextureInfo.$isTextureInfo = true;
$.HttpRequest.$isHttpRequest = true;
$.HttpRequest.$isHttpRequest = true;
$.HttpRequest.$isObject = true;
$.HttpRequest.$isObject = true;
$.ElementInstance.$isObject = true;
$.ElementInstance.$isObject = true;
$.ElementInstance.$isElementInstance = true;
$.ElementInstance.$isElementInstance = true;
$.SourceBuffer.$isObject = true;
$.SourceBuffer.$isObject = true;
$.ReceivePort.$isObject = true;
$.ReceivePort.$isObject = true;
$.ReceivePort.$isReceivePort = true;
$.ReceivePort.$isReceivePort = true;
$.SpeechGrammar.$isObject = true;
$.SpeechGrammar.$isObject = true;
$.Rect.$isObject = true;
$.Rect.$isObject = true;
$.SpeechInputResult.$isSpeechInputResult = true;
$.SpeechInputResult.$isSpeechInputResult = true;
$.SpeechInputResult.$isObject = true;
$.SpeechInputResult.$isObject = true;
$.Duration.$isObject = true;
$.Duration.$isObject = true;
$.Duration.$isObject = true;
$.Duration.$isObject = true;
$.SpeechRecognitionResult.$isSpeechRecognitionResult = true;
$.SpeechRecognitionResult.$isSpeechRecognitionResult = true;
$.SpeechRecognitionResult.$isObject = true;
$.SpeechRecognitionResult.$isObject = true;
$.StyleSheet.$isStyleSheet = true;
$.StyleSheet.$isStyleSheet = true;
$.StyleSheet.$isObject = true;
$.StyleSheet.$isObject = true;
$.KeyboardEvent.$isEvent = true;
$.KeyboardEvent.$isEvent = true;
$.KeyboardEvent.$isObject = true;
$.KeyboardEvent.$isObject = true;
$.KeyboardEvent.$isKeyboardEvent = true;
$.KeyboardEvent.$isKeyboardEvent = true;
$.TextTrack.$isObject = true;
$.TextTrack.$isObject = true;
$.Length.$isObject = true;
$.Length.$isObject = true;
$.TextTrackCue.$isObject = true;
$.TextTrackCue.$isObject = true;
$._IsolateContext.$is_IsolateContext = true;
$._IsolateContext.$is_IsolateContext = true;
$._IsolateContext.$isObject = true;
$._IsolateContext.$isObject = true;
$._IsolateContext.$isObject = true;
$._IsolateContext.$isObject = true;
$.Touch.$isObject = true;
$.Touch.$isObject = true;
$._IsolateEvent.$is_IsolateEvent = true;
$._IsolateEvent.$is_IsolateEvent = true;
$._IsolateEvent.$isObject = true;
$._IsolateEvent.$isObject = true;
$._ManagerStub.$is_ManagerStub = true;
$._ManagerStub.$is_ManagerStub = true;
$._ManagerStub.$isObject = true;
$._ManagerStub.$isObject = true;
$.Map.$isObject = true;
$.Map.$isObject = true;
$.Number.$isObject = true;
$.Number.$isObject = true;
$.PathSeg.$isObject = true;
$.PathSeg.$isObject = true;
$.Shader.$isShader = true;
$.Shader.$isShader = true;
$.Shader.$isObject = true;
$.Shader.$isObject = true;
$.CssRule.$isCssRule = true;
$.CssRule.$isCssRule = true;
$.CssRule.$isObject = true;
$.CssRule.$isObject = true;
$.Texture.$isTexture = true;
$.Texture.$isTexture = true;
$.Texture.$isObject = true;
$.Texture.$isObject = true;
$.MimeType.$isObject = true;
$.MimeType.$isObject = true;
$.MouseEvent.$isEvent = true;
$.MouseEvent.$isEvent = true;
$.MouseEvent.$isMouseEvent = true;
$.MouseEvent.$isMouseEvent = true;
$.MouseEvent.$isObject = true;
$.MouseEvent.$isObject = true;
$._CSSValue.$isObject = true;
$._CSSValue.$isObject = true;
$.Node.$isObject = true;
$.Node.$isObject = true;
$.Node.$isNode = true;
$.Node.$isNode = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.JSArray.$isObject = true;
$.JSArray.$isList = true;
$.JSArray.$isList = true;
$._GameLoopTouchEvent.$is_GameLoopTouchEvent = true;
$._GameLoopTouchEvent.$is_GameLoopTouchEvent = true;
$._GameLoopTouchEvent.$isObject = true;
$._GameLoopTouchEvent.$isObject = true;
$.GameLoopTouchPosition.$isObject = true;
$.GameLoopTouchPosition.$isObject = true;
$.GameLoopTouchPosition.$isGameLoopTouchPosition = true;
$.GameLoopTouchPosition.$isGameLoopTouchPosition = true;
$.GameLoopTouchPosition.$isObject = true;
$.GameLoopTouchPosition.$isObject = true;
$.GameLoopTouch.$isObject = true;
$.GameLoopTouch.$isObject = true;
$.GameLoopTouch.$isGameLoopTouch = true;
$.GameLoopTouch.$isGameLoopTouch = true;
$.JSNumber.$isnum = true;
$.JSNumber.$isnum = true;
$.JSNumber.$isObject = true;
$.JSNumber.$isObject = true;
$.JSNumber.$isObject = true;
$.JSNumber.$isObject = true;
$.JSNumber.$isObject = true;
$.JSNumber.$isObject = true;
$._EntrySync.$isObject = true;
$._EntrySync.$isObject = true;
$.JSDouble.$isdouble = true;
$.JSDouble.$isdouble = true;
$.JSDouble.$isnum = true;
$.JSDouble.$isnum = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSDouble.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isObject = true;
$.JSString.$isString = true;
$.JSString.$isString = true;
$.DigitalButton.$isDigitalButton = true;
$.DigitalButton.$isDigitalButton = true;
$.DigitalButton.$isObject = true;
$.DigitalButton.$isObject = true;
$.GameLoopTimer.$isObject = true;
$.GameLoopTimer.$isObject = true;
$.GameLoopTimer.$isGameLoopTimer = true;
$.GameLoopTimer.$isGameLoopTimer = true;
$.Element.$isObject = true;
$.Element.$isObject = true;
$.Element.$isObject = true;
$.Element.$isObject = true;
$.Element.$isElement = true;
$.Element.$isElement = true;
$.Element.$isNode = true;
$.Element.$isNode = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isint = true;
$.JSInt.$isint = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isnum = true;
$.JSInt.$isnum = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.JSInt.$isObject = true;
$.Entry.$isEntry = true;
$.Entry.$isEntry = true;
$.Entry.$isObject = true;
$.Entry.$isObject = true;
$.Transform.$isObject = true;
$.Transform.$isObject = true;
$.Plugin.$isObject = true;
$.Plugin.$isObject = true;
$.File.$isObject = true;
$.File.$isObject = true;
$.File.$isFile = true;
$.File.$isFile = true;
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.EventStreamProvider_load = new $.EventStreamProvider("load");
$.HtmlDocument_methods = $.HtmlDocument.prototype;
$.JSNull_methods = $.JSNull.prototype;
$.JSDouble_methods = $.JSDouble.prototype;
$._CustomEventStreamProvider__determineMouseWheelEventType = new $._CustomEventStreamProvider($.Element__determineMouseWheelEventType);
$.EventStreamProvider_touchstart = new $.EventStreamProvider("touchstart");
$.EventStreamProvider_webkitfullscreenchange = new $.EventStreamProvider("webkitfullscreenchange");
$.EventStreamProvider_webkitpointerlockchange = new $.EventStreamProvider("webkitpointerlockchange");
$.EventStreamProvider_mousemove = new $.EventStreamProvider("mousemove");
$.EventStreamProvider_open = new $.EventStreamProvider("open");
$.EventStreamProvider_resize = new $.EventStreamProvider("resize");
$.EventStreamProvider_webkitfullscreenerror = new $.EventStreamProvider("webkitfullscreenerror");
$.Duration_0 = new $.Duration(0);
$.EventStreamProvider_success = new $.EventStreamProvider("success");
$.EventStreamProvider_mouseup = new $.EventStreamProvider("mouseup");
$.NodeList_methods = $.NodeList.prototype;
$.C_NullThrownError = new $.NullThrownError();
$.JSInt_methods = $.JSInt.prototype;
$.EventStreamProvider_error = new $.EventStreamProvider("error");
$.EventStreamProvider_close = new $.EventStreamProvider("close");
$._WorkerStub_methods = $._WorkerStub.prototype;
$.EventStreamProvider_keydown = new $.EventStreamProvider("keydown");
$.Window_methods = $.Window.prototype;
$.Float32List_methods = $.Float32List.prototype;
$.HttpRequest_methods = $.HttpRequest.prototype;
$.JSArray_methods = $.JSArray.prototype;
$.C_CloseToken = new $.CloseToken();
$.EventStreamProvider_click = new $.EventStreamProvider("click");
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.EventStreamProvider_mousedown = new $.EventStreamProvider("mousedown");
$.EventStreamProvider_touchend = new $.EventStreamProvider("touchend");
$.EventStreamProvider_keyup = new $.EventStreamProvider("keyup");
$.EventStreamProvider_message = new $.EventStreamProvider("message");
$.EventStreamProvider_touchmove = new $.EventStreamProvider("touchmove");
$.EventStreamProvider_progress = new $.EventStreamProvider("progress");
$.Expando__keyCount = 0;
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.canvas = null;
$.canvasAspect = null;
$.debugLostContext = true;
$.programList = null;
$.shaderCache = null;
$.textureTable = null;
$.fieldOfViewYRadians = 0.7853981633974483;
$.backfaceCulling = false;
$.fullRateFrames = 0;
$.stats = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_initEvent$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_initEvent$3(receiver, a0, a1, a2);
};
$.$$dom_removeChild$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_removeChild$1(receiver, a0);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mod$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$mod(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.append$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).append$1(receiver, a0);
};
$.attachShader$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).attachShader$2(receiver, a0, a1);
};
$.clear$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
$.compileShader$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).compileShader$1(receiver, a0);
};
$.createProgram$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).createProgram$0(receiver);
};
$.createShader$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).createShader$1(receiver, a0);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$client$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$client(receiver);
};
$.get$first$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$first(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$height$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$height(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$keyCode$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$keyCode(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$model$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$model(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$onClose$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClose(receiver);
};
$.get$onError$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onError(receiver);
};
$.get$onMessage$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMessage(receiver);
};
$.get$onOpen$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onOpen(receiver);
};
$.get$responseText$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$responseText(receiver);
};
$.get$result$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$result(receiver);
};
$.get$values$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$values(receiver);
};
$.get$width$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$width(receiver);
};
$.getContext3d$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).getContext3d$0(receiver);
};
$.getProgramInfoLog$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getProgramInfoLog$1(receiver, a0);
};
$.getProgramParameter$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).getProgramParameter$2(receiver, a0, a1);
};
$.getShaderInfoLog$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getShaderInfoLog$1(receiver, a0);
};
$.getShaderParameter$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).getShaderParameter$2(receiver, a0, a1);
};
$.getUniformLocation$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
};
$.isContextLost$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).isContextLost$0(receiver);
};
$.linkProgram$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).linkProgram$1(receiver, a0);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.send$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).send$1(receiver, a0);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$backgroundColor$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$backgroundColor(receiver, value);
};
$.set$display$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$display(receiver, value);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$href$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$href(receiver, value);
};
$.set$id$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$id(receiver, value);
};
$.set$src$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$src(receiver, value);
};
$.set$text$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$text(receiver, value);
};
$.set$type$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$type(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.setRange$3$ax = function(receiver, a0, a1, a2) {
  return $.getInterceptor$ax(receiver).setRange$3(receiver, a0, a1, a2);
};
$.shaderSource$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).shaderSource$2(receiver, a0, a1);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.startsWith$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.toDouble$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toDouble$0(receiver);
};
$.toInt$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).toInt$0(receiver);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.uniformMatrix4fv$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).uniformMatrix4fv$3(receiver, a0, a1, a2);
};
$.write$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).write$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.boolTypeCheck($.get$globalThis().postMessage !== void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error", null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return $.listTypeCheck([]);
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "pMatrix", "pMatrix", "get$pMatrix", function() {
  return $.mat4$zero();
});
Isolate.$lazy($, "cam", "cam", "get$cam", function() {
  return $.Camera$($.vec3$(0, 0, 15), $.vec3$(0, 0, -1), $.vec3$(0, 1, 0));
});
Isolate.$lazy($, "_buttonIds", "Keyboard__buttonIds", "get$Keyboard__buttonIds", function() {
  return $.listTypeCheck([65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 16, 17, 18, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 192, 13, 38, 40, 37, 39]);
});
Isolate.$lazy($, "_buttonIds", "Mouse__buttonIds", "get$Mouse__buttonIds", function() {
  return $.listTypeCheck([0, 1, 2]);
});
// Native classes
$.defineNativeMethods("Worker", $._WorkerStub);

$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethodsNonleaf("AbstractWorker", $.AbstractWorker);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("ApplicationCache|DOMApplicationCache|OfflineResourceList", $.ApplicationCache);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("BarInfo", $.BarInfo);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethods("CanvasProxy", $.CanvasProxy);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("Coordinates", $.Coordinates);

$.defineNativeMethods("Crypto", $.Crypto);

$.defineNativeMethods("CSSCharsetRule", $.CssCharsetRule);

$.defineNativeMethods("WebKitCSSFilterRule", $.CssFilterRule);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSSFontFaceRule", $.CssFontFaceRule);

$.defineNativeMethods("CSSHostRule", $.CssHostRule);

$.defineNativeMethods("CSSImportRule", $.CssImportRule);

$.defineNativeMethods("WebKitCSSKeyframeRule", $.CssKeyframeRule);

$.defineNativeMethods("WebKitCSSKeyframesRule", $.CssKeyframesRule);

$.defineNativeMethods("CSSMediaRule", $.CssMediaRule);

$.defineNativeMethods("CSSPageRule", $.CssPageRule);

$.defineNativeMethods("WebKitCSSRegionRule", $.CssRegionRule);

$.defineNativeMethodsNonleaf("CSSRule", $.CssRule);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CSSStyleRule", $.CssStyleRule);

$.defineNativeMethods("CSSStyleSheet", $.CssStyleSheet);

$.defineNativeMethods("CSSUnknownRule", $.CssUnknownRule);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("Clipboard", $.DataTransfer);

$.defineNativeMethods("DataTransferItem", $.DataTransferItem);

$.defineNativeMethods("DataTransferItemList", $.DataTransferItemList);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceAcceleration", $.DeviceAcceleration);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("DeviceRotationRate", $.DeviceRotationRate);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("DirectoryEntry", $.DirectoryEntry);

$.defineNativeMethods("DirectoryReader", $.DirectoryReader);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethods("DOMImplementation", $.DomImplementation);

$.defineNativeMethods("DOMParser", $.DomParser);

$.defineNativeMethods("DOMSettableTokenList", $.DomSettableTokenList);

$.defineNativeMethods("DOMStringList", $.DomStringList);

$.defineNativeMethodsNonleaf("DOMTokenList", $.DomTokenList);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethodsNonleaf("Entry", $.Entry);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethods("EventSource", $.EventSource);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File);

$.defineNativeMethods("FileEntry", $.FileEntry);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FileList", $.FileList);

$.defineNativeMethods("FileReader", $.FileReader);

$.defineNativeMethods("DOMFileSystem", $.FileSystem);

$.defineNativeMethods("FileWriter", $.FileWriter);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("FontLoader", $.FontLoader);

$.defineNativeMethods("FormData", $.FormData);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("Gamepad", $.Gamepad);

$.defineNativeMethods("Geolocation", $.Geolocation);

$.defineNativeMethods("Geoposition", $.Geoposition);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethods("History", $.History);

$.defineNativeMethods("HTMLAllCollection", $.HtmlAllCollection);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequest", $.HttpRequest);

$.defineNativeMethods("XMLHttpRequestException", $.HttpRequestException);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("XMLHttpRequestUpload", $.HttpRequestUpload);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("ImageData", $.ImageData);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("LocalMediaStream", $.LocalMediaStream);

$.defineNativeMethods("Location", $.Location);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethods("MediaController", $.MediaController);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaList", $.MediaList);

$.defineNativeMethods("MediaQueryList", $.MediaQueryList);

$.defineNativeMethods("MediaSource", $.MediaSource);

$.defineNativeMethodsNonleaf("MediaStream", $.MediaStream);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrack", $.MediaStreamTrack);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("MemoryInfo", $.MemoryInfo);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageChannel", $.MessageChannel);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("MessagePort", $.MessagePort);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("Metadata", $.Metadata);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("MimeType", $.MimeType);

$.defineNativeMethods("MimeTypeArray", $.MimeTypeArray);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("MutationObserver|WebKitMutationObserver", $.MutationObserver);

$.defineNativeMethods("MutationRecord", $.MutationRecord);

$.defineNativeMethods("WebKitNamedFlow", $.NamedFlow);

$.defineNativeMethods("WebKitNamedFlowCollection", $.NamedFlowCollection);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeFilter", $.NodeFilter);

$.defineNativeMethods("NodeIterator", $.NodeIterator);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("Notification", $.Notification);

$.defineNativeMethods("NotificationCenter", $.NotificationCenter);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("Path", $.Path);

$.defineNativeMethods("Performance", $.Performance);

$.defineNativeMethodsNonleaf("PerformanceEntry", $.PerformanceEntry);

$.defineNativeMethods("PerformanceEntryList", $.PerformanceEntryList);

$.defineNativeMethods("PerformanceMark", $.PerformanceMark);

$.defineNativeMethods("PerformanceMeasure", $.PerformanceMeasure);

$.defineNativeMethods("PerformanceNavigation", $.PerformanceNavigation);

$.defineNativeMethods("PerformanceResourceTiming", $.PerformanceResourceTiming);

$.defineNativeMethods("PerformanceTiming", $.PerformanceTiming);

$.defineNativeMethods("Plugin", $.Plugin);

$.defineNativeMethods("PluginArray", $.PluginArray);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("Range", $.Range);

$.defineNativeMethods("RangeException", $.RangeException);

$.defineNativeMethods("RTCDataChannel", $.RtcDataChannel);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFSender", $.RtcDtmfSender);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidate", $.RtcIceCandidate);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("RTCPeerConnection", $.RtcPeerConnection);

$.defineNativeMethods("RTCSessionDescription", $.RtcSessionDescription);

$.defineNativeMethods("RTCStatsReport", $.RtcStatsReport);

$.defineNativeMethods("RTCStatsResponse", $.RtcStatsResponse);

$.defineNativeMethods("Screen", $.Screen);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("ScriptProfile", $.ScriptProfile);

$.defineNativeMethods("ScriptProfileNode", $.ScriptProfileNode);

$.defineNativeMethods("SecurityPolicy", $.SecurityPolicy);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("Selection", $.Selection);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("SourceBuffer", $.SourceBuffer);

$.defineNativeMethods("SourceBufferList", $.SourceBufferList);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechGrammar", $.SpeechGrammar);

$.defineNativeMethods("SpeechGrammarList", $.SpeechGrammarList);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechInputResult", $.SpeechInputResult);

$.defineNativeMethods("SpeechRecognition", $.SpeechRecognition);

$.defineNativeMethods("SpeechRecognitionAlternative", $.SpeechRecognitionAlternative);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechRecognitionResult", $.SpeechRecognitionResult);

$.defineNativeMethods("Storage", $.Storage);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("StorageInfo", $.StorageInfo);

$.defineNativeMethods("StorageQuota", $.StorageQuota);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("StyleMedia", $.StyleMedia);

$.defineNativeMethodsNonleaf("StyleSheet", $.StyleSheet);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("TextMetrics", $.TextMetrics);

$.defineNativeMethods("TextTrack", $.TextTrack);

$.defineNativeMethods("TextTrackCue", $.TextTrackCue);

$.defineNativeMethods("TextTrackCueList", $.TextTrackCueList);

$.defineNativeMethods("TextTrackList", $.TextTrackList);

$.defineNativeMethods("TimeRanges", $.TimeRanges);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("Touch", $.Touch);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("TouchList", $.TouchList);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethods("TreeWalker", $.TreeWalker);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("URL", $.Url);

$.defineNativeMethods("ValidityState", $.ValidityState);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("WebSocket", $.WebSocket);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("Worker", $.Worker);

$.defineNativeMethods("XPathEvaluator", $.XPathEvaluator);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("XPathExpression", $.XPathExpression);

$.defineNativeMethods("XPathNSResolver", $.XPathNSResolver);

$.defineNativeMethods("XPathResult", $.XPathResult);

$.defineNativeMethods("XMLSerializer", $.XmlSerializer);

$.defineNativeMethods("XSLTProcessor", $.XsltProcessor);

$.defineNativeMethodsNonleaf("CSSValue", $._CSSValue);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("ClientRectList", $._ClientRectList);

$.defineNativeMethods("CSSRuleList", $._CssRuleList);

$.defineNativeMethods("CSSValueList", $._CssValueList);

$.defineNativeMethods("WebKitPoint", $._DomPoint);

$.defineNativeMethods("EntryArray", $._EntryArray);

$.defineNativeMethods("EntryArraySync", $._EntryArraySync);

$.defineNativeMethods("EntrySync", $._EntrySync);

$.defineNativeMethods("GamepadList", $._GamepadList);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("SpeechInputResultList", $._SpeechInputResultList);

$.defineNativeMethods("SpeechRecognitionResultList", $._SpeechRecognitionResultList);

$.defineNativeMethods("StyleSheetList", $._StyleSheetList);

$.defineNativeMethodsNonleaf("IDBCursor", $.Cursor);

$.defineNativeMethods("IDBCursorWithValue", $.CursorWithValue);

$.defineNativeMethods("IDBDatabase", $.Database);

$.defineNativeMethods("IDBFactory", $.IdbFactory);

$.defineNativeMethods("IDBIndex", $.Index);

$.defineNativeMethods("IDBKeyRange", $.KeyRange);

$.defineNativeMethods("IDBObjectStore", $.ObjectStore);

$.defineNativeMethods("IDBOpenDBRequest", $.OpenDBRequest);

$.defineNativeMethodsNonleaf("IDBRequest", $.Request);

$.defineNativeMethods("IDBTransaction", $.Transaction);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAngle", $.Angle);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedAngle", $.AnimatedAngle);

$.defineNativeMethods("SVGAnimatedBoolean", $.AnimatedBoolean);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedInteger", $.AnimatedInteger);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedPreserveAspectRatio", $.AnimatedPreserveAspectRatio);

$.defineNativeMethods("SVGAnimatedRect", $.AnimatedRect);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethods("SVGAnimatedTransformList", $.AnimatedTransformList);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGElementInstance", $.ElementInstance);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLength", $.Length);

$.defineNativeMethods("SVGLengthList", $.LengthList);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMatrix", $.Matrix);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGNumber", $.Number);

$.defineNativeMethods("SVGNumberList", $.NumberList);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethodsNonleaf("SVGPathSeg", $.PathSeg);

$.defineNativeMethods("SVGPathSegArcAbs", $.PathSegArcAbs);

$.defineNativeMethods("SVGPathSegArcRel", $.PathSegArcRel);

$.defineNativeMethods("SVGPathSegClosePath", $.PathSegClosePath);

$.defineNativeMethods("SVGPathSegCurvetoCubicAbs", $.PathSegCurvetoCubicAbs);

$.defineNativeMethods("SVGPathSegCurvetoCubicRel", $.PathSegCurvetoCubicRel);

$.defineNativeMethods("SVGPathSegCurvetoCubicSmoothAbs", $.PathSegCurvetoCubicSmoothAbs);

$.defineNativeMethods("SVGPathSegCurvetoCubicSmoothRel", $.PathSegCurvetoCubicSmoothRel);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticAbs", $.PathSegCurvetoQuadraticAbs);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticRel", $.PathSegCurvetoQuadraticRel);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticSmoothAbs", $.PathSegCurvetoQuadraticSmoothAbs);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticSmoothRel", $.PathSegCurvetoQuadraticSmoothRel);

$.defineNativeMethods("SVGPathSegLinetoAbs", $.PathSegLinetoAbs);

$.defineNativeMethods("SVGPathSegLinetoHorizontalAbs", $.PathSegLinetoHorizontalAbs);

$.defineNativeMethods("SVGPathSegLinetoHorizontalRel", $.PathSegLinetoHorizontalRel);

$.defineNativeMethods("SVGPathSegLinetoRel", $.PathSegLinetoRel);

$.defineNativeMethods("SVGPathSegLinetoVerticalAbs", $.PathSegLinetoVerticalAbs);

$.defineNativeMethods("SVGPathSegLinetoVerticalRel", $.PathSegLinetoVerticalRel);

$.defineNativeMethods("SVGPathSegList", $.PathSegList);

$.defineNativeMethods("SVGPathSegMovetoAbs", $.PathSegMovetoAbs);

$.defineNativeMethods("SVGPathSegMovetoRel", $.PathSegMovetoRel);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPoint", $.Point0);

$.defineNativeMethods("SVGPointList", $.PointList);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGPreserveAspectRatio", $.PreserveAspectRatio);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRect", $.Rect0);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGRenderingIntent", $.RenderingIntent);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStringList", $.StringList);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGTransform", $.Transform);

$.defineNativeMethods("SVGTransformList", $.TransformList);

$.defineNativeMethods("SVGUnitTypes", $.UnitTypes);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGViewSpec", $.ViewSpec);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethods("SVGElementInstanceList", $._ElementInstanceList);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethods("SVGColor", $._SVGColor);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("ArrayBuffer", $.ByteBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("DataView", $.ByteData);

$.defineNativeMethods("Float32Array", $.Float32List);

$.defineNativeMethods("Float64Array", $.Float64List);

$.defineNativeMethods("Int16Array", $.Int16List);

$.defineNativeMethods("Int32Array", $.Int32List);

$.defineNativeMethods("Int8Array", $.Int8List);

$.defineNativeMethods("Uint16Array", $.Uint16List);

$.defineNativeMethods("Uint32Array", $.Uint32List);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);

$.defineNativeMethods("AnalyserNode", $.AnalyserNode);

$.defineNativeMethods("AudioBuffer", $.AudioBuffer);

$.defineNativeMethods("AudioBufferSourceNode", $.AudioBufferSourceNode);

$.defineNativeMethodsNonleaf("AudioContext", $.AudioContext);

$.defineNativeMethods("AudioDestinationNode", $.AudioDestinationNode);

$.defineNativeMethods("AudioListener", $.AudioListener);

$.defineNativeMethodsNonleaf("AudioNode", $.AudioNode);

$.defineNativeMethods("AudioParam", $.AudioParam);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethodsNonleaf("AudioSourceNode", $.AudioSourceNode);

$.defineNativeMethods("BiquadFilterNode", $.BiquadFilterNode);

$.defineNativeMethods("ChannelMergerNode", $.ChannelMergerNode);

$.defineNativeMethods("ChannelSplitterNode", $.ChannelSplitterNode);

$.defineNativeMethods("ConvolverNode", $.ConvolverNode);

$.defineNativeMethods("DelayNode", $.DelayNode);

$.defineNativeMethods("DynamicsCompressorNode", $.DynamicsCompressorNode);

$.defineNativeMethods("GainNode", $.GainNode);

$.defineNativeMethods("MediaElementAudioSourceNode", $.MediaElementAudioSourceNode);

$.defineNativeMethods("MediaStreamAudioDestinationNode", $.MediaStreamAudioDestinationNode);

$.defineNativeMethods("MediaStreamAudioSourceNode", $.MediaStreamAudioSourceNode);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("OfflineAudioContext", $.OfflineAudioContext);

$.defineNativeMethods("OscillatorNode", $.OscillatorNode);

$.defineNativeMethods("PannerNode", $.PannerNode);

$.defineNativeMethods("ScriptProcessorNode", $.ScriptProcessorNode);

$.defineNativeMethods("WaveShaperNode", $.WaveShaperNode);

$.defineNativeMethods("WaveTable", $.WaveTable);

$.defineNativeMethods("WebGLActiveInfo", $.ActiveInfo);

$.defineNativeMethods("WebGLBuffer", $.Buffer);

$.defineNativeMethods("WebGLCompressedTextureATC", $.CompressedTextureAtc);

$.defineNativeMethods("WebGLCompressedTexturePVRTC", $.CompressedTexturePvrtc);

$.defineNativeMethods("WebGLCompressedTextureS3TC", $.CompressedTextureS3TC);

$.defineNativeMethods("WebGLContextAttributes", $.ContextAttributes);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("WebGLDebugRendererInfo", $.DebugRendererInfo);

$.defineNativeMethods("WebGLDebugShaders", $.DebugShaders);

$.defineNativeMethods("WebGLDepthTexture", $.DepthTexture);

$.defineNativeMethods("EXTDrawBuffers", $.ExtDrawBuffers);

$.defineNativeMethods("EXTTextureFilterAnisotropic", $.ExtTextureFilterAnisotropic);

$.defineNativeMethods("WebGLFramebuffer", $.Framebuffer);

$.defineNativeMethods("WebGLLoseContext", $.LoseContext);

$.defineNativeMethods("OESElementIndexUint", $.OesElementIndexUint);

$.defineNativeMethods("OESStandardDerivatives", $.OesStandardDerivatives);

$.defineNativeMethods("OESTextureFloat", $.OesTextureFloat);

$.defineNativeMethods("OESTextureHalfFloat", $.OesTextureHalfFloat);

$.defineNativeMethods("OESVertexArrayObject", $.OesVertexArrayObject);

$.defineNativeMethods("WebGLProgram", $.Program);

$.defineNativeMethods("WebGLRenderbuffer", $.Renderbuffer);

$.defineNativeMethods("WebGLRenderingContext", $.RenderingContext);

$.defineNativeMethods("WebGLShader", $.Shader);

$.defineNativeMethods("WebGLShaderPrecisionFormat", $.ShaderPrecisionFormat);

$.defineNativeMethods("WebGLTexture", $.Texture);

$.defineNativeMethods("WebGLUniformLocation", $.UniformLocation);

$.defineNativeMethods("WebGLVertexArrayObjectOES", $.VertexArrayObject);

$.defineNativeMethods("Database", $.SqlDatabase);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

$.defineNativeMethods("SQLResultSet", $.SqlResultSet);

$.defineNativeMethods("SQLResultSetRowList", $.SqlResultSetRowList);

$.defineNativeMethods("SQLTransaction", $.SqlTransaction);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.main.call$0 = $.main;
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        isolateProperties[cls] = defineClass(name, cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=negentropia_home.dart.js.map
