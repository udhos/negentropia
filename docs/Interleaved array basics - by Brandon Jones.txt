Interleaved array basics - by Brandon Jones

http://blog.tojicode.com/2011/05/interleaved-array-basics.html

But it's often times more efficient and easier to have them all as one array, like so:

var verts = [
    1, 1, 1, 0, 1, // (x, y, z), (s, t)...
    2, 2, 2, 0, 1,
    3, 3, 3, 0, 1,
];

var vertBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verts), gl.STATIC_DRAW);

When we set up the vertexPointers for this array, we need to make two calls to vertexAttribPointer.

gl.bindBuffer(gl.ARRAY_BUFFER, vertBuffer);
gl.vertexAttribPointer(shader_attrib_position, 3, gl.FLOAT, false, 20, 0);
gl.vertexAttribPointer(shader_attrib_texcoord, 2, gl.FLOAT, false, 20, 12);

Let's examine what that means: The first attribute (our position), is comprised of 3 floats spaced 20 bytes apart, starting at byte 0.
The second attribute (our texcoord), is comprised of 2 floats spaced 20 bytes apart, starting at byte 12 (or 3 floats in).
And that's it! Two attribute types in one buffer! And we can do this for as many attributes as we need (within reason).
It's not uncommon to have a single buffer that contains position, texcoords, normals, binormals, and vertex weights in it!

--end--
